{"version":3,"sources":["assets/scripts/Modules/BattleModule/Data/Action.ts","assets/scripts/Modules/CoreModule/Managers/AlertManager.ts","assets/scripts/Modules/CoreModule/Components/AlertWindow.ts","assets/scripts/Utils/AnimationBridge.ts","assets/scripts/Scenes/SelectorScene/Components/Editor/AnimationPlayer.ts","assets/scripts/Modules/CoreModule/Managers/AssetBundleManager.ts","assets/scripts/Modules/CoreModule/Data/BaseConfig.ts","assets/scripts/Utils/BaseContext.ts","assets/scripts/Modules/CoreModule/Data/BaseData.ts","assets/scripts/Modules/CoreModule/Managers/BaseManager.ts","assets/scripts/Platforms/BasePlatform.ts","assets/scripts/Modules/CoreModule/Data/BaseRepository.ts","assets/scripts/Scenes/BaseScene.ts","assets/scripts/Modules/BattleModule/Components/BattleAnimationsController.ts","assets/scripts/Modules/BattleModule/BattleCommon.ts","assets/scripts/Modules/BattleModule/Configs/BattleConfig.ts","assets/scripts/Modules/BattleModule/Components/BattleDisplay.ts","assets/scripts/Modules/BattleModule/Managers/BattleManager.ts","assets/scripts/Modules/BattleModule/Utils/BattleProcessor.ts","assets/scripts/Modules/BattleModule/Components/Main/BattleRewardContainer.ts","assets/scripts/Modules/BattleModule/Components/Main/BattleRewardDisplay.ts","assets/scripts/Scenes/BattleScene.ts","assets/scripts/Modules/BattleModule/Components/BattlerDisplay.ts","assets/scripts/Modules/BattleModule/Data/Battler.ts","assets/scripts/Modules/BattleModule/Data/Battle.ts","assets/scripts/Modules/BattleModule/Components/Cultivate/BottomListHeroContainer.ts","assets/scripts/Modules/BattleModule/Components/IndependentController/ButtonFlash.ts","assets/scripts/Scenes/SelectorScene/Components/CanvasAdapter.ts","assets/scripts/Modules/BattleModule/Components/IndependentController/ClickAnimation.ts","assets/scripts/Modules/BattleModule/Utils/ColorAssembler.ts","assets/scripts/Modules/BattleModule/Components/Cultivate/Compositing/CompositingWindowDisplay.ts","assets/scripts/Modules/PlayerModule/Utils/ConditionProcessor.ts","assets/scripts/Modules/PlayerModule/Data/Condition.ts","assets/scripts/Modules/CoreModule/Managers/ConfigManager.ts","assets/scripts/Modules/CopyModule/CopyCommon.ts","assets/scripts/Modules/CopyModule/Managers/CopyManager.ts","assets/scripts/Modules/CopyModule/Data/Copy.ts","assets/scripts/Modules/CoreModule/Common/CoreCommon.ts","assets/scripts/Scenes/SelectorScene/Components/CreatedWindow.ts","assets/scripts/Modules/BattleModule/Components/Cultivate/CultivateSelectionGroup.ts","assets/scripts/Modules/BattleModule/Components/Cultivate/CultivateSelection.ts","assets/scripts/Modules/BattleModule/Components/Cultivate/CultivateWindowController.ts","assets/scripts/Modules/CoreModule/Utils/DataLoader.ts","assets/scripts/Modules/CoreModule/Managers/DataManager.ts","assets/scripts/Utils/DateUtils.ts","assets/scripts/Utils/DecoratorUtils.ts","assets/scripts/Modules/BattleModule/Components/IndependentController/DoublePicturesButton.ts","assets/scripts/Modules/CoreModule/Data/DynamicData.ts","assets/scripts/Modules/EconomicModule/Common/EconomicCommon.ts","assets/scripts/Modules/EconomicModule/Manager/EconomicManager.ts","assets/scripts/Modules/HeroModule/Common/EditorCommon.ts","assets/scripts/Modules/HeroModule/Managers/EditorManager.ts","assets/scripts/Modules/BattleModule/Data/Effect.ts","assets/scripts/Modules/CopyModule/Data/Enemy.ts","assets/scripts/Utils/GIFUtils.ts","assets/scripts/Modules/CoreModule/Managers/GameManager.ts","assets/scripts/Scenes/SelectorScene/Components/Editor/GlobalEditorCell.ts","assets/scripts/Scenes/SelectorScene/Components/Editor/GlobalEditorLine.ts","assets/scripts/Scenes/SelectorScene/Components/Editor/GlobalEditor.ts","assets/scripts/Modules/HeroModule/Common/HeroCommon.ts","assets/scripts/Modules/BattleModule/Components/Cultivate/Compositing/HeroCompositingContainer.ts","assets/scripts/Modules/BattleModule/Components/Cultivate/Compositing/HeroCompositingDisplay.ts","assets/scripts/Modules/BattleModule/Components/Hero/HeroGroupContainer.ts","assets/scripts/Modules/BattleModule/Components/Hero/HeroGroupDisplay.ts","assets/scripts/Modules/BattleModule/Components/Hero/HeroGroupHeroContainer.ts","assets/scripts/Modules/BattleModule/Data/HeroGroup.ts","assets/scripts/Modules/BattleModule/Components/Hero/HeroInBagContainer.ts","assets/scripts/Modules/BattleModule/Components/Hero/HeroInBagDisplay.ts","assets/scripts/Modules/BattleModule/Components/Hero/HeroInTeamContainer.ts","assets/scripts/Modules/BattleModule/Components/Hero/HeroInTeamDisplay.ts","assets/scripts/Modules/BattleModule/Components/Cultivate/HeroInfoDisplay.ts","assets/scripts/Modules/BattleModule/Components/Hero/HeroItemContainer.ts","assets/scripts/Modules/BattleModule/Components/Hero/HeroItemDisplay.ts","assets/scripts/Modules/HeroModule/Managers/HeroManager.ts","assets/scripts/Modules/BattleModule/Components/Hero/HeroPageController.ts","assets/scripts/Modules/BattleModule/Components/Cultivate/Compositing/HeroQualitySiftSelectionGroup.ts","assets/scripts/Modules/BattleModule/Components/Cultivate/Compositing/HeroQualitySiftSelection.ts","assets/scripts/Modules/BattleModule/Components/PVP/HeroSelectContainer.ts","assets/scripts/Modules/BattleModule/Components/PVP/HeroSelectDisplay.ts","assets/scripts/Modules/HeroModule/Configs/HeroSystemConfig.ts","assets/scripts/Modules/HeroModule/Data/HeroSystem.ts","assets/scripts/Scenes/SelectorScene/Components/ItemContainers/HeroTypeContainer.ts","assets/scripts/Scenes/SelectorScene/Components/ItemPrefabs/HeroTypeDisplay.ts","assets/scripts/Scenes/SelectorScene/Components/ItemContainers/HeroTypeSelectionGroup.ts","assets/scripts/Scenes/SelectorScene/Components/ItemPrefabs/HeroTypeSelection.ts","assets/scripts/Modules/HeroModule/Data/HeroType.ts","assets/scripts/Modules/BattleModule/Components/HeroWithAvatar.ts","assets/scripts/Modules/HeroModule/Data/Hero.ts","assets/scripts/Modules/BattleModule/Components/IndependentController/HitDamage.ts","assets/scripts/Modules/CoreModule/Managers/I18nManager.ts","assets/scripts/Scenes/SelectorScene/Components/Editor/ImportWindow.ts","assets/scripts/Modules/CoreModule/Components/ItemContainer.ts","assets/scripts/Modules/CoreModule/Components/ItemDisplay.ts","assets/scripts/Modules/BattleModule/Components/Job/JobContainer.ts","assets/scripts/Modules/BattleModule/Components/Job/JobDisplay.ts","assets/scripts/Modules/EconomicModule/Data/Job.ts","assets/scripts/Modules/CoreModule/Components/LanguageSwitch.ts","assets/scripts/Modules/CoreModule/Managers/LoadingManager.ts","assets/scripts/Modules/CoreModule/Components/LoadingMask.ts","assets/scripts/Modules/CoreModule/Components/LocalizedLabel.ts","assets/scripts/Modules/CoreModule/Components/LocalizedSprite.ts","assets/scripts/Modules/BattleModule/Components/Main/MainBattleDisplay.ts","assets/scripts/Modules/BattleModule/Components/MainMenu/MainMenuController.ts","assets/scripts/Modules/BattleModule/Components/MainMenu/MainMenuItemSelectionGroup.ts","assets/scripts/Modules/BattleModule/Components/MainMenu/MainMenuItemSelection.ts","assets/scripts/Utils/MathUtils.ts","assets/scripts/Modules/CoreModule/Utils/MessageQueue.ts","assets/scripts/Modules/EconomicModule/Utils/MoneyConditionProcessor.ts","assets/scripts/Modules/EconomicModule/Utils/MoneyRewardProcessor.ts","assets/scripts/Modules/BattleModule/Data/MotionGroup.ts","assets/scripts/Modules/BattleModule/Utils/MotionProcessor.ts","assets/scripts/Modules/BattleModule/Data/Motion.ts","assets/scripts/Scenes/BattleScene/Components/MyTeamFrame.ts","assets/scripts/Modules/NFTModule/Common/NFTCommon.ts","assets/scripts/Modules/NFTModule/Utils/NFTCreator.ts","assets/scripts/Modules/NFTModule/Managers/NFTManager.ts","assets/scripts/Modules/CoreModule/Managers/NetworkManager.ts","assets/scripts/Utils/NumberUtils.ts","assets/scripts/Modules/BattleModule/Components/PVP/PVPBattleDisplay.ts","assets/scripts/Modules/BattleModule/Components/PVP/PVPBattlerState.ts","assets/scripts/Modules/BattleModule/Components/PVP/PVPRoomDisplay.ts","assets/scripts/Modules/BattleModule/Data/PVPRoom.ts","assets/scripts/Modules/BattleModule/Components/PVP/PVPWindowController.ts","assets/scripts/Modules/CoreModule/Utils/ParamCodec.ts","assets/scripts/Modules/HeroModule/Data/Param.ts","assets/scripts/Scenes/SelectorScene/Components/ItemContainers/PartColorsContainer.ts","assets/scripts/Modules/HeroModule/Configs/PartConfig.ts","assets/scripts/Modules/HeroModule/Data/PartInfo.ts","assets/scripts/Modules/HeroModule/Managers/PartManager.ts","assets/scripts/Scenes/SelectorScene/Components/ItemPrefabs/PartScaler.ts","assets/scripts/Scenes/SelectorScene/Components/ItemContainers/PartTypeContainer.ts","assets/scripts/Scenes/SelectorScene/Components/ItemPrefabs/PartTypeDisplay.ts","assets/scripts/Scenes/SelectorScene/Components/ItemContainers/PartTypeSelectionGroup.ts","assets/scripts/Scenes/SelectorScene/Components/ItemPrefabs/PartTypeSelection.ts","assets/scripts/Modules/HeroModule/Data/PartType.ts","assets/scripts/Scenes/SelectorScene/Components/ItemContainers/PartsContainer.ts","assets/scripts/Scenes/SelectorScene/Components/ItemPrefabs/PartsDisplay.ts","assets/scripts/Scenes/SelectorScene/Components/ItemContainers/PartsSelectionGroup.ts","assets/scripts/Scenes/SelectorScene/Components/ItemPrefabs/PartsSelection.ts","assets/scripts/Modules/HeroModule/Data/Part.ts","assets/scripts/Modules/CoreModule/Managers/PlatformManager.ts","assets/scripts/Modules/BattleModule/Data/PlayerBattle.ts","assets/scripts/Modules/BattleModule/Components/PVP/PlayerCardContainer.ts","assets/scripts/Modules/BattleModule/Components/PVP/PlayerCardDisplay.ts","assets/scripts/Modules/PlayerModule/Common/PlayerCommon.ts","assets/scripts/Modules/CopyModule/Data/PlayerCopy.ts","assets/scripts/Modules/BattleModule/Components/Job/PlayerInfoDisplay.ts","assets/scripts/Modules/EconomicModule/Data/PlayerJob.ts","assets/scripts/Modules/PlayerModule/Managers/PlayerManager.ts","assets/scripts/Modules/EconomicModule/Data/PlayerMoney.ts","assets/scripts/Modules/RankModule/Data/PlayerRank.ts","assets/scripts/Modules/PlayerModule/Data/Player.ts","assets/scripts/Scenes/SelectorScene/Components/ItemPrefabs/PreviewPictureDisplay.ts","assets/scripts/Utils/PromiseUtils.ts","assets/scripts/Modules/HeroModule/Data/Quality.ts","assets/scripts/Modules/BattleModule/Components/IndependentController/RadiusMask.ts","assets/scripts/Modules/BattleModule/Components/IndependentController/RandomAnimation.ts","assets/scripts/Modules/RankModule/Common/RankCommon.ts","assets/scripts/Modules/BattleModule/Components/PVP/RankItemContainer.ts","assets/scripts/Modules/BattleModule/Components/PVP/RankItemDisplay.ts","assets/scripts/Modules/RankModule/Data/RankRecord.ts","assets/scripts/Modules/BattleModule/Utils/ResultProcessor.ts","assets/scripts/Modules/BattleModule/Data/Result.ts","assets/scripts/Modules/PlayerModule/Utils/RewardProcessor.ts","assets/scripts/Modules/PlayerModule/Data/Reward.ts","assets/scripts/Modules/CoreModule/Managers/SceneManager.ts","assets/scripts/Modules/CoreModule/Utils/ScrollviewFilter.ts","assets/scripts/Modules/CoreModule/Components/SelectableGroup.ts","assets/scripts/Modules/CoreModule/Components/SelectableObject.ts","assets/scripts/Modules/BattleModule/Components/PVP/SelectedHeroDisplay.ts","assets/scripts/Scenes/SelectorScene/SelectorScene.ts","assets/scripts/Modules/BattleModule/Components/SettlementWindowController.ts","assets/scripts/Scenes/SelectorScene/Components/Editor/SingleEditor.ts","assets/scripts/Modules/CoreModule/Utils/SingletonUtils.ts","assets/scripts/Utils/SkeletonAnimationBridge.ts","assets/scripts/Modules/BattleModule/Components/PVP/SkillItemContainer.ts","assets/scripts/Modules/BattleModule/Components/PVP/SkillItemDisplay.ts","assets/scripts/Modules/HeroModule/Data/Skill.ts","assets/scripts/Modules/BattleModule/Components/Main/SpeedButtonController.ts","assets/scripts/Utils/SpineUtils.ts","assets/scripts/Modules/BattleModule/Components/StageProgressController.ts","assets/scripts/Modules/BattleModule/Components/Cultivate/StarUp/StarUpWindowDisplay.ts","assets/scripts/Modules/CoreModule/Data/StaticData.ts","assets/scripts/Modules/BattleModule/Components/Cultivate/Summon/SummonWindowDisplay.ts","assets/scripts/Test/TestAutoProfit.ts","assets/scripts/Test/TestGetHero.ts","assets/scripts/Test/TestHeroItem.ts","assets/scripts/Platforms/TestPlatform.ts","assets/scripts/Test/TestSpine.ts","assets/scripts/Modules/BattleModule/Data/Trait.ts","assets/scripts/Utils/TransformUtils.ts","assets/scripts/Utils/TypeUtils.ts","assets/scripts/Modules/BattleModule/Components/Cultivate/Upgrade/UpgradeWindowDisplay.ts","assets/scripts/Modules/BattleModule/Utils/Vec1.ts","assets/scripts/Scenes/SelectorScene/Components/VideoAutoPlay.ts","assets/scripts/Scenes/SelectorScene/Components/WalletController.ts","assets/scripts/Utils/gifshot.js"],"names":["BaseData_1","require","Result_1","BattlerInfo","_super","index","parent","_this","call","this","camp","pos","action","__extends","Object","defineProperty","prototype","get","_a","battle","getBattler","getOpponents","create","battler","res","__decorate","field","BaseData","exports","Action","time","setSubject","subject","setTarget","target","setSkill","skillInfo","_skillInfo","skillId","skill","subjectBattler","skills","find","s","apply","use","makeResult","Number","Result","BaseManager_1","alertMgr","getManager","AlertManager","catchAsError","throwFunc","detail","obj","key","desc","oriFunc","value","p","_i","arguments","length","sent","console","error","e","e_1","Error","data","handleError","objOrUseThrow","useThrow","process","e_2","AlertDialogType","GameError","code","errMsg","alertQueue","handled","status","title","I18nManager_1","i18nMgr","makeStr","dKey","alert","OK","then","message","type","Promise","resolve","task","AlertTask","push","hasAlert","popAlertTask","splice","manager","BaseManager","AlertResult","promiseResolve","feedback","result","ccclass","cc","_decorator","Label","property","Button","Node","AlertManager_1","Layout","AlertWindow","update","isShowing","currentTask","show","titleLabel","string","messageLabel","setupType","window","active","dismiss","Prompt","buttonGroup","okButton","node","cancelButton","OKCancel","getComponentsInChildren","forEach","val","updateLayout","btnOKClicked","btnCancelClicked","CANCEL","backgroundClicked","Component","default","requireComponent","Animation","menu","AnimationBridge","animation","start","getComponent","play","PreviewPictureDisplay_1","Skeleton","sp","AnimationPlayer","skeleton","aniName","clearTrack","setAnimation","addAnimation","DefaultStand","CoreCommon_1","LoadingManager_1","BundleName","Data","Sprites","assetMgr","AssetBundleManager","bundlePool","assetPool","initializeBundles","name","log","_loadBundle","loadBundle","__awaiter","_b","_loadBundlePromise","assetManager","err","bundle","loadAsset","bundleName","assetPath","_getAssetKey","_loadAsset","path","_loadAssetPromise","load","warn","showLoading","CoreLoading","GetAsset","ConfigManager_1","config","clazz","configMgr","registerConfig","BaseConfig","BaseContext","contents","ori","contentName","remove","instance","AssetBundleManager_1","DataLoader_1","pkType","String","typeOrObj","isDesc","constructor","oType","setting","DataLoader","getSetting","properties","assetField","assetFields","dataPK","isLoaded","_loadTasks","onCreated","loadTasks","toJSON","convert","clone","deep","assign","addLoadTask","loadAssetToField","regRes","reg","exec","replace","_c","GameData","_id","toString","SingletonUtils_1","ManagerContext","dt","c","singleton","managerContext","getSingleton","managerValue","managerGetter","updateContext","deltaTime","PlatformManager_1","UserInfoDesc","MaxAdsDayCount","AdsUnitId","BasePlatform","adsEnable","adsCheckCount","initAds","getUserData","getOpenid","openid","getUserInfo","userInfo","loadAds","doLoadAds","adsData","onLoad","showAds","pendingAds","doShowAds","adsCheckTime","check","MiniGamePlatform","adsObject","createAdsObject","bind","onClose","offClose","isEnded","platform","platformMgr","registerPlatform","BaseContext_1","DataManager_1","RepositoryContext","repositoryContext","throwMessage","throwFuncOrErrMsg","repository","getRepository","filterKeys","keys","DefaultThrowFunc","BaseRepository","idMap","processFuncs","dataMgr","getDataList","doc","id","getDataById","filter","list","item","every","findOne","id_1","res_1","getOne","repo","getById","count","exist","ensure","ensureNot","proto","getOwnPropertyNames","fName","processFunc","newFunc","getNewFunc","getKeysFromName","startsWith","getFindOneFunc","getFindFunc","getGetOneFunc","getCountFunc","getExistFunc","getEnsureFunc","getEnsureNotFunc","analyseByClause","split","makeFilter","i","convertKey","charAt","toLowerCase","slice","__spreadArrays","getThrowFunc","funcs","SceneManager_1","NFTManager_1","PlayerManager_1","BaseScene","sceneMgr","curScene","onDestroy","Web3Enable","nftMgr","init","autoConnect","playerMgr","autoLogin","Animations","BattleScene_1","Prefab","instantiate","BattleAnimationsController","animationPrefabs","animations","speeds","speed","battleScene","battleSpeed","a","getAnimationState","defaultClip","isPlaying","destroy","posX","posY","ani","x","y","scaleX","BattleThrow","test","BattleInterface","StartMainBattle","__generator","StartMainBattleAction","EndMainBattle","BoostMainBattle","GetPVPPlayerCount","GetPVPPlayers","StartPVP","StartPVPAction","SkipPVP","BoostPVP","EndPVP","StartCopy","BuyBattleChance","StartTest","NextTest","EndTest","post","BaseConfig_1","BattleConfig","hit","defaultBase","baseHitRate","float","crit","minRate","damageRate","restraint","rates","ItemDisplay_1","BattleAnimationsController_1","BattleDisplay","battlerNodes","battlers","n","BattlerDisplay_1","b","getDisplay","info","refresh","clearItems","addItem","updateAnimationSpeed","updateBattleAnimation","timeScale","times","getCurrentAnimationTimes","getCurrentAnimations","playNormalAnimation","ItemDisplay","battleMgr","BattleManager","battles","startMainBattle","BattleCommon_1","iRes","Battle_1","Battle","isEntering","enter","getBattleNFTs","startBattle","startMainFirstAction","battleId","nextAction","Action_1","addAction","nextMainBattle","startCopy","copyId","processor","BattleProcessor_1","createProcessor","isHero","battlers_1","HeroManager_1","heroMgr","getOneFromServer","nftId","startPVPBattle","selfNftId","roomId","enemyNftId","startPVPFirstAction","Battler_1","PromiseUtils_1","Copy_1","PlayerCopy_1","SelfCamp","PlayerCamp","battleProcessor","BattleProcessor","processorSettings","onActionStartListener","onActionStart","onActionEndListener","onActionEnd","onBattleEndListener","w","onBattleEnd","winner","onStarted","terminate","onTerminated","processRewards","rewards","isResult","gold","campBonusParam","BonusParamType","Gold","invoke","updateBattle","printBattle","BattleState","state","elapsedTime","actionTime","BattlerState","hp","motions","actions","MainBattleProcessor","copyRepo","main","level","calcRewards","isWin","isFirst","PromiseUtils","waitForRetry","resultBattle","setActionTime","pCopy","getPlayerData","PlayerCopy","mainCopy","next","isLose","prev","BattleType","Main","RoundBattleProcessor","CopyBattleProcessor","nextRound","Copy","BossBattleProcessor","Boss","PVPBattleProcessor","PVP","ItemContainer_1","BattleRewardContainer","coldDownTime","onItemsChanged","items","itemsComponents","delayTime","ItemContainer","Sprite","NumberUtils_1","BattleRewardDisplay","icon","animationTime","timer","updateNodeAnimation","onItemChanged","updateLabels","resetTimers","opacity","Math","max","scale","min","autoUnitConvert","BaseScene_1","CopyManager_1","BattleManager_1","BattleScene","heroesInTeam","battleEnded","myTeamFrameNode","cultivateWindowNode","settlementWindowNode","mainBattleNode","pvpBattleNode","currentPVPRoomIndex","roomSelected","currentTargetSelect","currentPVPSelect","heroSelected","loading","connect","setSingleComponents","Date","now","copyMgr","getMainPlayerCopySettings","speedUpTime","mainBattle","myTeamFrame","cultivateWindow","settlementWindow","pvpBattle","setItem","undefined","battle_1","endPVPBattle","waitForLogin","waitForDataLoad","Vec2","ProgressBar","Vec1_1","HitDamage_1","SpineUtils_1","BattlerDisplay","heroScale","hpBar","shadowNode","itemList","set","setPosition","Vec1","skeletonNode","angle","scaleY","setScale","color","oriPos","oriAngle","oriScale","flip","drawSkeleton","entity","parts","temp","addComponent","hero","HeroSkeleton","getCacheOneFromServer","heroTypeId","part","addPart","skeletonData","updateTranslate","updateColor","updateOpacity","updateAnimation","updateResult","sizeFilter","updateHp","updateItemList","sPos","convertPosition","startPos","tPos","targetPos","curPos","lerp","posRate","z","shakePos","offset","origin","add","targetDisplay","Idle","Dead","updateNormalAnimation","anim","normalAnimationTimes","normalAnimations","height","loop","clearTracks","hpDamage","showDamage","component","setValue","isCritical","setType","HitType","Critical","isMiss","Miss","width","progress","misc","mhp","isDead","shift","Color","MathUtils_1","MotionProcessor_1","Skill_1","MotionGroup_1","Enemy_1","SkillInfo","useCount","boostCount","lastTime","skillRepo","boostCost","freezeTime","effects","map","applyLevel","traits","t","boostConditions","Condition_1","ConditionGroup","cGte","ConditionType","frozenTime","boost","isUsable","testData","Battler","params","bonusParams","Hidden","ZERO","ONE","WHITE","_normalAnimations","_normalAnimationTimes","motionProcessors","preparingMotion","_animation","refreshEntity","enemyId","enemy","enemyRepo","Trait_1","TraitGroup","Entering","Acting","Frozen","Dying","battleLevel","isEnemy","enemyLevel","param","Param_1","ParamType","ATK","DEF","AVO","bonusParam","traitBonusParam","TraitType","BonusParam","sum","CP","CPB","HID","POW","AGI","INT","POWB","AGIB","INTB","CRI","DMG","ATKB","CRIB","DMGB","EVA","DEFB","AVOB","EVAB","MHP","SPD","HIT","MHPB","SPDB","HITB","AB1","AB2","AB3","AB4","BP","BPB","addHP","refreshHp","resetHp","judgeDie","isDying","isHPDead","die","addMotion","DieMotionGroupId","onDie","onDead","enterNextBattler","isHidden","onEntered","updateEntering","motion","EnemyType","BossEnterMotionGroupId","EnterMotionGroupId","isIdle","inputAction","generateTarget","generateSkill","MathUtils","randomPick","opponents","invokeAction","canInvokeAction","subjectMotionId","PartAttackId","weapon","weaponPart","attackMotionId","AttackMotionGroupId","_result","processResult","hpRecover","hpDrain","applyResult","canApplyResult","showResult","targetMotionId","onResultApply","onResultEnd","played","motionEndTime","onStart","onFinish","motionGroupRepo","playMotion","m","scheduleMotions","onMotionStart","startTime","endTime","playType","totalEndTime","updateMotions","isCurMotionFinished","onMotionFinish","refreshParams","battleParams","clamp","normalAttack","sInfo","Reward_1","DynamicData_1","EnemyCamp","MainIndex","BattleResult","Reward","inputtingBattlers","inputIndex","battleAnimations","battleAnimationTimes","NotStarted","Starting","Ending","Ended","isRunning","updateProgress","isStarting","isAllBattlersIdle","isNextRound","getBattlers","inputtingBattler","at","generateInputtingBattlers","inputtingBattlersGenerator","getNextBattler","getCampBattlers","getCampAllBattlers","isCampDead","reduce","isMotionsFinished","addBattler","judgeWinner","updateBattlers","actionOrSubject","sort","a1","a2","updateActions","curAction","isActing","isEnding","battler1","battler2","battler3","Boolean","DynamicData","EventHandler","BottomListHeroContainer","cultivateController","totalHeroes","page","heroFrame","setup","acc","player","account","getListFromServer","h","ownerAccount","onPageChange","updateNodes","findIndex","currentHero","event","handler","customEventData","clickEvents","nextPage","lastPage","floor","setItems","onItemClicked","refreshHero","ButtonFlash","button","sprite","on","EventType","TOUCH_START","lightOn","TOUCH_CANCEL","lightOff","TOUCH_END","dstBlendFactor","macro","ONE_MINUS_SRC_ALPHA","Widget","SelectorScene_1","CanvasAdapter","canvas","previewUI","selectUI","createUI","descriptionUI","fixed","windowWidth","isDebug","testWidth","selectorScene","editorMode","top","windowSize","document","documentElement","clientWidth","getHeightByWidth","isAlignLeft","left","right","isAlignHorizontalCenter","horizontalCenter","Vec3","ClickAnimation","clickObj","isLoad","click","_touchListener","setSwallowTouches","position","setTimeout","executeInEditMode","director","RenderComponent","Director","ColorAssembler","colors","onEnable","once","EVENT_AFTER_DRAW","updateColors","onDisable","off","FLAG_COLOR","cmp","_assembler","uintVerts","_renderData","uintVDatas","floatsPerVert","colorOffset","l","HeroInfoDisplay_1","PlayerMoney_1","HeroCompositingDisplay_1","CompositingWindowDisplay","heroInfo","mainHero","secondHero","priceValues","balanceValues","updatePictures","PlayerMoney","token","onHeroChange","selectHero","deselectMainHero","deselectSecondHero","compositingBtn","conditionProcessor","ConditionProcessor","condition","compare","consumable","judge","preprocess","pValue","playerValue","consume","doConsume","FuncConditionProcessor","jFunc","Func","cEq","Condition","eq","cNeq","neq","gte","cGt","gt","cLte","lte","cLt","lt","cFun","tFunc","fun","ConditionProcessor_1","conditions","conds","cond","curCond","processors","processors_1","processors_2","processors_3","Diamond","Medal","Token","Fragment","ConfigManager","configs","_initializeData","CoreInterface","GetConfig","cache","getConfigCache","CopyInterface","AdjustHeroes","CopyManager","getMainPlayerCopy","mainSetting","getPlayerCopy","CopyType","BaseRepository_1","StaticData_1","SpriteFrame","DefaultMaxRound","CopyLevel","mapIdx","enemyIds","firstRewards","winRewards","loseRewards","copy","enemies","eid","win","first","RewardGroup","r","pictureName","maxRound","maxLevel","levels","difficulty","StaticData","CopyRepo","getByType","maxValue","showImmediately","GameLoading","p1","p2","p3","p4","opt","makeInterfaceOption","NetworkManager_1","networkMgr","request","Interface","d","method","hostOrRoute","routeOrLoading","loadingOrUseToken","useEncrypt","route","host","useToken","CoreThrow","SystemError","Default","Request","GetData","UpdateToken","CreatedWindow","picture","light","frame","tips","sf","tipContents","setPicture","base64","img","Image","src","self","onload","texture","Texture2D","initWithElement","handleLoadedTexture","spriteFrame","setQuality","quality","idx","shut","jump","location","href","SelectableGroup_1","CultivateSelectionGroup","SelectableGroup","SelectableObject_1","CultivateSelection","labelNode","redPoint","pictures","controller","onDeselected","onSelected","onSelectionCardChange","select","SelectableObject","CultivateSelection_1","CultivateSelectionGroup_1","CultivateWindowController","selectionCards","selectionGroup","outNodes","inNodes","initSelectionGroup","selectableGroup","addElement","selected","isSelected","open","quit","JsonAsset","isChildClassOf","js","TypeUtils_1","getMetaData","occasions","getDefault","getProperties","getDataPK","getAssetFields","loadProp","all","loadFromAssetBundle","loadFromJSON","json","prop","pType","loadType","asset","Array","ensureType","eType_1","isData","typeOrData","Function","convertProp","keys_1","convertType","DataManager","waitFor","loadingProgress","database","_initializeDatabase","_d","registerData","getData","dataKey","getDataByIndex","getDataDict","dict","values","getDataName","allData","concat","DateUtils","time2DateStr","date","getFullYear","getMonth","padStart","getDate","time2Str","getHours","getMinutes","getSeconds","time2StrInFile","sec2Str","sec","date2DayStart","setHours","isToday","dayDiff","date1","date2","NEGATIVE_INFINITY","POSITIVE_INFINITY","getTime","DayTime","oriFun","NewClass","interactable","EconomicThrow","NotEnoughMoney","NotEnoughFragment","NotEnoughReturn","CanNotUnlockJob","JobAlreadyUnlocked","JobNotUnlocked","ReachJobMaxLevel","NotJobProfitTime","UnlockJobError","UpgradeJobError","ProfitJobError","EconomicInterface","UnlockJob","UpgradeJob","ProfitJob","EconomicCommon_1","economicMgr","EconomicManager","playerJob","jobItems","isAutoProfit","profitAutoCheck","profit","jobItem","j","jobId","profitConditions","profitRewards","upgrade","curLevel","unlockConditions","upgradeConditions","EditorInterface","PushConfig","PullConfig","SaveConfig","RecalcConfig","ImportParts","FileType","PartConfig_1","EditorCommon_1","DateUtils_1","editorMgr","EditorManager","changes","_config","getMapValue","cKey","id1","id2","default_","setMapValue","getPHtScale","ptId","fhtId","htId","pHtScale","getPtBptScale","pOriId","bpOriId","getPtBptOffset","getPtBptHidden","getClothes6Problem","hpOriId","getWeapon3Problem","getFootOffset","bodyId","footOffset","setPHtScale","setPtBptScale","setPtBptOffset","setPtBptHidden","setClothes6Problem","setWeapon3Problem","setFootOffset","getConfig","setConfig","changePtBptScale","bptId","addChange","changePtBptOffset","changePHtScale","chtId","changePtBptHidden","changeClothes6Problem","changeWeapon3Problem","changeFootOffset","getKey","join","getChange","changeOrKey","cKey_1","change","oldChange","getMergeVal","old","new_","resetChange","exportAll","str","JSON","stringify","saveForBrowser","copyToClipboard","export","input","createElement","body","appendChild","setAttribute","execCommand","removeChild","import","openLocalFile","file","readLocalFile","Text","parse","pull","textToWrite","fileNameToSaveAs","sys","isBrowser","textFileAsBlob","Blob","downloadLink","download","innerHTML","webkitURL","createObjectURL","URL","style","display","accept","inputEl","getElementById","onchange","files","readType","reader","FileReader","readyState","DONE","DataUrl","readAsDataURL","readAsText","Binary","readAsBinaryString","ArrayBuffer","readAsArrayBuffer","base64ToTexture2D","callback","onerror","base64ToSpriteFrame","newframe","EffectType","LevelSetting","Effect","percent","None","levelSettings","ls","SkeletonData","Hero_1","Enemy","Normal","RestraintType","Red","skeletonName","score","_battleParams","paramRepo","k","EnemyRepo","gifshot","GIFUtils","makeGIF","images","passedOptions","getSelectedOptions","image","made","gifWidth","gifHeight","interval","frameDuration","sampleInterval","numWorkers","isOutOfDate","Duration","isNeedUpdate","UpdateDuration","invalid","gameMgr","GameManager","lastCheckUpdToken","needUpdateToken","checkUpdateToken","getToken","setToken","updateToken","finally","Slider","EditBox","EditorManager_1","GlobalEditorCell","isTitle","slider","edit","line","globalEditor","singleEditor","partType","firstHeroType","drawTitle","drawValue","getDisplayName","toFixed","editable","isBody","curPart","basePart","isWeapon","bodyPart","cPtId","partTypeId","cHtId","cBhtId","preview","GREEN","textLabel","partsContainer","reset","onScaleSlide","rate","onEdit","num","isNaN","GlobalEditorCell_1","HeroType_1","GlobalEditorLine","cellContainer","cells","editPrefab","titlePrefab","cellCreated","refreshCells","createCells","heroTypeRepo","ht","createCell","heroType","prefab","cell","PartsContainer_1","PartTypeContainer_1","PartType_1","GlobalEditorLine_1","GlobalEditor","partTypeContainer","lineContainer","lines","partTypeRepo","createLines","createLine","HeroInterface","SyncHero","CreateHero","GetHero","GetHeroCount","GetHeroes","UpgradeLevel","BreakLevel","UpgradeStar","UpgradeStrengthen","RefreshAllRank","EmptyCache","ScrollviewFilter_1","HeroQualitySiftSelectionGroup_1","HeroQualitySiftSelection_1","CompositingWindowDisplay_1","HeroCompositingContainer","qualitySelections","compositing","container","onSelectionChange","nodes","ScrollviewFilter","currentSelection","HeroWithAvatar_1","HeroCompositingDisplay","nameLabel","qualitySprite","qualityPictures","moreInfoNode","levelLabel","starNodes","selectedNode","fightingNode","updateMoreInfo","star","HeroGroup_1","HeroGroupContainer","currentGroupType","HeroGroupType","RESTRAINT","groupHeroes","heroes","groupBy","groups","maxIdx","STAR","QUALITY","HeroGroup","setHeroGroupType","parseInt","Quality_1","HeroGroupHeroContainer_1","HeroGroupDisplay","stars","restraintIcons","setTag","heroContainer","starsNode","iconNode","tagLabel","QualityType","HeroGroupHeroContainer","modifyOnClickEvents","btn","getComponentInChildren","clickEventHandler","onHeroClicked","addTeamMember","groupValue","HeroInBagContainer","currentRace","onHeroRaceChange","setHeroBagFilter","race","HeroInBagDisplay","fragmentLabel","qualityBackground","fightingTips","onAvatarClick","HeroInTeamContainer","onTeamHeroClicked","removeTeamMember","HeroInTeamDisplay","qualityLabel","qualityData","shortName","HeroInfoDisplay","qualityStrings","starSprites","restraintSprite","heroSkeleton","starPictures","restraintPictures","size","playAnimation","HeroItemContainer","HeroItemDisplay","attackLabel","defenseLabel","healthLabel","upgradeValueLabel","upgradeTipsLabel","scissorsIcon","upgradeIcon","upgradeNode","upgradePicture","upgradeButton","starLayout","scissorsPictures","buttonPictures","upgradeIcons","HeroItemDisplay_1","atk","def","isMax","breakEnable","break","costs","diamond","enable","paddingLeft","leftPending","spacingX","upgradeBtn","HeroCommon_1","PageSize","HeroManager","serverKey","bt1","bt2","getCacheOne","getNFTDetail","getList","getCacheList","getCount","cnt","maxPage","ceil","createCount","getListWithPage","getCacheListWithPage","getMyNFTList","getNFTCount","getOrCreateCacheList","tokenId","Hero","seriesId","DefaultBt1","gameId","DefaultBt2","chainId","tokenName","avatarUrl","tokenUrl","UR","price","convertPrice","currentPrice","creatorAccount","createAddress","ownerAddress","addedParams","convertParams","partSettings","convertComponentIds","componentIds","rawData","extra","cidsStr","cid","PartSetting","nftMakeId2PartId","getLastNFT","hash","getLastestNFT","synchronizeAllHeroes","addFromServer","_getOneFromServer","getCacheListFromServer","getCountFromServer","getListWithPageFromServer","_getListFromServer","getCacheListWithPageFromServer","_getCountFromServer","getOrCreateCacheListFromServer","strengthen","starUp","HeroPageController","pages","titles","onStateChange","backBtn","teamBtn","bagBtn","HeroQualitySiftSelectionGroup","LabelOutline","HeroQualitySiftSelection","outline","HeroSelectContainer","HeroSelectDisplay","selectNode","selectPicture","selectButton","selectFrame","HeroSelectDisplay_1","selectBtn","HeroSystemConfig","paramCalc","HeroSystemConfig_1","HeroSystem","minLevel","isMin","calc","paramId","affectParams","includes","doCalc","ConfigurableHeroSystem","systemName","cost","formula","eval","LevelData","curMaxLevel","defaultMax","breakLevel","BreakData","heroLevel","StrengthenData","StarData","costTable","paramTable","paramConfig","costConfig","HeroTypeDisplay_1","HeroTypeSelection_1","HeroTypeSelectionGroup_1","HeroTypeContainer","updateSelectionGroup","selection","onSelectChanged","currentHeroType","onHeroTypeChange","onTypeChange","HeroTypeDisplay","label","background","HeroTypeSelectionGroup","HeroTypeSelection","HeroRace","Part_1","HeroType","Race0","defaultParts","defaultSkeletonName","createEnable","getDefaultParts","partRepo","indexOf","HeroTypeRepo","HeroWithAvatar","avatar","avatarHeight","avatarWidth","avatarOffsetX","avatarOffsetY","drawAvatar","bone","findBone","updateWorldTransform","offsetX","worldX","offsetY","worldY","slot","findSlot","getAttachment","HeroSystem_1","HeroState","SuitPattern","_part","partId","DefaultChainId","variation","skillIds","suitPattern","NotCreated","initHeroSystems","defaultSkeleton","_parts","ps","special","SpecialPartType","Body","Weapon","qualityRepo","battlePoint","_heroSystems","bonus","heroSystems","baseParam","isPercent","round","base","pow","agi","int","partInfos","randomString","createRandomQuality","Font","HitDamage","speedX","speedY","accelerationY","scaleSpeed","disappearSpeed","maxScale","atlas","miss","updateScale","updatePosition","setRange","rx","random","ry","font","getLanguage","Languages","I18nManager","curLanguage","registeredLabels","registeredSprites","loadTranslation","translation","tag","tr","ts","spriteName","loadSpriteFrame","registerLabel","unregisterLabel","registerSprite","unregisterSprite","setLanguage","language","updateUIs","getCurrentLanguage","updateText","updateSprite","ImportWindow","importInput","close","text","itemCount","isInclude","refreshComponents","createItemDisplay","onItemDisplayCreated","Job_1","PlayerJob_1","EconomicManager_1","JobContainer","PlayerJob","jobs","jobRepo","job","JobDisplay","profitLabel","profitLabel2","upgradeLabel","upgradeTips","timerLabel","numberLabel","infoNode","profitNode","autoIconNode","iconFrameNode","progressBar","levelProgress","levelUpAnimation","iconSprite","lastProfitTime","drawNodes","drawLabels","drawPictures","drawIcon","auto","upgradeCosts","isLocked","restSecond","restSecondRate","profitBtn","updateDraw","Job","unlockParams","profitParams","upgradeParams","upgradeGold","JobRepo","Toggle","LanguageSwitch","toggles","langIdx","onClick","isChecked","languageLabel","setWindowVisible","visible","langSwitchWindow","loadingMgr","LoadingManager","settingOrObj","detailOrKey","hasSetting","startLoading","finish","blockLoading","mgr","isBlocked","peekLoadingInfo","peekLatestLoadingInfo","LoadingState","loadingInfo","pushLoadingInfo","LoadingInfo","popLatestLoadingInfo","pop","currentValue","getTotalTime","NOT_STARTED","markFinished","updateLoadingText","updateReminder","LOADING","FINISHED","markStarted","BlockInputEvents","LoadingMask","isNotStarted","loadingLabel","blockInput","isFinished","unblockInput","tmp","detailLabel","inputBlocker","enabled","LocalizedLabel","prevRawText","prevLocalizedText","lateUpdate","LocalizedSprite","SpriteName","test33","BattleDisplay_1","StageProgressController_1","MainBattleDisplay","mapName","progressContainer","progressPrefab","backgroundSprite","currentLevel","initProgress","displayName","setMap","updateStageProgress","nextStage","lastStage","enemyIndex","stageIndex","mapPicture","MainMenuItemSelectionGroup_1","MainMenuItemSelection_1","MainMenuController","backgroundSprites","iconSprites","textNodes","playerWindows","backgroundSelect","iconSelect","backgroundUnselect","iconUnselect","redPointTips","selections","updateTips","bg","ic","MainMenuItemSelectionGroup","MainMenuItemSelection","len","chars","maxPos","array","randomPickMany","repeat","randomByRate","MessageQueue","registerListener","queue","addEventListener","MoneyConditionProcessor","pMoney","gain","GoldConditionProcessor","DiamondConditionProcessor","MedalConditionProcessor","FragmentConditionProcessor","ReturnTimeConditionProcessor","pJob","returnTimes","ReturnTime","RewardProcessor_1","MoneyRewardProcessor","RewardProcessor","GoldRewardProcessor","rewardProcessor","RewardType","DiamondRewardProcessor","MedalRewardProcessor","FragmentRewardProcessor","Motion_1","HurtMotionGroupId","SkillMotionGroupId","RecoverMotionGroupId","MotionGroup","Motion","MotionGroupRepo","attack","hurt","recover","DecoratorUtils_1","v2","motionProcessor","MotionProcessor","targetBattler","totalProgress","duration","wait","totalDuration","motionTarget","tType","TargetType","Self","Subject","Target","isStarted","isElapsedStarted","isElapsedEnded","end","isElapsedFinished","onProgress","onEnd","TranslateProcessor","propKey","setupStartVal","setupTargetVal","startVal","targetVal","delta","TranslateType","Delta","Value","Origin","oriVal","MoveProcessor","MotionType","Move","ScaleProcessor","Scale","RotateProcessor","Rotate","JumpProcessor","Jump","ApplyResultProcessor","ApplyResult","ShowResultProcessor","ShowResult","CharAniProcessor","realDuration","getRuntimeData","PlayCharAni","ShakeProcessor","tt","range","sin","PI","Shake","ShineProcessor","realColor","fromHEX","colorCode","Shine","FadeOutProcessor","FadeOut","PlayBattleAniProcessor","PlayBattleAni","PlayNormalAniProcessor","PlayNormalAni","AniOrigin","HeroInTeamContainer_1","HeroGroupContainer_1","CopyCommon_1","MyTeamFrame","heroesInTeamContainer","heroGroupContainer","refreshTeam","getHeroesInTeam","cfg","nftIds","teamHeroNftIds","makeNewTeam","copyType","NFTThrow","Web3InitError","NicknameError","PartStockError","NFTStockError","NFTExistError","TransactionError","NFTCreateError","NFTLoading","Web3Init","CreateNFT","NFTInterface","UploadImgInterface","Testing","NFTCommon_1","NFTCreator","_partIds","calcPrice","getPrice","getNFTPrice","partIds","checkNFT","regular","payForGameToken","getTotalSupply","totalSupply","payForIt","searchHash","checkAccount","defaultAccount","uploadImage","gif","getGIFFormData","binary","atob","bits","Uint8Array","charCodeAt","File","FormData","append","chainType","url","createNFT","MessageQueue_1","NFTManager","DefaultChainType","DefaultWalletType","DefaultTokenType","NFTTestServerPath","NFTServerPath","nftMakeId","getByNftMakeId","partId2NftMakeId","PartTypeIdOffset","walletType","scripts","waitForInit","objOrDefault","args","reject","initialized","tokenType","initialize","loadScripts","setupLanguage","createWeb3","scripts_1","script","loadScript","head","children","lang","w3","getWeb3Lib","updateMessage","processMessage","nftData","dataRes","inviteAddress","address","getEnoughStock","componentId","getPartsStock","getFilterComponentStock","notUniqueParts","filterUniqueComponent","getAllNFTList","pageNum","pageSize","getALLNFTList","getTokenExtraView","imgUrl","dataRej","checkPaySymbol","symbolInfo","symbolName","NFTMAKECreateNFTProgress","getPartList","ct","getNFTComponent","getUserNFTCount","getNFTBalance","getNftCount","limitCreateCount","restCount","getLastestCreateNFT","baseimgurl","basegiffile","NFTMAKECreateimg","getGasPrice","getUSTDBalance","getBalanceOf","getBNBBalance","getBalance","getAllowance","searchTotalSupply","substr","NFTMAKEDisconnect","login","nickname","amount","walletAddress","formData","imgurl","ParamCodec_1","Host","options","_loadingSetting","requestErrorHandler","interface_","registerErrorHandler","RequestErrorHandler","funcDict","register","func","getHandler","handle","errorData","NetworkManager","errorHandler","dataStr","makeQueryParam","isGet","xhr","loader","getXMLHttpRequest","setRequestHeader","GameManager_1","getRequestPromise","loadingSetting","onreadystatechange","decoded","response","responseText","ParamCodec","decode","errData","send","convertParam","lastIndexOf","encodeURIComponent","oriUC","NumberUtils","oriNumber_toString","radix","units","PVPBattlerState_1","PVPBattleDisplay","isSettled","battlerStates","selfBattler","opponentBattler","setupHeroes","judgeCopySettlement","PVPBattlerState","heroLevelLabel","heroAvatarSkeleton","heroQualitySprite","heroRestraintSprite","heroQualityPictures","heroRestraintPictures","heroHpProgressBar","heroHpLabel","updateHpBars","reverse","PVPRoomDisplay","levelFrame","levelValue","tips1","tips2","lock","iconPictures","framePictures","onIndexChange","setIndex","DefaultRoomPlayerCount","PVPRoom","levelRange","rankRange","playerCount","pvpRoomRepo","PVPRoomRepo","PlayerBattle_1","SkillItemContainer_1","PVPWindowController","roomsSelectNode","playersSelectNode","heroesSelectNode","rankNode","skillNode","battleChanceNode","battleChance","fighting","heroSelecting","pvpBtn","drawBattleChance","PlayerBattle","rankBtn","confirmRoomBtn","confirmBattleBtn","refreshBtn","encode","perms","arr","TextEncoder","seed","charset","ch","nextInt","hi","shuffleByte","lo","coded","fromCharCode","deshuffleByte","buf","TextDecoder","nextPermutation","bt","pm","bts","array2byte","un","nums","swap","Param","ParamRepo","getByAttr","PartsDisplay_1","PartsSelectionGroup_1","PartsSelection_1","PartManager_1","PartColorsContainer","partScaler","currentPartType","makeSelectionGroup","getElementAt","setHeroType","partMgr","onSelectCancel","reselect","last","PartConfig","slotOrders","slotNameMap","ptBptScale","ptBptOffset","ptBptHidden","clothes6Problem","weapon3Problem","PartInfo","stock","PartInfo_1","PartManager","findByPartTypeId","toPartInfo","isValid","pid","prices","PartColorsContainer_1","PartScaler","partTypeName","scaleBar","basePartType","findPart","getPartSetting","partSetting","drawScale","PartTypeDisplay_1","PartTypeSelectionGroup_1","PartTypeSelection_1","PartTypeContainer","includeBackground","relative","isBackground","curSel","relSelGroup","optional","PartTypeDisplay","bottomLine","PartTypeSelectionGroup","PartTypeSelection","PartType","baseTypeId","slotNames","Head","Clothes","Foot","Background","findByBaseTypeId","PartTypeRepo","getBySpecial","rootPartTypes","PartsContainer","currentTotalParts","calcScale","partsChanged","onPartsChanged","lastSelection","oriId","deselect","last_1","backgroundPart","switchColorSelector","removePart","PartsDisplay","padding","editor","ban","drawPicture","drawBan","drawEditorInfo","filterPicture","PartsSelectionGroup","PartsSelection","selectedIndex","toggleSelection","Part","isEmpty","containCts","_slotNames","_boneNames","_picture","loadPicture","allPictures","_allPicture","loadAllPictures","names","orders","Map","_skeleton","loadSkeleton","getSlotNames","pt","SpineUtils","getBoneNames","PartRepo","findByHeroTypeId","getByPartTypeId","findByTypes","getPlatformType","DESKTOP_BROWSER","MOBILE_BROWSER","ANDROID","PlatformManager","getPlatform","platformClasses","platforms","ctor","Player_1","RoomNFTInfo","PlayerBattleItem","battleData","refreshCount","getRoomData","battleBuyCosts","buyBattleChance","finishPVPBattle","oppos","o","refreshBuyCosts","buyRefreshCount","refreshPVP","bd","playerData","PlayerData","PlayerCardDisplay_1","ScrollView","PlayerCardContainer","currentDisplayRoomId","roomInfos","nfts","nft","scrollToLeft","PlayerCardDisplay","powerLabel","qualityIcon","drawHero","PlayerInterface","Login","Logout","GetInfo","EditInfo","PlayerCopyItem","PlayerCopySetting","force","copies","settings","playerInfoDisplay","playerName","stableCoin","heroInfoNode","money","PlayerJobItem","profitCount","unlockCosts","unlockGold","unlockReturnTime","isValidProfitTime","_icon","loadIcon","autoProfitTime","PlayerManager","registerPlayerData","playerDataClasses","needLogin","wallet","PlayerCommon_1","Player","setAllPlayerData","localStorage","getItem","getPlayerDataName","getPlayerDataClass","refreshPlayerData","setPlayerData","fragment","medal","gainGold","gainDiamond","gainFragment","gainMedal","PlayerRank","PlayerState","uuid","logout","NFTCreator_1","CreatedWindow_1","Camera","RenderTexture","GIFUtils_1","DefaultAttack","PreviewPictureDisplay","heroName","lastCount","createdWindow","heroBackground","_partsChanged","skeletonSize","camera","winSize","targetSize","recording","initScreenShot","parts_1","refreshHeroType","refreshAnimation","refreshHeroBackground","refreshPrice","setHeroTypeId","randomParts","roots","roots_1","root","subs","subPartTypes","subs_1","sub","shot","xRate","yRate","startRecording","recordingTime","findAnimation","nftPartIds","creator_1","initWithSize","DepthStencilFormat","RB_FMT_S8","targetTexture","render","readPixels","canvasTemp","ctxTemp","getContext","rowBytes","row","srow","imageData","createImageData","putImageData","ctx","drawImage","toDataURL","downloadScreenShot","maxTimes","mode","check_","success","fail","clearInterval","handle_1","setInterval","waitForResult","promise","maxWaitTime","useReject","catch","maxRetryTimes","retryTimes","retry","retryColdDownTime","funcWrapper","before","after","Quality","N","QualityRepo","R","sr","SR","ssr","SSR","ur","disallowMultiple","ENABLE_WEBGL_ANTIALIAS","RadiusMask","_radius","mask","updateMask","Mask","radius","onDraw","_updateGraphics","Type","RECT","graphics","_graphics","clear","anchorX","anchorY","roundRect","game","renderType","RENDER_TYPE_CANVAS","stroke","fill","tooltip","RandomAnimation","timeOffset","timeOffsetAdd","xOffset","yOffset","speedUp","resetPositionEveryLoop","centerX","centerY","resetPosition","sample","stop","RankInterface","GetPVPRank","RankCommon_1","RankItemContainer","rank","RankItemDisplay","rankLabel","rankSprite","rankPictures","fightBtn","RankTypes","RankItem","RankRecord","createdAt","ResultProcessor","doProcess","point","reward","CACHE_KEY","SceneManager","getOrCreateCache","targets","findSceneSingletonTarget","singletonComponent","oriStart","oriOnDestroy","scene","singletonTarget","spacing","minLength","step","scroll","content","scrollToTop","allowNoSelection","elements","removeElement","newIdx","selectSelf","deselectSelf","removeSelf","SelectedHeroDisplay","coinLabel","playerInfoNode","onHeroChanged","GlobalEditor_1","SingleEditor_1","SelectorScene","enterGame","loadScene","exportAllConfigs","importConfigs","exportConfigs","pushConfigs","pullConfigs","toggleGlobalEditor","BattleRewardContainer_1","SettlementWindowController","TransformUtils_1","SingleEditor","curPartDisplay","basePartDisplay","scaleNode","scaleValue","xNode","xBar","xValue","yNode","yBar","yValue","footXNode","footXBar","footXValue","footYNode","footYBar","footYValue","applyButton","clothes6Button","weapon3Button","keyTimes","footMode","addKeyListeners","systemEvent","SystemEvent","KEY_DOWN","onKeyDown","KEY_UP","onKeyUp","touchNode","onTouchStart","foot","bp","headPart","footPart","drawParts","drawScaleOffset","drawFootOffset","drawOthers","drawOffsetBar","isClothes","setOffset","setX","setY","setFootX","setFootY","toggleSlot","hidden","toggleClothes6","clothes6","toggleWeapon3","weapon3","processDir","dir","KEY","down","up","applySameHeroType","curBp","bhtId","curBp2_1","bhtId2","bptId2","curHp_1","hhtId","hptId","onScaleEdit","onXSlide","onXEdit","onYSlide","onYEdit","onFootXSlide","onFootXEdit","onFootYSlide","onFootYEdit","keyCode","convertKeyCode","skNode","skPos","getWorldPosition2","loc","currentTouch","getLocation","multiply","names_1","slotTouchTest","SingletonContext","SingletonUtils","context","oriOnLoad_1","oriOnDestroy_1","singletonValue","singletonGetter","SkeletonAnimationBridge","SkeletonAnimationBridge_1","createCallback","startCallback","SkeletonAnimationName","SkillItemContainer","updateSkills","SkillItemDisplay","boostCostLabel","boostTipsLabel","infoLabel","coldTimeLabel","boostButton","coldTimeBar","canBoost","Effect_1","NormalAttackId","Skill","mainParam","targetType","Enemies","targetCount","isPassive","mustHit","subjectMotion","targetMotion","Trait","SkillRepo","SpeedButtonController","speedUpProgress","tipsLabel","toTime","Slot","spine","SlotData","Bone","RegionAttachment","oriUpdateWorldTransformWith","updateWorldTransformWith","rotation","shearX","shearY","scaleX2","scaleY2","sk","tmpSk","_partSettings","drawing","_heroTypeId","removeExclusionParts","removeNotExistParts","adjustDrawOrder","sName","setAttachment","partTypeOrId","drawOrder","cht","calcOffset","bpt","calcHidden","calcClothes6","calcWeapon3","calcFootOffset","isFoot","rParts_1","rPart","sPart","boneOrName","findAllChildren","child","applyBone","tBoneOrAssign","tBone","sBone","assignBone","transformBone","slotOrName","applySlot","tSlot","assignSlot","slotName","lLoc","worldToLocal","attach","aLoc","dist","sqrt","newRad","atan","newLoc","cos","aw","ah","att","region","changeTexture2DToRegion","getTexture","adjustSkeleton","autoY","getAutoOffsetY","minY","wLoc","localToWorld","rad","newH","partOrEditorMode","rParts","rParts_2","drawPart","subs_2","visNames","boneNames","rScale","attachments","attachment","w1","w6","isW1","isW6","sw6Bone","sw1Bone","sw3Bone","sw6Slot","sw1Slot","sw3Slot","w6Bone","w1Bone","w3Bone","w6Slot","w1Slot","w3Slot","c6","c4","isC6","isC1","sc6Bone","sc1Bone","sc6Slot","sc1Slot","c6Bone","c1Bone","c6Slot","c1Slot","getSlotName","targetSlot","setToSetupPose","judgeDrawOrder","sOrder","sSlot","order","getSkeleton","downMax","upMin","tmpSlot","copySlotToSkeleton","createSlot","slots","copySlot","scaleAttachment","updateAttachmentOffset","regionScaleX","originalWidth","regionScaleY","originalHeight","localX","localY","localX2","localY2","radians","localXCos","localXSin","localYCos","localYSin","localX2Cos","localX2Sin","localY2Cos","localY2Sin","OX1","OY1","OX2","OY2","OX3","OY3","OX4","OY4","getBoneName","boneDataWorldPos","findBoneParent","sParent","targetBone","copyBoneToSkeleton","replaceBone","parentInfo","copyBone","cBone","bones","sortBone","tc","source","pHeroType","skeletonTexture","setRealTexture","TextureAtlasPage","uWrap","TextureWrap","ClampToEdge","vWrap","setWraps","TextureAtlasRegion","rotate","u","v","u2","StageProgressController","isCurrent","updateNode","updateEnemies","currentPosition","abs","StarUpWindowDisplay","currentStarSprites","nextStarSprites","tipsValue","skillPictureNodes","skillLevelNodes","starUpNode","starUpSprite","starUpButton","upgradePictures","pDiamond","starUpBtn","languageKey","SummonWindowDisplay","stablePrice","USTDValues","USTDBalance","HCTValues","HCTBalance","pricePercent","priceSlider","summonBtn","TestAutoProfit","addTime","TestGetHero","shouldUpdate","trySynchronize","testBattle","testCopy","testHit","hitNode","testRealBattle","testRefreshRank","TestHeroItem","scissorsType","TestHeroItem_1","getRealUpgrade","getRealAttack","getRealDefense","getRealHealth","BasePlatform_1","TestPlatform","TestSpine","pic1","pic2","out","doImport","getPosition","color1","CreateRegion","color2","prod","TransformUtil","convertToWorldSpaceAR","getWorldPosition3","getNodePosition2","worldPos","convertToNodeSpaceAR","_res","UpgradeWindowDisplay","contentSelectCards","selectCardsPictures","heroProperty","heroGrow","skillsNode","defenceLabel","atkSpeedLabel","criticalLabel","evasionLabel","skillNames","skillLevels","skillDescriptions","medalLabel","upgradeSprite","spd","cri","eva","showHeroProperty","showHeroGrow","ValueType","EPSILON","_x","mag","magSqr","lengthSqr","subSelf","subtract","mulSelf","multiplyScalar","divSelf","divide","scaleSelf","negSelf","negate","vector","mul","div","neg","scaleAndAdd","distance","squaredDistance","inverse","inverseSafe","normalize","dot","transformMat3","mat","transformMat4","strictEquals","equals","epsilon","toArray","ofs","fromArray","newValue","other","fuzzyEquals","variance","to","ratio","clampf","min_inclusive","max_inclusive","addSelf","cross","normalizeSelf","invsqrt","magSqr1","magSqr2","theta","acos","signAngle","rotateSelf","project","maxAxis","squaredMagnitude","ONE_R","ZERO_R","RIGHT_R","RIGHT","VideoPlayer","VideoAutoPlay","replay","WalletController","USTD","navigator","btoa","getUserMedia","utils","mozURL","msURL","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","requestTimeout","delay","noop","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","isObject","isEmptyObject","isArray","isFunction","isElement","elem","nodeType","isString","isSupported","el","webworkers","Worker","blob","Uint32Array","videoCodecs","testEl","supportObj","mp4","h264","ogv","ogg","webm","canPlayType","each","collection","hasOwnProperty","mergeOptions","defaultOptions","userOptions","newObj","currentUserOption","setCSSAttr","attr","parentNode","createWebWorker","objectUrl","worker","getExtension","getFontSize","resizeFont","fontSize","containerWidth","minFontSize","span","textIndent","visibility","offsetWidth","webWorkerError","utils$2","freeze","validate","skipObj","errorObj","validators","indece","currentValidator","errorCode","errorMsg","messages","error$2","numFrames","keepCameraOn","video","webcamVideoElement","cameraStream","fontWeight","fontFamily","fontColor","textAlign","textBaseline","textXCoordinate","textYCoordinate","progressCallback","completeCallback","saveRenderingContexts","savedRenderingContexts","showFrameText","crossOrigin","waterMark","waterMarkHeight","waterMarkWidth","waterMarkXCoordinate","waterMarkYCoordinate","defaultOptions$2","isWebCamGIFSupported","NeuQuant","alphadec","thepicture","lengthcount","samplefac","network","netsize","prime1","prime2","prime3","prime4","minpicturebytes","maxnetpos","netbiasshift","ncycles","intbiasshift","intbias","gammashift","betashift","beta","betagamma","radiusbiasshift","initradius","radiusdec","initalpha","radbias","alpharadbias","alphabiasshift","netindex","bias","freq","radpower","colorMap","inxbuild","smallpos","smallval","q","previouscol","startpos","learn","g","alpha","samplepixels","pix","lim","altersingle","contest","alterneigh","unbiasnet","alphaMult","biasdist","betafreq","bestpos","bestbiaspos","bestd","bestbiasd","thepic","best","workerCode","onmessage","ev","workerMethods","run","postMessage","dataToRGB","rgb","componentizedPaletteToArray","paletteRGB","paletteArray","processFrameWithQuantizer","rgbComponents","nq","numberPixels","indexedPixels","pixels","palette","_frame","gifWriter","gopts","loop_count","global_palette","check_palette_and_num_colors","num_colors","ended","GifWriterOutputLZWCodeStream","min_code_size","index_stream","cur_subblock","clear_code","code_mask","eoi_code","next_code","cur_code_size","cur_shift","cur","emit_bytes_to_buffer","bit_block_size","emit_code","ib_code","code_table","il","cur_key","cur_code","addFrame","indexed_pixels","opts","using_local_palette","disposal","use_transparency","transparent_index","transparent","noop$2","AnimatedGIF","frames","numRenderedFrames","onRenderCompleteCallback","onRenderProgressCallback","workers","availableWorkers","generatingGIF","initializeWebWorkers","getBase64GIF","animatedGifInstance","existingImages","imagesLength","window.URL","loadedImages","loadedImagesLength","tempImage","ag","addLoadedImagesToGif","loadedImage","currentImage","processFrameWorkerCode","webWorkerObj","webWorker","workerError","getWorker","freeWorker","byteMap","bufferToString","buffer","numberValues","onFrameFinished","hasExistingImages","allDone","beingProcessed","done","generateGIF","processNextFrame","processFrame","AnimatedGifContext","_options","startRendering","gifOptions","gifWriter$$1","iterator","framePalette","setRepeat","element","gifshotOptions","frameText","_gifshotOptions","textToUse","fillStyle","fillText","getImageData","addFrameImageData","imageDataArray","dithering","onRenderProgress","isRendering","destroyWorkers","workerObj","revokeObjectURL","noop$3","screenShot","getGIF","crop","videoElement","videoHeight","videoWidth","waitBetweenFrames","renderingContextsToSave","pendingFrames","sourceX","scaledWidth","sourceWidth","sourceY","scaledHeight","sourceHeight","captureFrames","captureSingleFrame","framesLeft","finishCapture","drawVideo","capture","currentTime","getCropDimensions","videoStream","loadedData","defaultVideoDimensions","findVideoSize","findVideoSizeMethod","attempts","completedCallback","removeEventListener","onStreamingTimeout","stream","existingVideo","streamedCallback","mozSrcObject","srcObject","checkLoadedData","startStreaming","errorCallback","streamed","completed","lastCameraStream","autoplay","muted","startVideoStreaming","timeoutLength","timeout","originalCallback","noGetUserMediaSupportTimeout","clearTimeout","stopVideoStreaming","_obj","cameraStreamTracks","getTracks","hasCameraStreamTracks","firstCameraStreamTrack","pause","createAndGetGIF","cropDimensions","videoType","videoSrc","existingWebcam","createGIF","API","takeSnapShot","mergedOptions","isExistingVideoGIFSupported","codecs","hasValidCodec","currentCodec","isExistingImagesGIFSupported","VERSION","define","amd","module"],"mappings":"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","sourcesContent":["import {BaseData, field, PK, pkType} from \"../../CoreModule/Data/BaseData\";\r\nimport {Result} from \"./Result\";\r\nimport {Battle} from \"./Battle\";\r\nimport {NormalAttackId, Skill, skillRepo} from \"../../HeroModule/Data/Skill\";\r\nimport {Battler, SkillInfo} from \"./Battler\";\r\nimport {BattleConfig} from \"../Configs/BattleConfig\";\r\nimport {configMgr} from \"../../CoreModule/Managers/ConfigManager\";\r\nimport {MathUtils} from \"../../../Utils/MathUtils\";\r\n\r\nexport interface IBattlerInfo {\r\n\tcamp: number; // 阵营\r\n\tpos: number; // 索引\r\n\tbattler: Battler;\r\n\topponents: Battler[];\r\n}\r\n\r\nexport class BattlerInfo extends BaseData implements IBattlerInfo {\r\n\t@field\r\n\tpublic camp: number = 0; // 阵营\r\n\t@field\r\n\tpublic pos: number = 0; // 索引\r\n\r\n\tpublic action?: Action;\r\n\r\n\tconstructor(index, parent) {\r\n\t\tsuper(index);\r\n\t\tthis.action = parent;\r\n\t}\r\n\r\n\tpublic get battle() { return this.action?.battle; }\r\n\tpublic get battler() { return this.battle?.getBattler(this); }\r\n\tpublic get opponents() { return this.battle?.getOpponents(this); }\r\n\r\n\t/**\r\n\t * 创建\r\n\t * @param action\r\n\t * @param battler\r\n\t */\r\n\tpublic static create(action: Action, battler: IBattlerInfo) {\r\n\t\tconst res = new BattlerInfo(null, action);\r\n\t\tres.camp = battler.camp;\r\n\t\tres.pos = battler.pos;\r\n\t\treturn res;\r\n\t}\r\n\r\n}\r\n\r\nexport class Action extends BaseData {\r\n\r\n\t@field\r\n\tpublic time: number = 0;\r\n\t@field(BattlerInfo)\r\n\tpublic subject: BattlerInfo; // 主体（发起方）\r\n\t@field(BattlerInfo)\r\n\tpublic target: BattlerInfo; // 目标\r\n\t@field(Number)\r\n\tpublic skillId: number; // 技能索引\r\n\t@field(Result)\r\n\tpublic result: Result; // 行动结果\r\n\r\n\tpublic battle: Battle = null;\r\n\r\n\t// region 初始化\r\n\r\n\tconstructor(index, parent) {\r\n\t\tsuper(index);\r\n\t\tthis.battle = parent;\r\n\t}\r\n\r\n\tpublic setSubject(battler: IBattlerInfo) {\r\n\t\tthis.subject = BattlerInfo.create(this, battler);\r\n\t}\r\n\tpublic setTarget(battler: IBattlerInfo) {\r\n\t\tthis.target = BattlerInfo.create(this, battler);\r\n\t}\r\n\tpublic setSkill(skillInfo: SkillInfo) {\r\n\t\tthis._skillInfo = skillInfo;\r\n\t\tthis.skillId = skillInfo.skillId;\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 属性\r\n\r\n\tpublic get subjectBattler() {\r\n\t\treturn this.battle.getBattler(this.subject);\r\n\t}\r\n\tpublic get targetBattler() {\r\n\t\treturn this.battle.getBattler(this.target);\r\n\t}\r\n\r\n\tpublic get skill() { return this.skillInfo.skill; }\r\n\r\n\tprivate _skillInfo: SkillInfo;\r\n\tpublic get skillInfo() {\r\n\t\treturn this._skillInfo ||= this.subjectBattler\r\n\t\t\t.skills.find(s => s.skillId == this.skillId);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 操作\r\n\r\n\t/**\r\n\t * 使用\r\n\t */\r\n\tpublic apply() {\r\n\t\tthis.skillInfo.use();\r\n\t}\r\n\r\n\t/**\r\n\t * TODO: 计算结果\r\n\t */\r\n\tpublic makeResult() {}\r\n\r\n\t// endregion\r\n\r\n}\r\n","import {BaseManager, getManager, manager} from \"./BaseManager\";\r\n\r\nexport function alertMgr(): AlertManager {\r\n\treturn getManager(AlertManager);\r\n}\r\n\r\nexport interface ErrorData {\r\n\tstatus?: number\r\n\tcode?: number\r\n\terrMsg?: string\r\n\tdetail?: string\r\n\tdata?: any\r\n\thandled?: boolean\r\n}\r\n\r\n/**\r\n * 将函数内捕捉到的异常都转化为throwFunc所抛出的异常类型（可配置detail）\r\n * 如果捕捉到的异常是自定义异常（GameError），不转化，直接抛出，否则拦截并转换\r\n * 如果捕捉到的异常是字符串，直接将其作为detail（不指定detail的情况下）\r\n * @param throwFunc\r\n * @param detail\r\n */\r\nexport function catchAsError(throwFunc: Function, detail?: string) {\r\n\treturn (obj, key, desc) => {\r\n\t\tconst oriFunc = desc.value;\r\n\t\tdesc.value = async function (...p) {\r\n\t\t\ttry {\r\n\t\t\t\treturn await oriFunc.apply(this, p);\r\n\t\t\t} catch (e) { // {detail: string, data: string}\r\n\t\t\t\tconsole.error(\"Catch\", {e});\r\n\r\n\t\t\t\tif (e instanceof Error && e[\"code\"]) throw e;\r\n\r\n\t\t\t\tdetail ||= typeof e == \"string\" ? e : e?.detail;\r\n\t\t\t\tconst data = e?.data || e;\r\n\r\n\t\t\t\tthrowFunc(detail, data);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * 处理异常注解（参数可选）\r\n * @param objOrUseThrow 处理后是否继续往外抛出异常，默认不抛出\r\n * @param key\r\n * @param desc\r\n */\r\nexport function handleError(\r\n\tobjOrUseThrow: any | boolean, key?: string, desc?: any): any {\r\n\r\n\tlet useThrow = false;\r\n\tconst process = (obj, key, desc) => {\r\n\t\tconst oriFunc = desc.value;\r\n\t\tdesc.value = async function(...p) {\r\n\t\t\ttry {\r\n\t\t\t\treturn await oriFunc.apply(this, p);\r\n\t\t\t} catch (e) {\r\n\t\t\t\talertMgr().handleError(e);\r\n\t\t\t\tif (useThrow) throw e;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (typeof objOrUseThrow == \"boolean\") {\r\n\t\tuseThrow = objOrUseThrow;\r\n\t\treturn process;\r\n\t}\r\n\tprocess(objOrUseThrow, key, desc);\r\n}\r\n\r\nexport class GameError extends Error implements ErrorData {\r\n\r\n\tpublic code: number;\r\n\tpublic errMsg: string;\r\n\tpublic detail: string;\r\n\tpublic data: any;\r\n\tpublic handled?: boolean;\r\n\r\n\tconstructor(code: number, errMsg: string,\r\n\t\t\t\t\t\t\tdetail?: string, data?: any) {\r\n\t\tsuper(code + \": \" + errMsg);\r\n\r\n\t\tthis.code = code;\r\n\t\tthis.errMsg = errMsg;\r\n\t\tthis.detail = detail;\r\n\t\tthis.data = data;\r\n\t}\r\n}\r\n\r\nexport enum AlertDialogType {\r\n\tPrompt,\r\n\tOK,\r\n\tOKCancel,\r\n}\r\n\r\nexport interface AlertOptions {\r\n\ttitle?: string;\r\n\tmessage?: string;\r\n\ttype?: AlertDialogType;\r\n}\r\n\r\n@manager\r\nclass AlertManager extends BaseManager {\r\n\r\n\talertQueue: AlertTask[] = [];\r\n\r\n\tpublic handleError(error: ErrorData) {\r\n\t\tif (error.handled) return;\r\n\t\terror.handled = true;\r\n\r\n\t\t// Title约定：默认使用翻译的文本，无翻译文本才用error.errMsg\r\n\t\tconst key = \"ERR\" + (error.status ?\r\n\t\t\terror.status + \"_\" : \"\") + error.code;\r\n\t\tconst title = i18nMgr().makeStr(key, error.errMsg);\r\n\r\n\t\t// const exist = !!i18nMgr().getKey(key);\r\n\t\t// const title = exist ? `\\\\L[${key}]` : error.errMsg;\r\n\r\n\t\t// Detail约定：优先使用setting的detail，再看是否有翻译文本，如果没有就用空值\r\n\t\tconst dKey = key + \"_DETAIL\";\r\n\t\tconst detail = error.detail || i18nMgr().makeStr(dKey);\r\n\r\n\t\t// const dExist = !!i18nMgr().getKey(dKey);\r\n\t\t// const detail = error.detail || (dExist ? `\\\\L[${dKey}]` : \"\");\r\n\r\n\t\tconsole.error(\"Handled error: \", {error, title, detail});\r\n\r\n\t\tthis.alert(title, detail, AlertDialogType.OK).then();\r\n\t}\r\n\r\n\t/**\r\n\t * 唤起AlertWindow\r\n\t */\r\n\tpublic alert(title: string | AlertOptions,\r\n\t\t\t\t\t\t\t message?: string, type?: AlertDialogType): Promise<AlertResult> {\r\n\t\tif (typeof title !== \"string\")\r\n\t\t\treturn this.alert(title.title, title.message, title.type);\r\n\r\n\t\treturn new Promise<AlertResult>((resolve) => {\r\n\t\t\tlet task = new AlertTask(title, message, type, resolve);\r\n\t\t\tthis.alertQueue.push(task);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * 不要调用\r\n\t */\r\n\tpublic hasAlert(): boolean {\r\n\t\treturn this.alertQueue.length > 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 不要调用\r\n\t */\r\n\tpublic popAlertTask(): AlertTask {\r\n\t\tif (this.alertQueue.length == 0) return null;\r\n\t\tlet task = this.alertQueue[0];\r\n\t\tthis.alertQueue.splice(0, 1);\r\n\t\treturn task;\r\n\t}\r\n}\r\n\r\nexport enum AlertResult {\r\n\tOK,\r\n\tCANCEL\r\n}\r\n\r\nexport class AlertTask implements AlertOptions {\r\n\r\n\ttitle: string;\r\n\tmessage: string;\r\n\ttype: AlertDialogType;\r\n\r\n\tprivate readonly promiseResolve: (value: AlertResult) => void;\r\n\r\n\tconstructor(title: string, message: string, type: AlertDialogType, resolve: (value: AlertResult) => void) {\r\n\t\tthis.title = title;\r\n\t\tthis.message = message;\r\n\t\tthis.type = type;\r\n\t\tthis.promiseResolve = resolve;\r\n\t}\r\n\r\n\tpublic feedback(result: AlertResult): void {\r\n\t\tthis.promiseResolve(result);\r\n\t}\r\n}\r\n\r\nimport {i18nMgr} from \"./I18nManager\";\r\nimport {InterfaceOptions} from \"./NetworkManager\";\r\n","import ccclass = cc._decorator.ccclass;\r\nimport Label = cc.Label;\r\nimport property = cc._decorator.property;\r\nimport Button = cc.Button;\r\nimport Node = cc.Node;\r\nimport {AlertDialogType, alertMgr, AlertResult, AlertTask} from \"../Managers/AlertManager\";\r\nimport Layout = cc.Layout;\r\n\r\n\r\n@ccclass\r\nexport default class AlertWindow extends cc.Component {\r\n\r\n    @property(Node)\r\n    window: Node;\r\n\r\n    @property(Label)\r\n    titleLabel: Label;\r\n\r\n    @property(Label)\r\n    messageLabel: Label;\r\n\r\n    @property(Node)\r\n    buttonGroup: Node;\r\n\r\n    @property(Button)\r\n    okButton: Button;\r\n\r\n    @property(Button)\r\n    cancelButton: Button;\r\n\r\n    currentTask: AlertTask;\r\n\r\n    update(dt: number) {\r\n        if (alertMgr().hasAlert() && !this.isShowing()) {\r\n            this.currentTask = alertMgr().popAlertTask();\r\n            this.show();\r\n            this.titleLabel.string = this.currentTask.title;\r\n            this.messageLabel.string = this.currentTask.message;\r\n            this.setupType(this.currentTask.type);\r\n        }\r\n    }\r\n\r\n    private show() {\r\n        this.window.active = true;\r\n    }\r\n\r\n    private dismiss() {\r\n        this.window.active = false;\r\n    }\r\n\r\n    private isShowing() {\r\n        return this.window.active;\r\n    }\r\n\r\n    private setupType(type: AlertDialogType) {\r\n        switch (type) {\r\n            case AlertDialogType.Prompt:\r\n                this.buttonGroup.active = false;\r\n                break;\r\n            case AlertDialogType.OK:\r\n                this.buttonGroup.active = true;\r\n                this.okButton.node.active = true;\r\n                this.cancelButton.node.active = false;\r\n                break;\r\n            case AlertDialogType.OKCancel:\r\n                this.buttonGroup.active = true;\r\n                this.okButton.node.active = true;\r\n                this.cancelButton.node.active = true;\r\n                break;\r\n        }\r\n\r\n        //即使这样更新还是会有布局延迟，考虑后续会加窗口动画，可以通过短暂透明掩盖闪烁\r\n        this.window.getComponentsInChildren(Layout).forEach(val => {\r\n            val.updateLayout();\r\n        });\r\n    }\r\n\r\n\r\n    //////////////////按钮回调开始///////////////////////\r\n    btnOKClicked() {\r\n        this.currentTask.feedback(AlertResult.OK);\r\n        this.dismiss();\r\n    }\r\n\r\n    btnCancelClicked() {\r\n        this.currentTask.feedback(AlertResult.CANCEL);\r\n        this.dismiss();\r\n    }\r\n\r\n    backgroundClicked() {\r\n        if (this.currentTask.type == AlertDialogType.Prompt) {\r\n            this.dismiss();\r\n            this.currentTask.feedback(AlertResult.OK);\r\n        }\r\n    }\r\n\r\n    ////////////////////按钮回调结束////////////////////////\r\n}\r\n","import requireComponent = cc._decorator.requireComponent;\r\nimport Animation = cc.Animation;\r\nimport menu = cc._decorator.menu;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\n@requireComponent(Animation)\r\n@menu(\"其他组件/原生动画封装\")\r\nexport default class AnimationBridge extends cc.Component {\r\n\r\n    animation: Animation = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n        this.animation = this.getComponent(Animation);\r\n    }\r\n\r\n    // update (dt) {}\r\n\r\n    play() {\r\n        this.animation.play();\r\n    }\r\n}\r\n","import {ItemDisplay} from \"../../../../Modules/CoreModule/Components/ItemDisplay\";\r\nimport Label = cc.Label;\r\nimport Node = cc.Node;\r\nimport {PartInfo} from \"../../../../Modules/HeroModule/Data/PartInfo\";\r\nimport {selectorScene} from \"../../SelectorScene\";\r\nimport PartsDisplay from \"../ItemPrefabs/PartsDisplay\";\r\nimport PreviewPictureDisplay, {DefaultStand} from \"../ItemPrefabs/PreviewPictureDisplay\";\r\nimport {configMgr} from \"../../../../Modules/CoreModule/Managers/ConfigManager\";\r\nimport PartConfig from \"../../../../Modules/HeroModule/Configs/PartConfig\";\r\nimport Slider = cc.Slider;\r\nimport PartsContainer from \"../ItemContainers/PartsContainer\";\r\nimport EditBox = cc.EditBox;\r\nimport Component = cc.Component;\r\nimport {DataLoader} from \"../../../../Modules/CoreModule/Utils/DataLoader\";\r\nimport {AlertDialogType, alertMgr} from \"../../../../Modules/CoreModule/Managers/AlertManager\";\r\nimport Skeleton = sp.Skeleton;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class AnimationPlayer extends Component {\r\n\r\n\t@property(Skeleton)\r\n\tskeleton: Skeleton = null;\r\n\t@property\r\n\taniName: string = \"\";\r\n\r\n\t// region 操作\r\n\r\n\tpublic play() {\r\n\t\tthis.skeleton.clearTrack(0)\r\n\t\tthis.skeleton.setAnimation(0, this.aniName, false);\r\n\t\tthis.skeleton.addAnimation(0, DefaultStand, true);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n}\r\n","\r\nimport {BaseManager, getManager, manager} from \"./BaseManager\";\r\nimport {CoreLoading} from \"../Common/CoreCommon\";\r\nimport {showLoading} from \"./LoadingManager\";\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\n\r\n// export type AssetType<T extends cc.Asset> = typeof cc.Asset; // __private.cocos_core_asset_manager_shared_AssetType<T>;\r\n\r\nexport const BundleName = {\r\n\tData: \"data\",\r\n\t// Prefabs: \"prefabs\",\r\n\tSprites: \"sprites\"\r\n}\r\n\r\nexport function assetMgr() : AssetBundleManager {\r\n\treturn getManager(AssetBundleManager);\r\n}\r\n\r\n@manager\r\nclass AssetBundleManager extends BaseManager {\r\n\r\n\tprivate bundlePool = {};\r\n\tprivate assetPool = {};\r\n\r\n\t/**\r\n\t * 初始化\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.initializeBundles();\r\n\t}\r\n\tprivate initializeBundles() {\r\n\t\tfor (const key in BundleName) {\r\n\t\t\tconst name = BundleName[key];\r\n\r\n\t\t\tconsole.log(\"Loading Bundle: \", key, \" -> \", name);\r\n\t\t\tthis._loadBundle(name).then();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取Bundle实例\r\n\t */\r\n\t@showLoading(CoreLoading.GetAsset)\r\n\tpublic async loadBundle(name: string) :\r\n\t\tPromise<cc.AssetManager.Bundle> {\r\n\t\treturn this.bundlePool[name] || await this._loadBundle(name);\r\n\t}\r\n\tprivate async _loadBundle(name: string) {\r\n\t\treturn await this._loadBundlePromise(name);\r\n\t}\r\n\tprivate _loadBundlePromise(name: string) {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\r\n\t\t\tcc.assetManager.loadBundle(name, (err, bundle) => {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tconsole.error(\"Load Bundle: \", name, \" ERROR! \", err);\r\n\t\t\t\t\t// reject(err);\r\n\t\t\t\t\tresolve(null);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log(\"Load Bundle: \", name, \" FINISHED! \", bundle);\r\n\t\t\t\t\tresolve(this.bundlePool[name] = bundle);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * 获取资源实例\r\n\t */\r\n\t@showLoading(CoreLoading.GetAsset)\r\n\tpublic async loadAsset<T extends cc.Asset>(\r\n\t\ttype: Constructor<T>, bundleName: string, assetPath: string) : Promise<T> {\r\n\r\n\t\tconst bundle = await this.loadBundle(bundleName);\r\n\t\tif (!bundle) return null;\r\n\r\n\t\tconst key = this._getAssetKey(bundle, assetPath);\r\n\t\treturn this.assetPool[key] ||\r\n\t\t\tawait this._loadAsset(type, bundle, assetPath);\r\n\t}\r\n\tprivate _getAssetKey(bundle: cc.AssetManager.Bundle, path: string) {\r\n\t\treturn bundle.name + \".\" + path;\r\n\t}\r\n\tprivate async _loadAsset<T extends cc.Asset>(\r\n\t\ttype: Constructor<T>, bundle: cc.AssetManager.Bundle, path: string) : Promise<T> {\r\n\t\treturn await this._loadAssetPromise(type, bundle, path);\r\n\t}\r\n\tprivate _loadAssetPromise<T extends cc.Asset>(\r\n\t\ttype: Constructor<T>, bundle: cc.AssetManager.Bundle, path: string) : Promise<T> {\r\n\r\n\t\treturn new Promise<T>((resolve, reject) => {\r\n\t\t\t// @ts-ignore\r\n\t\t\tbundle.load<T>(path, type, (err, res) => {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tconsole.warn(\"Load Asset: \", bundle, \" -> \", path, \" ERROR! \", err);\r\n\t\t\t\t\t// reject(err);\r\n\t\t\t\t\tresolve(null);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log(\"Load Asset: \", bundle, \" -> \", path, \" FINISHED! \", res);\r\n\t\t\t\t\tlet key = this._getAssetKey(bundle, path);\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\tresolve(this.assetPool[key] = res);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n}\r\n","import {BaseData} from \"./BaseData\";\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\nimport {configMgr} from \"../Managers/ConfigManager\";\r\n\r\nexport function config<T extends BaseConfig>(name: string) {\r\n\treturn (clazz: Constructor<T>) => {\r\n\t\tconfigMgr().registerConfig(clazz, name);\r\n\t}\r\n}\r\n\r\n/**\r\n * 基础配置数据\r\n */\r\nexport abstract class BaseConfig extends BaseData {}\r\n","\r\nexport type Constructor<T = {}> = new (...args: any[]) => T;\r\n\r\nexport abstract class BaseContext<T = any> {\r\n\r\n\tpublic contents = [];\r\n\r\n\tpublic abstract get contentName() : string;\r\n\r\n\tpublic create<T2 extends T>(clazz: Constructor<T2>, value: T2) {\r\n\t\tconst ori = this.find(clazz);\r\n\t\tif (!ori) this.contents.push({clazz, value});\r\n\t\telse ori.value = value;\r\n\r\n\t\tconsole.log(`[${this.contentName} ADD]`, {clazz, value});\r\n\t}\r\n\tpublic remove<T2 extends T>(clazz: Constructor<T2>) {\r\n\t\tconst ori = this.find(clazz);\r\n\t\tif (ori) ori.value = null;\r\n\r\n\t\tconsole.log(`[${this.contentName} REMOVE]`, {clazz});\r\n\t}\r\n\tpublic instance<T2 extends T>(clazz: Constructor<T2>) : T2 {\r\n\t\tif (!clazz) return null;\r\n\r\n\t\tconst res = this.find(clazz)?.value;\r\n\t\tif (!res) console.warn(`[${this.contentName} GET MISS]`, {clazz, res});\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\tprivate find<T2 extends T>(clazz: Constructor<T2>):\r\n\t\t{clazz: Constructor<T2>, value: T2} {\r\n\t\treturn this.contents.find(s => s.clazz == clazz);\r\n\t}\r\n\r\n\t// public create<T2 extends T>(\r\n\t// \tclazz: Constructor<T2>){\r\n\t// \tif (clazz) this.contents[clazz.name] = new clazz();\r\n\t//\r\n\t// \tconsole.error(\"[\" + this.contentName() + \" CREATE] \", {clazz, this: this});\r\n\t// }\r\n\t//\r\n\t// public instance<T2 extends T>(\r\n\t// \tclazz: Constructor<T2> | string) : T2 {\r\n\t// \tif (!clazz) return null;\r\n\t//\r\n\t// \tconst res = typeof clazz == 'string' ?\r\n\t// \t\tthis.contents[clazz] : this.instance(clazz.name);\r\n\t//\r\n\t// \tif (!res)\r\n\t// \t\tconsole.error(\"[\" + this.contentName() + \" GET] \",\r\n\t// \t\t\t{clazz, res, this: this});\r\n\t//\r\n\t// \treturn res;\r\n\t// }\r\n}\r\n\r\n","import Asset = cc.Asset;\r\n\r\nimport {assetMgr} from \"../Managers/AssetBundleManager\";\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\nimport {DataLoader} from \"../Utils/DataLoader\";\r\n\r\nexport function pkType() {\r\n\treturn String;\r\n}\r\nexport type PK = string;\r\n\r\n/**\r\n * 需要序列化的字段\r\n */\r\nexport function field<T>(\r\n\ttypeOrObj?: Constructor<T> | Constructor<T>[] | Object, key?: string): any {\r\n\r\n\t// 根据参数判断是否本身就是一个修饰器\r\n\tconst isDesc = key && (typeof typeOrObj !== 'function');\r\n\t// 获取真实的type\r\n\tlet type = isDesc ? typeOrObj[key]?.constructor : typeOrObj;\r\n\r\n\tconst process = (obj: any, key: string) => {\r\n\t\tconst oType = obj.constructor;\r\n\t\tconst setting = DataLoader.getSetting(oType);\r\n\t\tsetting.default = new oType();\r\n\t\tsetting.properties[key] = {\r\n\t\t\ttype, default: setting.default[key]\r\n\t\t}\r\n\t}\r\n\r\n\tif (isDesc) process(typeOrObj, key);\r\n\telse return process;\r\n\r\n\t// const process = (obj: Object, key: string) => {\r\n\t// \tconst cache = DataLoader.getOrCreateCache(obj);\r\n\t//\r\n\t// \tcache.proto.properties[key] = {\r\n\t// \t\ttype, default: DataLoader.getDefaultValue(obj, key)\r\n\t// \t}\r\n\t// }\r\n\t//\r\n\t// if (key && typeof type !== 'function') {\r\n\t// \tconst obj = type;\r\n\t// \ttype = obj[key]?.constructor;\r\n\t// \tprocess(obj, key);\r\n\t// } else return process;\r\n}\r\n\r\n/**\r\n * 需要序列化的资源字段\r\n */\r\nexport function assetField<T extends Asset>(\r\n\ttype: Constructor<T>, bundleName: string, assetPath: string) {\r\n\r\n\treturn (obj, key) => {\r\n\t\tconst setting = DataLoader.getSetting(obj.constructor)\r\n\t\tsetting.assetFields[key] = {\r\n\t\t\ttype, bundleName, assetPath\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * 业务主键\r\n */\r\nexport function dataPK(obj: any, key: string) {\r\n\tconst clazz = obj.constructor;\r\n\tconst setting = DataLoader.getSetting(clazz);\r\n\tif (setting.dataPK)\r\n\t\tthrow `${clazz.name}重复定义主键！！已有主键：${setting.dataPK}，第二次注明的主键：${key}`;\r\n\tsetting.dataPK = key;\r\n}\r\n\r\nexport class BaseData {\r\n\r\n\tpublic index: number = -1; // 下标（非必要）\r\n\tpublic isLoaded: boolean = false; // 是否加载完毕\r\n\r\n\tprivate _loadTasks: Promise<Asset>[] = [];\r\n\r\n\tconstructor(index = null) {\r\n\t\tthis.index = index;\r\n\t}\r\n\r\n\tpublic onCreated() {}\r\n\r\n\tpublic loadTasks(): Promise<Asset>[] { return this._loadTasks; }\r\n\r\n\tpublic toJSON() { return DataLoader.convert(this); }\r\n\r\n\t/**\r\n\t * 克隆\r\n\t */\r\n\tpublic clone(deep = false): this {\r\n\t\t// @ts-ignore\r\n\t\tconst type: Constructor<any> = this.constructor;\r\n\t\treturn deep ? DataLoader.load(type, DataLoader.convert(this)) :\r\n\t\t\tObject.assign(new type(), this);\r\n\t}\r\n\r\n\t/**\r\n\t * 添加读取任务\r\n\t */\r\n\tpublic addLoadTask<T extends Asset>(type: Constructor<T>,\r\n\t\tkey: string, bundleName: string, assetPath: string) {\r\n\t\tthis._loadTasks.push(this.loadAssetToField(\r\n\t\t\ttype, key, bundleName, assetPath))\r\n\t}\r\n\r\n\tprivate async loadAssetToField<T extends Asset>(type: Constructor<T>,\r\n\t\tkey: string, bundleName: string, assetPath: string) {\r\n\t\tconst reg = /\\${(.+?)}/g;\r\n\t\tconst regRes = reg.exec(assetPath)\r\n\t\t// const replaceReg = new RegExp(regRes[0], 'g');\r\n\t\tconst name = this[regRes[1]];\r\n\r\n\t\tif (name) assetPath = assetPath.replace(reg, name);\r\n\r\n\t\treturn this[key] = await assetMgr().loadAsset<T>(type, bundleName, assetPath);\r\n\t}\r\n}\r\n\r\nexport class GameData extends BaseData {\r\n\r\n\t@field(pkType())\r\n\tpublic _id: PK = null;\r\n\t// @field(Number)\r\n\t// public id?: number\r\n\r\n\t/**\r\n\t * 业务主键\r\n\t */\r\n\tpublic get dataId(): string | number {\r\n\t\treturn this._id.toString();\r\n\t}\r\n}\r\n","\r\nimport {getSingleton, singleton} from \"../Utils/SingletonUtils\";\r\nimport {BaseContext, Constructor} from \"../../../Utils/BaseContext\";\r\n\r\n@singleton\r\nexport class ManagerContext extends BaseContext {\r\n\r\n\tget contentName(): string { return \"Manager\"; }\r\n\r\n\tpublic update(dt: number) {\r\n\t\tthis.contents.forEach(c => c.value?.update(dt));\r\n\t}\r\n\r\n}\r\n\r\nexport function manager<T extends BaseManager>(\r\n\tclazz: Constructor<T>) {\r\n\tmanagerContext().create(clazz, new clazz());\r\n\treturn clazz;\r\n}\r\n\r\nexport function managerValue<T extends BaseManager>(\r\n\tclazz: Constructor<T>) {\r\n\treturn (target, key) => {\r\n\t\tconsole.log(\"[USE] \", {clazz, target, key});\r\n\t\ttarget[key] = getManager(clazz);\r\n\t};\r\n}\r\nexport function managerGetter<T extends BaseManager>(\r\n\tclazz: Constructor<T>) {\r\n\treturn (target, key, desc) => {\r\n\t\tdesc.value = () : T =>\r\n\t\t\ttarget[key+'_CACHE'] ||= getManager(clazz)\r\n\t};\r\n}\r\n\r\nfunction managerContext() {\r\n\treturn getSingleton(ManagerContext);\r\n}\r\n\r\nexport function getManager<T extends BaseManager>(\r\n\tclazz: Constructor<T>) {\r\n\treturn managerContext().instance(clazz);\r\n}\r\n\r\nexport function updateContext(dt: number) {\r\n\tmanagerContext().update(dt);\r\n}\r\n\r\nexport abstract class BaseManager {\r\n\r\n\tprotected deltaTime = -1;\r\n\r\n\tpublic update(dt: number) {\r\n\t\tthis.deltaTime = dt;\r\n\t}\r\n\r\n}\r\n","import {Platform, platformMgr} from \"../Modules/CoreModule/Managers/PlatformManager\";\r\nimport {Constructor} from \"../Utils/BaseContext\";\r\n\r\n// 个人信息用途\r\nexport const UserInfoDesc = \"个人信息仅用于排行榜展示\";\r\n// 广告每日次数\r\nexport const MaxAdsDayCount = 15;\r\n// 广告UnitID\r\nexport const AdsUnitId = 'fruit';\r\n\r\nexport abstract class BasePlatform {\r\n\r\n\tpublic type: Platform;\r\n\r\n\tprotected constructor(type: Platform) {\r\n\t\tthis.type = type;\r\n\t\tthis.initAds();\r\n\t}\r\n\r\n\t// region 用户信息\r\n\r\n\t/**\r\n\t * 获取用户数据\r\n\t */\r\n\tpublic async getUserData() {\r\n\t\treturn {\r\n\t\t\ttype: this.type,\r\n\t\t\topenid: await this.getOpenid(),\r\n\t\t\tuserInfo: await this.getUserInfo()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取Openid\r\n\t */\r\n\tpublic abstract getOpenid() : Promise<string>;\r\n\r\n\t/**\r\n\t * 获取用户信息\r\n\t */\r\n\tpublic abstract getUserInfo() : Promise<any>;\r\n\r\n\t// endregion\r\n\r\n\t// region 好友系统\r\n\r\n\t// endregion\r\n\r\n\t// region 广告系统\r\n\r\n\t// TODO: 封装后的代码还需要再次测试\r\n\r\n\t// protected tryCount: number = 0; // 重试次数\r\n\tprotected adsEnable: boolean = false; // 广告是否可用\r\n\r\n\tprotected adsData; // 广告数据\r\n\tprotected adsObject; // 广告对象\r\n\r\n\tpublic adsCheckCount = 5; // 最大尝试次数\r\n\r\n\t// public adsCheckInterval = 500; // 广告检测间隔\r\n\t// public adsMaxCheckTime = 5000; // 广告检测最大时间\r\n\r\n\t/**\r\n\t * 初始化广告\r\n\t */\r\n\tprotected initAds() {\r\n\t\tthis.loadAds().then();\r\n\t}\r\n\r\n\t/**\r\n\t * 拉取一次广告\r\n\t */\r\n\tprotected async loadAds() {\r\n\t\t// 只读取一次\r\n\t\ttry {\r\n\t\t\tthis.adsData = await this.doLoadAds();\r\n\t\t\tconsole.log(\"loadAds: Success: \", this.adsData);\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(\"loadAds: Error: \", e);\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\ttry {\r\n\t\t\t// 调用doLoadAds函数，如果报错会进入catch\r\n\t\t\tthis.adsData = await this.doLoadAds();\r\n\t\t} catch (e) { // 使用同步写法，不用.catch()\r\n\t\t\tconsole.error(\"loadAds: Error: \", e);\r\n\t\t\tif (this.tryCount++ < MaxAdsRetryCount)\r\n\t\t\t\tawait this.loadAds();\r\n\t\t\telse this.tryCount = 0;\r\n\t\t}\r\n\t\t*/\r\n\t}\r\n\r\n\tprotected async doLoadAds(): Promise<any> {\r\n\t\tthis.onLoad();\r\n\t\treturn {};\r\n\t}\r\n\r\n\tprotected onLoad() {\r\n\t\tthis.adsEnable = true;\r\n\t}\r\n\r\n\t/**\r\n\t * 显示广告\r\n\t * 如果暂时无法显示，将会自动手动获取，直到可以显示为止\r\n\t * 如果失败次数超过限制，抛出异常\r\n\t */\r\n\tpublic async showAds() : Promise<boolean> {\r\n\t\tconst res = await this.pendingAds();\r\n\t\tif (!res) throw new Error(\"暂无广告可用\");\r\n\t\treturn await this.doShowAds();\r\n\t}\r\n\r\n\tprivate pendingAds() : Promise<boolean> {\r\n\t\treturn new Promise<boolean>((resolve => {\r\n\t\t\tlet adsCheckTime = 0;\r\n\t\t\tconst check = async () => {\r\n\t\t\t\t// 先尝试读取广告\r\n\t\t\t\tawait this.loadAds();\r\n\r\n\t\t\t\t// 如果广告已经可以用了 或者 广告检查次数超过了\r\n\t\t\t\tif (this.adsEnable ||\r\n\t\t\t\t\t++adsCheckTime >= this.adsCheckCount)\r\n\t\t\t\t\tresolve(this.adsEnable); // 返回当前可用结果\r\n\r\n\t\t\t\t// 否则，再次尝试获取并检查\r\n\t\t\t\telse check().then();\r\n\t\t\t}\r\n\t\t\tcheck().then();\r\n\t\t}));\r\n\t}\r\n\r\n\tprotected async doShowAds() : Promise<boolean> {\r\n\t\tthis.adsEnable = false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// endregion\r\n\r\n}\r\n\r\nexport abstract class MiniGamePlatform extends BasePlatform {\r\n\r\n\t// region 广告\r\n\r\n\tprotected abstract createAdsObject(adUnitId);\r\n\r\n\tprotected initAds() {\r\n\t\tthis.adsObject = this.createAdsObject(AdsUnitId);\r\n\t\tthis.adsObject.onLoad(this.onLoad.bind(this));\r\n\t\t// this.adsObject.onError(() => this.tryCount++);\r\n\t\tthis.loadAds().then();\r\n\r\n\t}\r\n\r\n\t/*\r\n\t// 手动拉取广告\r\n\tprivate async loadAds() {\r\n\t\tthis.adsEnable = false;\r\n\t\ttry {\r\n\t\t\tthis.adsData = await this.adsObject.load();\r\n\t\t\tconsole.log(\"loadAds: Success: \", this.adsData);\r\n\t\t} catch (e) { // 使用同步写法，不用.catch()\r\n\t\t\tconsole.error(\"loadAds: Error: \", e);\r\n\t\t\tthis.tryCount < MaxAdsRetryCount ?\r\n\t\t\t\tthis.loadAds() : this.tryCount = 0;\r\n\t\t}\r\n\t}\r\n\t*/\r\n\r\n\tprotected async doLoadAds(): Promise<any> {\r\n\t\tthis.adsEnable = false;\r\n\t\treturn await this.adsObject.load();\r\n\t}\r\n\r\n\tprotected async doShowAds(): Promise<boolean> {\r\n\t\tif (!await super.doShowAds()) return false;\r\n\r\n\t\tawait this.adsObject.show();\r\n\r\n\t\treturn await new Promise<boolean>(((resolve, reject) => {\r\n\t\t\tthis.adsObject.onClose(res => {\r\n\t\t\t\tthis.adsObject.offClose();\r\n\t\t\t\tresolve(res && res.isEnded || !res);\r\n\t\t\t});\r\n\t\t}))\r\n\t}\r\n\r\n\t// endregion\r\n\r\n}\r\n\r\nexport function platform(type: Platform) {\r\n\treturn <T extends BasePlatform>(clazz: Constructor<T>) => {\r\n\t\tplatformMgr().registerPlatform(type, clazz);\r\n\t\treturn clazz;\r\n\t}\r\n}\r\n","import {BaseContext, Constructor} from \"../../../Utils/BaseContext\";\r\nimport {getSingleton, singleton} from \"../Utils/SingletonUtils\";\r\nimport {GameData, PK} from \"./BaseData\";\r\nimport {dataMgr} from \"../Managers/DataManager\";\r\nimport {StaticData} from \"./StaticData\";\r\n\r\n@singleton\r\nexport class RepositoryContext extends BaseContext<BaseRepository<any>> {\r\n\r\n\tget contentName(): string { return \"Repository\"; }\r\n\r\n}\r\n\r\nfunction repositoryContext() {\r\n\treturn getSingleton(RepositoryContext);\r\n}\r\n\r\nexport function repository<T extends BaseRepository<any>>(\r\n\tclazz: Constructor<T>) {\r\n\trepositoryContext().create(clazz, new clazz());\r\n\treturn clazz;\r\n}\r\n\r\nexport function getRepository<T extends BaseRepository<any>>(\r\n\tclazz: Constructor<T>) {\r\n\treturn repositoryContext().instance(clazz);\r\n}\r\n\r\nexport function filterKeys<T = any>(...keys: (keyof T)[]) {\r\n\treturn (obj, key, desc) => {\r\n\t\tconst clazz = obj.constructor;\r\n\t\tclazz[\"defaultKeys\"] ||= {};\r\n\r\n\t\tclazz[\"defaultKeys\"][key] = keys;\r\n\t}\r\n}\r\n\r\nexport function throwMessage(\r\n\tthrowFuncOrErrMsg: Function | string, detail?: string) {\r\n\treturn (obj, key, desc) => {\r\n\t\tconst clazz = obj.constructor;\r\n\t\tclazz[\"throwFuncs\"] ||= {};\r\n\r\n\t\tclazz[\"throwFuncs\"][key] = () => {\r\n\t\t\tif (typeof throwFuncOrErrMsg == \"string\")\r\n\t\t\t\tthrow throwFuncOrErrMsg;\r\n\t\t\telse\r\n\t\t\t\tthrowFuncOrErrMsg(detail);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport type AutoMatchType = \"find\" | \"findOne\" |\r\n\t\"get\" | \"getOne\" | \"exist\" | \"count\" | \"ensure\" | \"ensureNot\";\r\n\r\nexport const DefaultThrowFunc = (data) => {\r\n\tconsole.error(data);\r\n\tthrow \"Ensure/Get Error!\"\r\n};\r\n\r\nexport type F<T extends GameData> = Partial<T>;\r\n\r\nexport abstract class BaseRepository<T extends StaticData> {\r\n\r\n\tpublic abstract get clazz(): Constructor<T>;\r\n\r\n\tprivate idMap: {[T: number]: string} = {};\r\n\r\n\t// TODO: 做一个getById的缓存功能\r\n\r\n\tconstructor() {\r\n\t\tthis.processFuncs();\r\n\t}\r\n\r\n\t// region 预设函数\r\n\r\n\tpublic get list() {\r\n\t\treturn dataMgr().getDataList(this.clazz);\r\n\t}\r\n\r\n\tpublic doc(id: PK) {\r\n\t\treturn dataMgr().getDataById(this.clazz, id);\r\n\t}\r\n\r\n\tpublic find(filter: F<T> = {}) {\r\n\t\tconst keys = Object.keys(filter);\r\n\t\tif (keys.length <= 0) return this.list;\r\n\t\treturn this.list.filter(item =>\r\n\t\t\tkeys.every(key => item[key] == filter[key])\r\n\t\t);\r\n\t}\r\n\tpublic findOne(filter: F<T> = {}) {\r\n\t\tconst keys = Object.keys(filter);\r\n\t\tif (keys.length <= 0) return this.list[0];\r\n\t\tif (\"id\" in filter) { // 如果存在业务主键\r\n\t\t\tconst id = filter.id;\r\n\t\t\tconst _id = this.idMap[id] ||=\r\n\t\t\t\tthis.list.find(item => item.id == id)._id;\r\n\t\t\tconst res = this.doc(_id);\r\n\t\t\treturn keys.every(key => res[key] == filter[key]) ? res : null;\r\n\t\t}\r\n\t\treturn this.list.find(item =>\r\n\t\t\tkeys.every(key => item[key] == filter[key])\r\n\t\t);\r\n\t}\r\n\r\n\tpublic getOne(filter: F<T> = {},\r\n\t\t\t\t\t\t\t\t\t\t\tthrowFunc: Function = DefaultThrowFunc) {\r\n\t\tconst res = this.findOne(filter);\r\n\t\t// 找不到，抛出异常。如果没有用throwMessage修饰，需要在外部通过catchAsError接收\r\n\t\tif (res == null) throwFunc({repo: this, filter});\r\n\t\treturn res;\r\n\t}\r\n\t@throwMessage(\"找不到指定ID的数据\")\r\n\tpublic getById(id: number) {\r\n\t\treturn this.getOne({id} as any);\r\n\t}\r\n\r\n\tpublic count(filter: F<T> = {}) {\r\n\t\treturn this.find(filter).length;\r\n\t}\r\n\tpublic exist(filter: F<T> = {}) {\r\n\t\treturn this.count(filter) > 0;\r\n\t}\r\n\r\n\tpublic ensure(filter: F<T> = {},\r\n\t\t\t\t\t\t\t\tthrowFunc: Function = DefaultThrowFunc) {\r\n\t\tif (!this.findOne(filter)) throwFunc({repo: this, filter});\r\n\t}\r\n\tpublic ensureNot(filter: F<T> = {},\r\n\t\t\t\t\t\t\t\t\t throwFunc: Function = DefaultThrowFunc) {\r\n\t\tif (this.findOne(filter)) throwFunc({repo: this, filter});\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\tprivate processFuncs() {\r\n\t\tconst proto = this.constructor.prototype;\r\n\t\tconst fNames = Object.getOwnPropertyNames(proto);\r\n\r\n\t\tfNames.forEach(fName => this.processFunc(fName));\r\n\t}\r\n\r\n\t/**\r\n\t * 处理函数\r\n\t */\r\n\tprivate processFunc(name: string) {\r\n\t\tconst newFunc = this.getNewFunc(name);\r\n\t\tnewFunc && (this[name] = newFunc);\r\n\t}\r\n\r\n\tprivate getNewFunc(name: string) {\r\n\t\t// 获取需要查询的键\r\n\t\tconst keys = this.getKeysFromName(name);\r\n\r\n\t\t// 根据指定条件查询\r\n\t\tif (name.startsWith(\"findOne\")) // 查找一个\r\n\t\t\treturn this.getFindOneFunc(name, keys);\r\n\t\tif (name.startsWith(\"find\")) // 查找多个\r\n\t\t\treturn this.getFindFunc(name, keys);\r\n\t\tif (name.startsWith(\"get\")) // 查找一个，查不到会报错\r\n\t\t\treturn this.getGetOneFunc(name, keys);\r\n\r\n\t\tif (name.startsWith(\"count\")) // 计数\r\n\t\t\treturn this.getCountFunc(name, keys);\r\n\t\tif (name.startsWith(\"exist\")) // 是否存在\r\n\t\t\treturn this.getExistFunc(name, keys);\r\n\r\n\t\tif (name.startsWith(\"ensure\")) // 确保存在，不存在会报错\r\n\t\t\treturn this.getEnsureFunc(name, keys);\r\n\t\tif (name.startsWith(\"ensureNot\")) // 确保不存在，不存在会报错\r\n\t\t\treturn this.getEnsureNotFunc(name, keys);\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate getKeysFromName(name) {\r\n\t\tconst keys = this.constructor[\"defaultKeys\"];\r\n\t\tconst res = keys ? keys[name] : null;\r\n\t\treturn res || this.analyseByClause(name);\r\n\t}\r\n\tprivate analyseByClause(name: string) {\r\n\t\tconst strs = name.split(\"By\");\r\n\t\treturn strs[1]?.split(\"And\") || [];\r\n\t}\r\n\tprivate makeFilter(keys: string[], ...p) {\r\n\t\tconst res = {};\r\n\t\tkeys.forEach((key, i) =>\r\n\t\t\tres[this.convertKey(key)] = p[i]);\r\n\t\treturn res as F<T>;\r\n\t}\r\n\tprivate convertKey(key) {\r\n\t\treturn key.charAt(0).toLowerCase() + key.slice(1);\r\n\t}\r\n\r\n\tprivate getFindFunc(name, keys) {\r\n\t\treturn (...p) => this.find(this.makeFilter(keys, ...p));\r\n\t}\r\n\tprivate getFindOneFunc(name, keys) {\r\n\t\treturn (...p) => this.findOne(this.makeFilter(keys, ...p));\r\n\t}\r\n\tprivate getGetOneFunc(name, keys) {\r\n\t\tconst throwFunc = this.getThrowFunc(name);\r\n\t\treturn (...p) => this.getOne(\r\n\t\t\tthis.makeFilter(keys, ...p), throwFunc);\r\n\t}\r\n\r\n\tprivate getCountFunc(name, keys) {\r\n\t\treturn (...p) => this.count(this.makeFilter(keys, ...p));\r\n\t}\r\n\tprivate getExistFunc(name, keys) {\r\n\t\treturn (...p) => this.exist(this.makeFilter(keys, ...p));\r\n\t}\r\n\r\n\tprivate getEnsureFunc(name, keys) {\r\n\t\tconst throwFunc = this.getThrowFunc(name);\r\n\t\treturn (...p) => this.ensure(\r\n\t\t\tthis.makeFilter(keys, ...p), throwFunc);\r\n\t}\r\n\tprivate getEnsureNotFunc(name, keys) {\r\n\t\tconst throwFunc = this.getThrowFunc(name);\r\n\t\treturn (...p) => this.ensureNot(\r\n\t\t\tthis.makeFilter(keys, ...p), throwFunc);\r\n\t}\r\n\r\n\tprivate getThrowFunc(name): Function {\r\n\t\tconst funcs = this.constructor[\"throwFuncs\"];\r\n\t\tconst res = funcs ? funcs[name] : null;\r\n\t\treturn res || (() => {throw null});\r\n\t}\r\n\r\n}\r\n","\r\nimport { updateContext} from \"../Modules/CoreModule/Managers/BaseManager\";\r\nimport Component = cc.Component;\r\nimport {curScene, sceneMgr} from \"../Modules/CoreModule/Managers/SceneManager\";\r\nimport {nftMgr, Web3Enable} from \"../Modules/NFTModule/Managers/NFTManager\";\r\nimport {playerMgr} from \"../Modules/PlayerModule/Managers/PlayerManager\";\r\nconst { ccclass, property } = cc._decorator;\r\n\r\nexport abstract class BaseScene extends Component {\r\n\r\n\tprotected onLoad() {\r\n\t\tsceneMgr().curScene = this;\r\n\t}\r\n\tprotected onDestroy() {\r\n\t\tsceneMgr().curScene = null;\r\n\t}\r\n\r\n\tprotected get autoConnect() { return true; }\r\n\r\n\tprotected start() {\r\n\t\tif (Web3Enable) nftMgr().init(this.autoConnect).then();\r\n\t\telse playerMgr().autoLogin().then();\r\n\t}\r\n\r\n\tupdate(dt: number) {\r\n\t\tupdateContext(dt);\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import Animation = cc.Animation;\r\nimport {battleScene} from \"../../../Scenes/BattleScene\";\r\nimport Prefab = cc.Prefab;\r\nimport instantiate = cc.instantiate;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class BattleAnimationsController extends cc.Component {\r\n\r\n    @property([Prefab])\r\n    animationPrefabs: Prefab[] = [];\r\n\r\n    private animations: Animation[] = [];\r\n    private speeds: number[] = [];\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n        // this.animations.forEach(a => this.speeds.push(1));\r\n    }\r\n\r\n    update (dt) {\r\n        let speed = battleScene().battleSpeed;\r\n        this.animations.forEach((a, i) => {\r\n            a.getAnimationState(a.defaultClip.name).speed = speed * this.speeds[i];\r\n            if (!a.getAnimationState(a.defaultClip.name).isPlaying) {\r\n                a.node.destroy();\r\n                this.animations.splice(i, 1);\r\n                this.speeds.splice(i, 1);\r\n            }\r\n        })\r\n    }\r\n\r\n    play(name: string, time: number = 0, posX: number = 0, posY: number = 0, camp: number = 0) {\r\n        if (!this.animationPrefabs[Animations[name]]) return;\r\n        let node = instantiate(this.animationPrefabs[Animations[name]]);\r\n        node.parent = this.node;\r\n        let ani = node.getComponent(Animation);\r\n        this.animations.push(ani);\r\n        this.speeds.push(time > 0 ? ani.defaultClip[\"_duration\"] / time : 1);\r\n        ani.node.x = posX; ani.node.y = posY;\r\n        ani.node.scaleX *= camp == 0 ? 1 : -1;\r\n        ani.play();\r\n    }\r\n}\r\n\r\nenum Animations {\r\n    bossComing = 0,\r\n    attack,\r\n    death,\r\n    recover,\r\n    lightingSelf,\r\n    lightingTarget\r\n}\r\n","import {error, loading, post} from \"../CoreModule/Common/CoreCommon\";\r\n\r\nexport class BattleThrow {\r\n\t@error(1,\"\") test() {}\r\n}\r\n\r\nexport class BattleInterface {\r\n\r\n\t@post(\"/battle/main/start\") static async StartMainBattle(d?): Promise<any> {}\r\n\t@post(\"/battle/main/action\") static async StartMainBattleAction(d?): Promise<any> {}\r\n\t@post(\"/battle/main/end\") static async EndMainBattle(d?): Promise<any> {}\r\n\t@post(\"/battle/main/boost\") static async BoostMainBattle(d?): Promise<any> {}\r\n\t@post(\"/battle/pvp/player_count\") static async GetPVPPlayerCount(d?): Promise<any> {}\r\n\t@post(\"/battle/pvp/get_player\") static async GetPVPPlayers(d?): Promise<any> {}\r\n\t@post(\"/battle/pvp/start\") static async StartPVP(d?): Promise<any> {}\r\n\t@post(\"/battle/pvp/action\") static async StartPVPAction(d?): Promise<any> {}\r\n\t@post(\"/battle/pvp/skip\") static async SkipPVP(d?): Promise<any> {}\r\n\t@post(\"/battle/pvp/boost\") static async BoostPVP(d?): Promise<any> {}\r\n\t@post(\"/battle/pvp/end\") static async EndPVP(d?): Promise<any> {}\r\n\t@post(\"/battle/copy/start\") static async StartCopy(d?): Promise<any> {}\r\n\t@post(\"/battle/copy/buy_battle_chance\") static async BuyBattleChance(d?): Promise<any> {}\r\n\r\n\t// region 测试接口\r\n\r\n\t@post(\"/battle/test/start\") static async StartTest(d?): Promise<any> {}\r\n\t@post(\"/battle/test/next\") static async NextTest(d?): Promise<any> {}\r\n\t@post(\"/battle/test/end\") static async EndTest(d?): Promise<any> {}\r\n\r\n\t// endregion\r\n\r\n}\r\n","import {BaseConfig, config} from \"../../CoreModule/Data/BaseConfig\";\r\nimport {field} from \"../../CoreModule/Data/BaseData\";\r\n\r\n@config(\"BattleConfig\")\r\nexport class BattleConfig extends BaseConfig {\r\n\r\n\t@field // 命中判定参数\r\n\thit = {\r\n\t\tdefaultBase: 0.1,\r\n\t\tbaseHitRate: 0.97,\r\n\t\tfloat: [0.9, 1.1]\r\n\t}\r\n\t@field // 暴击判定参数\r\n\tcrit = {\r\n\t\tminRate: 0.03,\r\n\t\tdamageRate: 2,\r\n\t}\r\n\t@field\r\n\trestraint = {\r\n\t\t// 克制时伤害, 普通伤害, 被克制伤害\r\n\t\trates: [1, 4, 0.5]\r\n\t}\r\n}\r\n","import {ItemDisplay} from \"../../CoreModule/Components/ItemDisplay\";\r\nimport BattleAnimationsController from \"./BattleAnimationsController\";\r\nimport Node = cc.Node;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nexport type BattleState = 'not_started' | 'preparing' | 'running' | 'finished';\r\n\r\n@ccclass\r\nexport default class BattleDisplay extends ItemDisplay<Battle> {\r\n\r\n\t@property([Node])\r\n\tpublic battlerNodes: Node[] = [\r\n\t\tnull, null, null, null\r\n\t];\r\n\r\n\tprotected battlers: BattlerDisplay[] = [];\r\n\r\n\tstart() {\r\n\t\tsuper.start();\r\n\t}\r\n\r\n\tonLoad() {\r\n\t\tthis.battlerNodes.forEach(n => this.battlers.push(\r\n\t\t\tn.getComponent(BattlerDisplay)));\r\n\t\tthis.battlers.forEach(b => b.battle = this);\r\n\r\n\t\tconsole.log(\"BattleDisplay onLoad\", this, this.battlerNodes, this.battlers)\r\n\t}\r\n\r\n\t// region 数据控制\r\n\r\n\t/**\r\n\t * 获取战斗者展示组件\r\n\t */\r\n\tpublic getDisplay(info) {\r\n\t\treturn info && this.battlers.find(\r\n\t\t\tb => b.camp == info.camp && b.index == info.pos);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 界面绘制\r\n\r\n\trefresh() {\r\n\t\tsuper.refresh();\r\n\t\tconsole.log(\"BattleDisplay refresh\", this, this.item)\r\n\t\tthis.battlers.forEach(b => b.clearItems());\r\n\t\tthis.item.battlers.forEach(b => this.getDisplay(b)?.addItem(b));\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 更新控制\r\n\r\n\tprotected update(dt: number) {\r\n\t\tif (!this.item) return;\r\n        this.updateAnimationSpeed();\r\n\t\tthis.updateBattleAnimation();\r\n\t}\r\n\r\n\tupdateAnimationSpeed() {\r\n\t\tthis.battlers.forEach(b => b.skeleton.timeScale = battleScene().battleSpeed);\r\n\t}\r\n\r\n\tupdateBattleAnimation() {\r\n\t\tlet times = this.item.getCurrentAnimationTimes();\r\n\t\tthis.item.getCurrentAnimations().forEach((a, i) => this.animation.play(a, times[i]));\r\n\t}\r\n\r\n\tplayNormalAnimation(name: string, time: number, posX: number, posY: number, camp: number) {\r\n\t\tthis.animation.play(name, time, posX, posY, camp);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 战斗动画控制\r\n\r\n\t@property(BattleAnimationsController)\r\n\tanimation: BattleAnimationsController = null;\r\n\r\n\t// endregion\r\n\r\n}\r\n\r\nimport {Battle} from \"../Data/Battle\";\r\nimport {battleScene} from \"../../../Scenes/BattleScene\";\r\nimport BattlerDisplay from \"./BattlerDisplay\";\r\n","import {BaseManager, getManager, manager} from \"../../CoreModule/Managers/BaseManager\";\r\n\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\nimport {DataLoader} from \"../../CoreModule/Utils/DataLoader\";\r\n\r\nexport function battleMgr() {\r\n\treturn getManager(BattleManager);\r\n}\r\n\r\n@manager\r\nexport class BattleManager extends BaseManager {\r\n\r\n\t/**\r\n\t * 当前战斗\r\n\t */\r\n\tpublic battles: BattleProcessor[] = [];\r\n\r\n\t/**\r\n\t * 开始闯关战斗\r\n\t */\r\n\tpublic async startMainBattle() {\r\n\t\tlet iRes = await BattleInterface.StartMainBattle();\r\n\t\tconst res = DataLoader.load(Battle, iRes[\"battle\"]);\r\n\t\tres.battlers.forEach(b => b.isEntering && b.enter());\r\n\r\n\t\tawait this.getBattleNFTs(res);\r\n\r\n\t\tconst processor = this.startBattle(res);\r\n\t\tprocessor.start();\r\n\r\n\t\t// 异步操作\r\n\t\tbattleMgr().startMainFirstAction(res).then()\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 开启闯关的第一个行动\r\n\t */\r\n\tpublic async startMainFirstAction(battle: Battle) {\r\n\t\tconst res = await BattleInterface.StartMainBattleAction({\r\n\t\t\tbattleId: battle.battleId });\r\n\t\tconst nextAction = DataLoader.load(Action, res[\"action\"]);\r\n\r\n\t\tbattle.addAction(nextAction);\r\n\t}\r\n\r\n\tpublic async nextMainBattle() {\r\n\r\n\t}\r\n\r\n\tpublic async startCopy() {\r\n\t\tlet iRes = await BattleInterface.StartCopy({copyId: 11});\r\n\t\tconst res = DataLoader.load(Battle, iRes[\"battle\"]);\r\n\t\tres.battlers.forEach(b => b.isEntering && b.enter());\r\n\r\n\t\tconst processor = this.startBattle(res);\r\n\t\tprocessor.start();\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\tpublic test(battle) {\r\n\t\tconst processor = this.startBattle(battle);\r\n\t\tprocessor.start();\r\n\t}\r\n\r\n\tprivate startBattle(battle: Battle) {\r\n\t\tconst processor = createProcessor(battle);\r\n\t\tthis.battles.push(processor);\r\n\t\treturn processor;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取战斗的NFT列表\r\n\t */\r\n\tpublic async getBattleNFTs(battle: Battle) {\r\n\t\tconst battlers = battle.battlers.filter(b => b.isHero);\r\n\t\tfor (const battler of battlers) {\r\n\t\t\tawait heroMgr().getOneFromServer(battler.nftId);\r\n\t\t\tbattler.refresh();\r\n\t\t}\r\n\t}\r\n\r\n\tupdate(dt: number) {\r\n\t\tsuper.update(dt);\r\n\t\tthis.battles.forEach(b => b.update(dt * battleScene().battleSpeed));\r\n\t}\r\n\r\n\t// region pvp战斗控制\r\n\r\n\tpublic async startPVPBattle(selfNftId: string, roomId: number, enemyNftId: string) {\r\n\t\tlet iRes = await BattleInterface.StartPVP({selfNftId: selfNftId, roomId: roomId, enemyNftId: enemyNftId});\r\n\t\tconst res = DataLoader.load(Battle, iRes[\"battle\"]);\r\n\t\tres.battlers.forEach(b => b.isEntering && b.enter());\r\n\r\n\t\tawait this.getBattleNFTs(res);\r\n\r\n\t\tconst processor = this.startBattle(res);\r\n\t\tprocessor.start();\r\n\r\n\t\t// 异步操作\r\n\t\tbattleMgr().startPVPFirstAction(res).then()\r\n\t\treturn res;\r\n\t}\r\n\r\n\tprivate async startPVPFirstAction(battle: Battle) {\r\n\t\tconsole.log(123456);\r\n\t\tconst res = await BattleInterface.StartPVPAction({\r\n\t\t\tbattleId: battle.battleId });\r\n\t\tconst nextAction = DataLoader.load(Action, res[\"action\"]);\r\n\r\n\t\tbattle.addAction(nextAction);\r\n\t}\r\n\r\n\t// endregion\r\n}\r\n\r\nimport {BattleProcessor, createProcessor} from \"../Utils/BattleProcessor\";\r\nimport {BattleInterface} from \"../BattleCommon\";\r\nimport {Battle} from \"../Data/Battle\";\r\nimport {Action} from \"../Data/Action\";\r\nimport {battleScene} from \"../../../Scenes/BattleScene\";\r\nimport {heroMgr} from \"../../HeroModule/Managers/HeroManager\";\r\n","import {Action} from \"../Data/Action\";\r\nimport {Battle, BattleState, BattleType, PlayerCamp} from \"../Data/Battle\";\r\nimport {BattleInterface} from \"../BattleCommon\";\r\nimport {DataLoader} from \"../../CoreModule/Utils/DataLoader\";\r\nimport {BattlerState, BonusParamType} from \"../Data/Battler\";\r\nimport {PromiseUtils} from \"../../../Utils/PromiseUtils\";\r\nimport {copyMgr} from \"../../CopyModule/Managers/CopyManager\";\r\nimport {copyRepo} from \"../../CopyModule/Data/Copy\";\r\nimport {playerMgr} from \"../../PlayerModule/Managers/PlayerManager\";\r\nimport {PlayerCopy} from \"../../CopyModule/Data/PlayerCopy\";\r\nimport {RewardGroup} from \"../../PlayerModule/Data/Reward\";\r\n\r\nconst SelfCamp = PlayerCamp; // 自身阵营\r\n\r\nexport function battleProcessor(type: BattleType) {\r\n\treturn (clazz) => {\r\n\t\tBattleProcessor.processorSettings[type] = clazz;\r\n\t}\r\n}\r\n\r\nexport function createProcessor(battle: Battle): BattleProcessor {\r\n\tconst clazz = BattleProcessor.processorSettings[battle.type];\r\n\treturn clazz ? new clazz(battle) : null;\r\n}\r\n\r\n/**\r\n * 战斗处理器\r\n */\r\nexport abstract class BattleProcessor {\r\n\r\n\tpublic static processorSettings = {};\r\n\r\n\tpublic battle: Battle;\r\n\tpublic resultBattle: Battle;\r\n\r\n\t/**\r\n\t * 胜负结果\r\n\t */\r\n\tpublic get isResult() { return this.battle.winner >= 0; }\r\n\tpublic get isWin() { return this.battle.winner == SelfCamp; }\r\n\tpublic get isLose() { return this.battle.winner == 1 - SelfCamp; }\r\n\r\n\tprotected constructor(battle: Battle) {\r\n\t\tthis.battle = battle;\r\n\r\n\t\tthis.battle.onActionStartListener =\r\n\t\t\ta => this.onActionStart(a);\r\n\t\tthis.battle.onActionEndListener =\r\n\t\t\ta => this.onActionEnd(a);\r\n\t\tthis.battle.onBattleEndListener =\r\n\t\t\tw => this.onBattleEnd(w);\r\n\t}\r\n\r\n\t// region 流程控制\r\n\r\n\t/**\r\n\t * 开始\r\n\t */\r\n\tpublic start() {\r\n\t\tthis.battle.start();\r\n\r\n\t\tthis.onStarted();\r\n\t}\r\n\r\n\t/**\r\n\t * 结束\r\n\t */\r\n\tpublic terminate() {\r\n\t\tthis.battle.terminate();\r\n\r\n\t\tthis.onTerminated();\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 回调控制\r\n\r\n\t/**\r\n\t * 开始回调\r\n\t */\r\n\tprotected onStarted() { }\r\n\r\n\t/**\r\n\t * 结束回调\r\n\t */\r\n\tprotected onTerminated() {\r\n\t\tthis.processRewards();\r\n\t}\r\n\r\n\t/**\r\n\t * 行动产生回调\r\n\t */\r\n\tprotected onActionStart(action: Action) { }\r\n\r\n\t/**\r\n\t * 行动结束回调\r\n\t */\r\n\tprotected onActionEnd(action: Action) { }\r\n\r\n\t/**\r\n\t * 战斗结束回调\r\n\t */\r\n\tprotected onBattleEnd(winner) { }\r\n\r\n\t// endregion\r\n\r\n\t// region 奖励控制\r\n\r\n\t/**\r\n\t * 奖励\r\n\t */\r\n\tpublic rewards(): RewardGroup { return null; }\r\n\r\n\t/**\r\n\t * 处理奖励\r\n\t */\r\n\tpublic processRewards() {\r\n\t\tif (!this.isResult) return;\r\n\t\tconst rewards = this.rewards();\r\n\t\tif (!rewards) return;\r\n\t\t// 处理金币加成\r\n\t\trewards.gold.value *= this.battle.campBonusParam(\r\n\t\t\tSelfCamp, BonusParamType.Gold);\r\n\t\trewards.invoke();\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\r\n\t// region 更新\r\n\r\n\t// endregion\r\n\r\n\tpublic update(dt) {\r\n\t\tthis.updateBattle(dt);\r\n\t}\r\n\r\n\tprotected updateBattle(dt) {\r\n\t\tthis.battle.update(dt);\r\n\t\t// this.printBattle();\r\n\t}\r\n\r\n\tpublic printBattle() {\r\n\t\tconsole.log(`=== Battle ${this.battle.battleId} ===`);\r\n\t\tconsole.log(\"state: \", BattleState[this.battle.state]);\r\n\t\tconsole.log(\r\n\t\t\t\"elapsedTime: \", this.battle.elapsedTime,\r\n\t\t\t\"actionTime: \", this.battle.actionTime);\r\n\r\n\t\tconsole.log(\"== battlers ==\");\r\n\t\tconsole.log(\"camp\", \"pos\", \"state\", \"hp\", \"action\", \"motions\");\r\n\t\tthis.battle.battlers.forEach(b =>\r\n\t\t\tconsole.log(b.camp, b.pos, BattlerState[b.state], b.hp, b.action, b.motions)\r\n\t\t)\r\n\r\n\t\tconsole.log(\"== actions ==\");\r\n\t\tconsole.log(\"time\", \"subject\", \"target\", \"skillId\");\r\n\t\tthis.battle.actions.forEach(a =>\r\n\t\t\tconsole.log(a.time, a.subject, a.target, a.skillId)\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * 回合制战斗处理\r\n */\r\nabstract class RoundBattleProcessor extends BattleProcessor {\r\n\r\n\t/**\r\n\t * 回合\r\n\t */\r\n\tpublic get round() { return this.battle.actionTime; }\r\n\r\n\t/**\r\n\t * 是否进入下一回合\r\n\t */\r\n\t// protected isNextRound() {\r\n\t// \t// 如果经过上一次的update后，当前Action为空\r\n\t// \treturn !this.battle.curAction;\r\n\t// }\r\n\r\n\tprotected updateBattle(dt: number) {\r\n\t\t// const next = this.isNextRound();\r\n\t\tsuper.updateBattle(dt);\r\n\t}\r\n\r\n}\r\n\r\n@battleProcessor(BattleType.Main)\r\nexport class MainBattleProcessor extends RoundBattleProcessor {\r\n\r\n\t/**\r\n\t * 奖励\r\n\t */\r\n\tpublic rewards() {\r\n\t\tconst copy = copyRepo().main();\r\n\t\tconst level = copy.level(this.battle.level);\r\n\t\treturn level.calcRewards(this.isWin, this.battle.isFirst);\r\n\t}\r\n\r\n\tprotected async onActionEnd(action: Action) {\r\n\t\tsuper.onActionEnd(action);\r\n\r\n\t\t// 测试\r\n\t\t// const res = await BattleInterface.NextTest({battleId: this.battle.battleId});\r\n\t\tconst res = await PromiseUtils.waitForRetry(() => BattleInterface.StartMainBattleAction({battleId: this.battle.battleId}));\r\n\t\tthis.resultBattle = DataLoader.load(Battle, res[\"battle\"]);\r\n\t\tconst nextAction = DataLoader.load(Action, res[\"action\"]);\r\n\r\n\t\tthis.battle.setActionTime(this.resultBattle.actionTime);\r\n\t\tthis.battle.addAction(nextAction);\r\n\r\n\t\t// TODO: 暂时注释掉，后续需要添加同步Battle数据的函数\r\n\t\t// const res = await networkMgr().request(\r\n\t\t// \tBattleInterface.StartMainBattleAction, { action });\r\n\t\t// this.resultBattle = DataLoader.load(Battle, res[\"battle\"]);\r\n\t}\r\n\r\n\tprotected async onBattleEnd(winner) {\r\n\t\tsuper.onBattleEnd(winner);\r\n\r\n\t\t// 测试\r\n\t\tconst res = await BattleInterface.EndMainBattle({battleId: this.battle.battleId});\r\n\t\t// copyMgr().getMainPlayerCopy().curLevel++;\r\n\t\t// copyMgr().getMainPlayerCopy().maxLevel =\r\n\t\t// \tMath.max(copyMgr().getMainPlayerCopy().curLevel, copyMgr().getMainPlayerCopy().maxLevel);\r\n\t\tthis.resultBattle = DataLoader.load(Battle, res[\"battle\"]);\r\n\t\tthis.terminate();\r\n\t}\r\n\r\n\t/**\r\n\t * 完全结束回调\r\n\t */\r\n\tprotected onTerminated() {\r\n\t\tsuper.onTerminated();\r\n\t\tconst pCopy = playerMgr().getPlayerData(PlayerCopy);\r\n\t\tif (this.isWin) pCopy.mainCopy().next();\r\n\t\tif (this.isLose) pCopy.mainCopy().prev();\r\n\t}\r\n}\r\n\r\n@battleProcessor(BattleType.Copy)\r\nexport class CopyBattleProcessor extends BattleProcessor {\r\n\tprotected onActionEnd(action: Action) {\r\n\t\tsuper.onActionEnd(action);\r\n\t\tif (this.battle.actions.find(a => a.time == action.time))\r\n\t\t\tthis.battle.nextRound();\r\n\t}\r\n}\r\n\r\n@battleProcessor(BattleType.Boss)\r\nexport class BossBattleProcessor extends CopyBattleProcessor {\r\n\r\n}\r\n\r\n@battleProcessor(BattleType.PVP)\r\nexport class PVPBattleProcessor extends BattleProcessor {\r\n\r\n\tprotected async onActionEnd(action: Action) {\r\n\t\tsuper.onActionEnd(action);\r\n\r\n\t\tconst res = await PromiseUtils.waitForRetry(() => BattleInterface.StartPVPAction({battleId: this.battle.battleId}));\r\n\t\tthis.resultBattle = DataLoader.load(Battle, res[\"battle\"]);\r\n\t\tconst nextAction = DataLoader.load(Action, res[\"action\"]);\r\n\r\n\t\tthis.battle.setActionTime(this.resultBattle.actionTime);\r\n\t\tthis.battle.addAction(nextAction);\r\n\r\n\t}\r\n\r\n\tprotected async onBattleEnd(winner) {\r\n\t\tsuper.onBattleEnd(winner);\r\n\r\n\t\tconst res = await BattleInterface.EndPVP({battleId: this.battle.battleId});\r\n\t\tthis.resultBattle = DataLoader.load(Battle, res[\"battle\"]);\r\n\t\tthis.terminate();\r\n\t}\r\n\r\n\t/**\r\n\t * 完全结束回调\r\n\t */\r\n\tprotected onTerminated() {\r\n\t\tsuper.onTerminated();\r\n\r\n\t}\r\n\r\n}\r\n\r\n","import {ItemContainer} from \"../../../CoreModule/Components/ItemContainer\";\r\nimport {Reward} from \"../../../PlayerModule/Data/Reward\";\r\nimport BattleRewardDisplay from \"./BattleRewardDisplay\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class BattleRewardContainer extends ItemContainer<Reward, BattleRewardDisplay> {\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    @property(Number)\r\n    coldDownTime: number = 0.1;\r\n\r\n    // update (dt) {}\r\n    onItemsChanged() {\r\n        super.onItemsChanged();\r\n        this.items.forEach((e, i) => {\r\n            this.itemsComponents[i].delayTime = this.coldDownTime * (i + 1);\r\n        });\r\n    }\r\n\r\n}\r\n","import {ItemDisplay} from \"../../../CoreModule/Components/ItemDisplay\";\r\nimport {Reward} from \"../../../PlayerModule/Data/Reward\";\r\nimport Sprite = cc.Sprite;\r\nimport Label = cc.Label;\r\nimport {autoUnitConvert} from \"../../../../Utils/NumberUtils\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class BattleRewardDisplay extends ItemDisplay<Reward> {\r\n\r\n    @property(Sprite)\r\n    icon: Sprite = null;\r\n    @property(Label)\r\n    value: Label = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    update (dt) {\r\n        this.updateNodeAnimation(dt);\r\n    }\r\n\r\n    protected onItemChanged() {\r\n        super.onItemChanged();\r\n        this.updateLabels();\r\n        this.resetTimers();\r\n    }\r\n\r\n    @autoUnitConvert\r\n    updateLabels() {\r\n        this.value.string = this.item.value.toString();\r\n    }\r\n\r\n    @property(Number)\r\n    animationTime: number = 0.2;\r\n\r\n    delayTime: number = 0;\r\n    timer: number = 0;\r\n\r\n    updateNodeAnimation(dt: number) {\r\n        if (this.timer < this.delayTime + this.animationTime) {\r\n            this.node.opacity = Math.max(0, 255 * (this.timer - this.delayTime) / this.animationTime);\r\n            this.node.scale = Math.min(1.2, 1.2 - 0.2 * (this.timer - this.delayTime) / this.animationTime);\r\n            this.timer += dt;\r\n            return;\r\n        }\r\n        this.node.opacity = 255;\r\n        this.node.scale = 1;\r\n    }\r\n\r\n    resetTimers() {\r\n        this.timer = 0;\r\n    }\r\n\r\n}\r\n","import {getSingleton, singleton} from \"../Modules/CoreModule/Utils/SingletonUtils\";\r\nimport {BaseScene} from \"./BaseScene\";\r\nimport {Hero} from \"../Modules/HeroModule/Data/Hero\";\r\nimport Node = cc.Node;\r\nimport CultivateWindowController from \"../Modules/BattleModule/Components/Cultivate/CultivateWindowController\";\r\nimport SettlementWindowController from \"../Modules/BattleModule/Components/SettlementWindowController\";\r\nimport MyTeamFrame from \"./BattleScene/Components/MyTeamFrame\";\r\nimport {copyMgr} from \"../Modules/CopyModule/Managers/CopyManager\";\r\nimport {playerMgr, waitForLogin} from \"../Modules/PlayerModule/Managers/PlayerManager\";\r\nimport {waitForDataLoad} from \"../Modules/CoreModule/Managers/DataManager\";\r\nimport {battleMgr} from \"../Modules/BattleModule/Managers/BattleManager\";\r\nimport {RoomNFTInfo} from \"../Modules/BattleModule/Components/PVP/PlayerCardDisplay\";\r\nimport MainBattleDisplay from \"../Modules/BattleModule/Components/Main/MainBattleDisplay\";\r\nimport {nftMgr, Web3Enable} from \"../Modules/NFTModule/Managers/NFTManager\";\r\nimport PVPBattleDisplay from \"../Modules/BattleModule/Components/PVP/PVPBattleDisplay\";\r\nimport Prefab = cc.Prefab;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nexport function battleScene() {\r\n\treturn getSingleton(BattleScene);\r\n}\r\n\r\n@ccclass\r\n@singleton\r\nexport default class BattleScene extends BaseScene {\r\n\r\n\theroesInTeam: Hero[] = [];\r\n\tbattleSpeed: number = 1;\r\n\r\n\tprotected onLoad() {\r\n\t\tsuper.onLoad();\r\n\t}\r\n\r\n\tstart() {\r\n\t\tsuper.start();\r\n\t\tif (Web3Enable) nftMgr().connect().then();\r\n\t\tthis.setSingleComponents();\r\n\t\tthis.startMainBattle().then();\r\n\t}\r\n\r\n\tupdate(dt) {\r\n\t\tsuper.update(dt);\r\n\t\tthis.battleSpeed = Date.now() < copyMgr().getMainPlayerCopySettings()?.speedUpTime ? 2 : 1;\r\n\t\tif (this.mainBattle.item?.isEnded && !this.battleEnded)\r\n\t\t\tthis.nextMainBattle();\r\n\t\t// console.log(\"progress\", dataMgr().loadingProgress());\r\n\t}\r\n\r\n\tsetSingleComponents() {\r\n\t\tthis.myTeamFrame = this.myTeamFrameNode.getComponent(\"MyTeamFrame\");\r\n\t\tthis.cultivateWindow = this.cultivateWindowNode.getComponent(\"CultivateWindowController\");\r\n\t\tthis.settlementWindow = this.settlementWindowNode.getComponent(\"SettlementWindowController\");\r\n\t\tthis.mainBattle = this.mainBattleNode.getComponent(\"MainBattleDisplay\");\r\n\t\tthis.pvpBattle = this.pvpBattleNode.getComponent(\"PVPBattleDisplay\");\r\n\t}\r\n\r\n\t@waitForLogin\r\n\t@waitForDataLoad\r\n\tasync startMainBattle() {\r\n\t\tconst battle = await battleMgr().startMainBattle();\r\n\t\tthis.mainBattle.setItem(battle);\r\n\t}\r\n\r\n\tprivate battleEnded: boolean = false;\r\n\r\n\tnextMainBattle() {\r\n\t\tthis.battleEnded = true;\r\n\t\tbattleMgr().startMainBattle().then(battle => {\r\n\t\t\tthis.mainBattle.setItem(battle);\r\n\t\t\tthis.battleEnded = false;\r\n\t\t})\r\n\t}\r\n\r\n\t@property(Node)\r\n\tmyTeamFrameNode: Node = null;\r\n\t@property(Node)\r\n\tcultivateWindowNode: Node = null;\r\n\t@property(Node)\r\n\tsettlementWindowNode: Node = null;\r\n\t@property(Node)\r\n\tmainBattleNode: Node = null;\r\n\t@property(Node)\r\n\tpvpBattleNode: Node = null;\r\n\r\n\tmyTeamFrame: MyTeamFrame;\r\n\tcultivateWindow: CultivateWindowController;\r\n\tsettlementWindow: SettlementWindowController;\r\n\tmainBattle: MainBattleDisplay;\r\n\tpvpBattle: PVPBattleDisplay;\r\n\r\n\t// region PVP相关控制\r\n\r\n\tcurrentPVPRoomIndex: number = -1; // 当前选择的房间编号\r\n\troomSelected: boolean = false; // 已选择房间\r\n\tcurrentTargetSelect: RoomNFTInfo = null; // 当前选择的挑战对象\r\n\tcurrentPVPSelect: Hero = null; // 当前上阵英雄\r\n\theroSelected: boolean = false; // 已上阵英雄（实际上就是告诉中间信息框该展示玩家信息还是英雄信息，因为根据新给出的设计始终存在一个上阵的英雄）\r\n\r\n\tasync startPVPBattle(target: string = undefined) {\r\n\t\tif (target) {\r\n\t\t\tconst battle = await battleMgr().startPVPBattle(\r\n\t\t\t\tthis.currentPVPSelect.nftId, -1, target);\r\n\t\t\tthis.pvpBattleNode.active = true;\r\n\t\t\tthis.pvpBattle.setItem(battle);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!this.currentPVPSelect.nftId ||\r\n\t\t\tthis.currentPVPRoomIndex < 0 ||\r\n\t\t\t!this.currentTargetSelect.nftId) return;\r\n\t\tconst battle = await battleMgr().startPVPBattle(\r\n\t\t\tthis.currentPVPSelect.nftId,\r\n\t\t\tthis.currentPVPRoomIndex,\r\n\t\t\tthis.currentTargetSelect.nftId);\r\n\t\tthis.pvpBattleNode.active = true;\r\n\t\tthis.pvpBattle.setItem(battle);\r\n\t}\r\n\r\n\tendPVPBattle() {\r\n\t\tthis.pvpBattle.setItem(null);\r\n\t\tthis.pvpBattleNode.active = false;\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t@property(Prefab)\r\n\tloading: Prefab = null;\r\n\r\n}\r\n","import Skeleton = sp.Skeleton;\r\nimport Animation = cc.Animation;\r\nimport Vec2 = cc.Vec2;\r\nimport Node = cc.Node;\r\nimport Color = cc.Color;\r\nimport Prefab = cc.Prefab;\r\nimport ProgressBar = cc.ProgressBar;\r\nimport {ItemDisplay} from \"../../CoreModule/Components/ItemDisplay\";\r\nimport {Vec1} from \"../Utils/Vec1\";\r\nimport HitDamage, {HitType} from \"./IndependentController/HitDamage\";\r\nimport {HeroSkeleton} from \"../../../Utils/SpineUtils\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n// export type BattlerState = 'hidden' | 'idle' | 'playing' | 'dead';\r\n\r\nconst MaxElapsedTime = 99999;\r\n\r\n@ccclass\r\nexport default class BattlerDisplay extends ItemDisplay<Battler> {\r\n\r\n\t@property\r\n\tpublic camp: number = 0;\r\n\t@property\r\n\tpublic index: number = 0;\r\n\t@property\r\n\tpublic heroScale: number = 0.2;\r\n\r\n\t// @property(Node)\r\n\t// public scaleNode: Node;\r\n\r\n\t@property(Node)\r\n\tpublic skeletonNode: Node;\r\n\r\n\t@property(Skeleton)\r\n\tpublic skeleton: Skeleton = null;\r\n\t@property(Animation)\r\n\tpublic animation: Animation = null;\r\n\r\n\t@property(ProgressBar)\r\n\tpublic hpBar: ProgressBar = null;\r\n\r\n\t@property(Node)\r\n\tpublic shadowNode: Node = null;\r\n\r\n\tpublic battle;\r\n\r\n\tpublic oriPos: Vec2;\r\n\tpublic oriAngle: Vec1;\r\n\tpublic oriScale: Vec2;\r\n\r\n\tpublic get pos() { return new Vec2(this.node.x, this.node.y); }\r\n\tpublic set pos(val: Vec2) { this.node.setPosition(val); }\r\n\tpublic get angle() { return new Vec1(this.skeletonNode.angle); }\r\n\tpublic set angle(val: Vec1) { this.skeletonNode.angle = val.x; }\r\n\tpublic get scale() { return new Vec2(this.skeletonNode.scaleX, this.skeletonNode.scaleY); }\r\n\tpublic set scale(val: Vec2) { this.skeletonNode.setScale(val); }\r\n\tpublic get color() { return this.skeletonNode.color; }\r\n\tpublic set color(val: Color) { this.skeletonNode.color = val; }\r\n\r\n\t/**\r\n\t * 是否翻转显示\r\n\t */\r\n\tpublic get flip() { return this.camp == 1; }\r\n\r\n\t// region 初始化\r\n\r\n\tprotected start() {\r\n\t\tthis.oriPos = new Vec2(this.node.x, this.node.y);\r\n\t\tthis.oriAngle = new Vec1(this.node.angle);\r\n\t\tthis.oriScale = new Vec2(this.node.scaleX, this.node.scaleY)\r\n\r\n\t\t// 处理水平翻转\r\n\t\tthis.node.scaleX = this.flip ? 1 : -1;\r\n\t}\r\n\r\n\tpublic refresh() {\r\n\t\tsuper.refresh();\r\n\t\tthis.drawSkeleton(this.item.entity);\r\n\t}\r\n\r\n\tprivate drawSkeleton(entity: IEntity){\r\n\t\tif (!entity.parts) {\r\n\t\t\tthis.skeleton.skeletonData = entity.skeleton;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet node = new Node('node');\r\n\t\tlet temp = node.addComponent(Skeleton);\r\n\t\tlet hero = new HeroSkeleton(this.skeleton, temp, heroMgr().getCacheOneFromServer(entity.nftId).heroTypeId);\r\n\t\tentity.parts.forEach(part => { hero.addPart(part); });\r\n\t\thero.refresh().then(res => node.destroy());\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 数据获取\r\n\r\n\t/**\r\n\t * 在行动中，获取双方的Display\r\n\t */\r\n\tpublic get subjectDisplay() {\r\n\t\treturn this.battle.getDisplay(this.item.subject);\r\n\t}\r\n\tpublic get targetDisplay() {\r\n\t\treturn this.battle.getDisplay(this.item.target);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 更新\r\n\r\n\t/**\r\n\t * 更新\r\n\t */\r\n\tprotected update(dt: number) {\r\n\t\tif (!this.item) return;\r\n\t\tthis.updateTranslate();\r\n\t\tthis.updateColor();\r\n\t\tthis.updateOpacity();\r\n\t\tthis.updateAnimation();\r\n\t\tthis.updateResult();\r\n\t\tthis.sizeFilter();\r\n\t\tthis.updateHp();\r\n\t\tthis.updateItemList();\r\n\t}\r\n\r\n\t/**\r\n\t * 更新变换\r\n\t */\r\n\tprivate updateTranslate() {\r\n\t\tthis.scale = this.item.scale;\r\n\t\tthis.angle = this.item.angle;\r\n\r\n\t\t// 更新位置\r\n\t\tconst sPos = this.convertPosition(this.item.startPos);\r\n\t\tconst tPos = this.convertPosition(this.item.targetPos);\r\n\t\tconst curPos: Vec2 = new Vec2();\r\n\r\n\t\tVec2.lerp(curPos, sPos, tPos, this.item.posRate.x);\r\n\t\tcurPos.y += this.item.z;\r\n\r\n\t\t// 附加抖动效果\r\n\t\tcurPos.x += this.item.shakePos.x;\r\n\t\tcurPos.y += this.item.shakePos.y;\r\n\r\n\t\tthis.pos = curPos;\r\n\t}\r\n\tprivate convertPosition(pos: Position) {\r\n\t\tconst offset = pos.offset.clone();\r\n\t\tif (this.flip) offset.x = -offset.x;\r\n\r\n\t\tif (pos.origin == \"self\")\r\n\t\t\treturn this.oriPos.clone().add(offset);\r\n\t\tif (pos.origin == \"target\" && this.targetDisplay)\r\n\t\t\treturn this.targetDisplay.oriPos.clone().add(offset);\r\n\r\n\t\treturn pos.offset;\r\n\t}\r\n\r\n\t/**\r\n\t * 更新颜色\r\n\t * @private\r\n\t */\r\n\tprivate updateColor() {\r\n\t\tthis.color = this.item.color;\r\n\t}\r\n\r\n\t/**\r\n\t * 更新透明度\r\n\t * @private\r\n\t */\r\n\tprivate updateOpacity() {\r\n\t\tthis.skeletonNode.opacity = this.item.opacity;\r\n\t\tthis.shadowNode.opacity = this.item.opacity;\r\n\t\tif (this.hpBar) this.hpBar.node.opacity = this.item.opacity;\r\n\t}\r\n\r\n\t/**\r\n\t * TODO: 更新动画\r\n\t * @private\r\n\t */\r\n\tprivate updateAnimation() {\r\n\t\tswitch (this.item.state) {\r\n\t\t\tcase BattlerState.Idle:\r\n\t\t\t\tif (this.skeleton.animation == \"stand\") return;\r\n\t\t\t\tthis.setAnimation(\"stand\", true);\r\n\t\t\t\treturn;\r\n\t\t\tcase BattlerState.Dead:\r\n\t\t\t\tthis.setAnimation(null, false);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tthis.updateNormalAnimation();\r\n\t\tlet anim = this.item.animation;\r\n\t\tif (!anim) return;\r\n\t\tthis.setAnimation(anim);\r\n\t}\r\n\r\n\tprivate updateNormalAnimation() {\r\n\t\tlet times = this.item.normalAnimationTimes;\r\n\t\tthis.item.normalAnimations.forEach((a, i) =>\r\n\t\t\tthis.battle.playNormalAnimation(a, times[i],\r\n\t\t\t\tthis.node.x + this.skeletonNode.x,\r\n\t\t\t\tthis.node.y + this.skeletonNode.y + this.skeletonNode.height * this.heroScale / 2,\r\n\t\t\t\t\t  this.camp));\r\n\t}\r\n\r\n\tprivate setAnimation(name: string, loop: boolean = false){\r\n\t\tthis.skeleton.clearTracks();\r\n\t\tif (!name) return;\r\n\t\tthis.skeleton.setAnimation(0, name, loop);\r\n\t}\r\n\r\n\t@property(Prefab)\r\n\tpublic hit: Prefab = null;\r\n\r\n\t/**\r\n\t * TODO: 更新结果显示\r\n\t * @private\r\n\t */\r\n\tprivate updateResult() {\r\n\t\tlet result = this.item.result;\r\n\t\tif (!result) return;\r\n\t\tif(result.hpDamage >= 0)\r\n\t\t\tthis.showDamage(result);\r\n\t}\r\n\r\n\tprivate showDamage(result: Result){\r\n\t\tlet node = cc.instantiate(this.hit);\r\n\t\tnode.parent = this.node.parent;\r\n\t\tlet component = node.getComponent(HitDamage);\r\n\t\tcomponent.setValue(result.hpDamage);\r\n\t\tif (result.isCritical) component.setType(HitType.Critical);\r\n\t\tif (result.isMiss) component.setType(HitType.Miss);\r\n\t\tcomponent.setPosition(this.node.x + this.skeletonNode.x, this.node.y + this.skeletonNode.y + this.skeletonNode.height * this.heroScale);\r\n\t\t// component.setRange(this.skeletonNode.width * this.heroScale * 0.7, this.skeletonNode.height * this.heroScale * 0.7);\r\n\t}\r\n\r\n\t/**\r\n\t * 尺寸适配\r\n\t * @private\r\n\t */\r\n\tprivate sizeFilter() {\r\n\t\tthis.skeleton.node.scaleX = this.heroScale;\r\n\t\tthis.skeleton.node.scaleY = this.heroScale;\r\n\t\tthis.skeleton.node.y = - this.skeleton.node.height * this.heroScale / 3;\r\n\t\tif (this.shadowNode) {\r\n\t\t\tthis.shadowNode.active = true;\r\n\t\t\tthis.shadowNode.y = - this.skeleton.node.height * this.heroScale / 3;\r\n\t\t\tthis.shadowNode.scale = this.skeleton.node.height * this.heroScale / this.shadowNode.width / 2;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 更新血条\r\n\t * @private\r\n\t */\r\n\tprivate updateHp() {\r\n\t\tif (!this.hpBar) return;\r\n\t\tif (!this.skeleton.skeletonData) {\r\n\t\t\tthis.hpBar.node.active = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.hpBar.node.y = 20 + this.skeletonNode.height / 2 * this.skeletonNode.scaleY;\r\n\t\tthis.hpBar.node.active = true;\r\n\t\tthis.hpBar.node.scaleX = this.flip ? 1 : -1;\r\n\t\tthis.hpBar.progress = cc.misc.lerp(this.hpBar.progress, this.item.hp / this.item.mhp, 0.1);\r\n\t}\r\n\r\n\tprivate itemList: Battler[] = [];\r\n\r\n\tprivate updateItemList() {\r\n\t\tif (this.item.isDead) {\r\n\t\t\tthis.itemList.shift();\r\n\t\t\tif (this.itemList[0])\r\n\t\t\t\tthis.setItem(this.itemList[0]);\r\n\t\t}\r\n\t}\r\n\r\n\taddItem(battler: Battler) {\r\n\t\tthis.node.active = true;\r\n\t\tthis.itemList.push(battler);\r\n\t\tif (this.itemList.length == 1) this.setItem(battler);\r\n\t}\r\n\r\n\tclearItems() {\r\n\t\tthis.itemList = [];\r\n\t\tthis.node.active = false;\r\n\t}\r\n\r\n\t// endregion\r\n\r\n}\r\n\r\nimport {heroMgr} from \"../../HeroModule/Managers/HeroManager\";\r\nimport {Battler, BattlerState, IEntity, Position} from \"../Data/Battler\";\r\nimport {Result} from \"../Data/Result\";\r\n\r\n// import BattleDisplay from \"./BattleDisplay\";\r\n","import {BaseData, field, PK, pkType} from \"../../CoreModule/Data/BaseData\";\r\nimport SkeletonData = sp.SkeletonData;\r\nimport Vec2 = cc.Vec2;\r\nimport Color = cc.Color;\r\n\r\nimport {Action, IBattlerInfo} from \"./Action\";\r\nimport {MathUtils} from \"../../../Utils/MathUtils\";\r\nimport {createProcessor, MotionProcessor} from \"../Utils/MotionProcessor\";\r\nimport {Vec1} from \"../Utils/Vec1\";\r\nimport {Result} from \"./Result\";\r\nimport {Part} from \"../../HeroModule/Data/Part\";\r\n\r\nimport {Battle} from \"./Battle\";\r\nimport {PartAttackId, Skill, skillRepo} from \"../../HeroModule/Data/Skill\";\r\nimport {\r\n\tAttackMotionGroupId, BossEnterMotionGroupId,\r\n\tDieMotionGroupId,\r\n\tEnterMotionGroupId,\r\n\tMotionGroup,\r\n\tmotionGroupRepo\r\n} from \"./MotionGroup\";\r\nimport {Enemy, enemyRepo, EnemyType} from \"../../CopyModule/Data/Enemy\";\r\n\r\nexport enum BonusParamType {\r\n\tATK = 1, DEF, Gold, AVO\r\n}\r\n\r\nexport interface IEntity {\r\n\tnftId?: string\r\n\tid?: number\r\n\r\n\tbattleLevel: number\r\n\tbattleParams: number[];\r\n\r\n\trestraint: RestraintType;\r\n\r\n\tparts?: Part[];\r\n\tskeleton: SkeletonData;\r\n}\r\n\r\nexport enum BattlerState {\r\n\tHidden, // 隐藏状态\r\n\tEntering, // 进场状态\r\n\tIdle, // 空闲\r\n\tActing, // 行动中\r\n\tFrozen, // 冻结中（被攻击）\r\n\tDying, // 死亡中\r\n\tDead // 死亡\r\n}\r\n\r\ntype PositionOriginType = \"self\" | \"target\";\r\n\r\nexport type Position = {\r\n\torigin: PositionOriginType;\r\n\toffset: Vec2;\r\n}\r\n\r\ntype MotionInfo = {\r\n\tmotion: MotionGroup\r\n\taction?: Action\r\n\tisResult?: boolean\r\n\tplayed?: boolean\r\n\tonStart?: Function\r\n\tonFinish?: Function\r\n}\r\n\r\nconst PartAniTag = \"$\";\r\n\r\nexport class SkillInfo extends BaseData {\r\n\r\n\t// region 基本属性\r\n\r\n\t@field\r\n\tpublic level: number = 1; // 技能等级\r\n\t@field\r\n\tpublic skillId: number = -1;\r\n\t@field\r\n\tpublic useCount: number = 0;\r\n\t@field\r\n\tpublic boostCount: number = 0;\r\n\t@field\r\n\tpublic lastTime: number = -1; // 上次使用时间\r\n\r\n\tpublic battler: Battler;\r\n\r\n\t// endregion\r\n\r\n\t// region 初始化\r\n\r\n\tconstructor(index?, parent?) {\r\n\t\tsuper(index);\r\n\t\tthis.battler = parent;\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 真实属性/数据\r\n\r\n\t/**\r\n\t * 技能\r\n\t */\r\n\tpublic get skill(): Skill {\r\n\t\treturn skillRepo().getById(this.skillId);\r\n\t}\r\n\r\n\t/**\r\n\t * 加速花费金钱\r\n\t */\r\n\tpublic get boostCost() { return this.skill.boostCost; }\r\n\r\n\t/**\r\n\t * 实际冻结时间\r\n\t */\r\n\tpublic get freezeTime() { return this.skill.freezeTime; }\r\n\r\n\t/**\r\n\t * 已经冻结了的时间\r\n\t */\r\n\tpublic get frozenTime() {\r\n\t\treturn this.battler.elapsedTime - this.lastTime\r\n\t}\r\n\r\n\t/**\r\n\t * 效果\r\n\t */\r\n\tpublic effects() {\r\n\t\treturn this.skill.effects.map(e => e.applyLevel(this.level));\r\n\t}\r\n\r\n\t/**\r\n\t * 特性\r\n\t */\r\n\tpublic traits() {\r\n\t\treturn this.skill.traits.map(t => t.applyLevel(this.level));\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 判定\r\n\r\n\t/**\r\n\t * 加速条件\r\n\t */\r\n\tpublic boostConditions() {\r\n\t\treturn ConditionGroup.create(\r\n\t\t\tcGte(ConditionType.Gold, this.boostCost)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * 能否使用\r\n\t */\r\n\tpublic get isUsable() {\r\n\t\tif (this.skill.freezeTime <= 0) return true;\r\n\t\treturn this.frozenTime / this.freezeTime >= 1;\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 操作\r\n\r\n\t/**\r\n\t * 加速\r\n\t */\r\n\tpublic boost() {\r\n\t\tthis.boostCount++;\r\n\t\tthis.lastTime = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 使用\r\n\t */\r\n\tpublic use() {\r\n\t\tif (!this.isUsable) return false;\r\n\t\tthis.lastTime = Date.now();\r\n\t\tthis.useCount++;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 测试\r\n\r\n\tpublic static testData(skill: Skill) {\r\n\t\tconst res = new SkillInfo();\r\n\t\tres.skillId = skill.id;\r\n\t\tres.level = 1;\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t// endregion\r\n\r\n}\r\n\r\nexport class Battler extends BaseData implements IBattlerInfo {\r\n\r\n\t// region 基本属性\r\n\r\n\t@field(String)\r\n\tpublic nftId?: string; // 英雄NFTID\r\n\t@field(Number)\r\n\tpublic enemyId?: number; // 怪物索引\r\n\t@field(Number)\r\n\tpublic enemyLevel?: number; // 怪物等级\r\n\r\n\t@field\r\n\tpublic camp: number = 0; // 阵营（左右两个阵营）\r\n\t@field\r\n\tpublic pos: number = 0; // 站位\r\n\r\n\t@field\r\n\tpublic hp: number = 0;\r\n\t@field([Number])\r\n\tpublic params: number[] = [];\r\n\t@field([Number])\r\n\tpublic bonusParams: number[] = [];\r\n\t// @field([BattlerStatus])\r\n\t// public statuses: BattlerStatus[] = [];\r\n\r\n\t@field([SkillInfo])\r\n\tpublic skills: SkillInfo[] = [];\r\n\r\n\t@field\r\n\tpublic state: BattlerState = BattlerState.Hidden;\r\n\r\n\tpublic battle: Battle;\r\n\tpublic entity: IEntity;\r\n\r\n\t// endregion\r\n\r\n\t// region 渲染参数\r\n\r\n\t/**\r\n\t * 位置\r\n\t */\r\n\tpublic startPos: Position = {\r\n\t\torigin: \"self\", offset: Vec2.ZERO\r\n\t}\r\n\tpublic targetPos: Position = {\r\n\t\torigin: \"self\", offset: Vec2.ZERO\r\n\t}\r\n\tpublic posRate: Vec1 = Vec1.ONE; // 0 -> pos, 1 -> targetPos\r\n\tpublic shakePos: Vec2 = Vec2.ZERO;\r\n\tpublic z: number = 0; // 高度（计算跳跃用）\r\n\r\n\t/**\r\n\t * 缩放\r\n\t */\r\n\tpublic scale: Vec2 = Vec2.ONE;\r\n\r\n\t/**\r\n\t * 旋转\r\n\t */\r\n\tpublic angle: Vec1 = Vec1.ZERO;\r\n\r\n\t/**\r\n\t * 颜色\r\n\t */\r\n\tpublic color: Color = Color.WHITE;\r\n\r\n\t/**\r\n\t * 透明度\r\n\t */\r\n\tpublic opacity: number = 255;\r\n\r\n\t/**\r\n\t * 需要播放的动画\r\n\t */\r\n\tprivate _animation: string;\r\n\tpublic get animation() {\r\n\t\tconst res = this._animation;\r\n\t\tthis._animation = null;\r\n\t\treturn res;\r\n\t}\r\n\tpublic set animation(val) {\r\n\t\tthis._animation = val;\r\n\t}\r\n\tprivate _normalAnimations: string[] = [];\r\n\tpublic get normalAnimations() {\r\n\t\tconst res = this._normalAnimations;\r\n\t\tthis._normalAnimations = [];\r\n\t\treturn res;\r\n\t}\r\n\tpublic set normalAnimations(val) {\r\n\t\t// @ts-ignore\r\n\t\tthis._normalAnimations.push(val); // 实际的逻辑并非set，而是add\r\n\t}\r\n\tprivate _normalAnimationTimes: number[] = [];\r\n\tpublic get normalAnimationTimes() {\r\n\t\tconst res = this._normalAnimationTimes;\r\n\t\tthis._normalAnimationTimes = [];\r\n\t\treturn res;\r\n\t}\r\n\tpublic set normalAnimationTimes(val) {\r\n\t\t// @ts-ignore\r\n\t\tthis._normalAnimationTimes.push(val); // 实际的逻辑并非set，而是add\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 初始化\r\n\r\n\tconstructor(index?, parent?) {\r\n\t\tsuper(index);\r\n\t\tthis.battle = parent;\r\n\t}\r\n\r\n\tonCreated() {\r\n\t\tsuper.onCreated();\r\n\t\tthis.refreshEntity();\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 基本数据获取\r\n\r\n\t/**\r\n\t * 接口实现\r\n\t */\r\n\tpublic get battler() { return this; }\r\n\tpublic get opponents() { return this.battle?.getOpponents(this); }\r\n\r\n\t/**\r\n\t * 是否为Hero\r\n\t */\r\n\tpublic get isHero() { return !!this.nftId }\r\n\r\n\t/**\r\n\t * 是否为敌人\r\n\t */\r\n\tpublic get isEnemy() { return !!this.enemyId }\r\n\r\n\t/**\r\n\t * 英雄\r\n\t */\r\n\tpublic hero(): Hero {\r\n\t\treturn this.nftId && heroMgr().getCacheOneFromServer(this.nftId);\r\n\t}\r\n\r\n\t/**\r\n\t * 敌人\r\n\t */\r\n\tpublic enemy(): Enemy {\r\n\t\treturn this.enemyId && enemyRepo().getById(this.enemyId);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取单个技能\r\n\t */\r\n\tpublic skill(skillId: number) {\r\n\t\treturn this.skills.find(s => s.skillId == skillId);\r\n\t}\r\n\r\n\t/**\r\n\t * 所有特性\r\n\t */\r\n\tpublic traits() {\r\n\t\tconst res = new TraitGroup();\r\n\t\tthis.skills.forEach(s => res.add(...s.traits()));\r\n\t\treturn res;\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 状态机\r\n\r\n\t/**\r\n\t * 状态定义\r\n\t */\r\n\tpublic get isHidden() { return this.state == BattlerState.Hidden; }\r\n\tpublic get isEntering() { return this.state == BattlerState.Entering; }\r\n\tpublic get isIdle() { return this.state == BattlerState.Idle; }\r\n\tpublic get isActing() { return this.state == BattlerState.Acting; }\r\n\tpublic get isFrozen() { return this.state == BattlerState.Frozen; }\r\n\tpublic get isDying() { return this.state == BattlerState.Dying; }\r\n\tpublic get isDead() { return this.state == BattlerState.Dead; }\r\n\r\n\t// endregion\r\n\r\n\t// region 属性控制\r\n\r\n\tpublic get level() {\r\n\t\tconst level = this.entity.battleLevel\r\n\t\treturn this.isEnemy ? this.enemyLevel * level : level;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取属性\r\n\t */\r\n\tpublic param(index: ParamType) {\r\n\t\tlet res = this.params[index] || 0;\r\n\t\tswitch (index) {\r\n\t\t\tcase ParamType.ATK:\r\n\t\t\t\tres *= this.battle.campBonusParam(\r\n\t\t\t\t\tthis.camp, BonusParamType.ATK); break;\r\n\t\t\tcase ParamType.DEF:\r\n\t\t\t\tres *= this.battle.campBonusParam(\r\n\t\t\t\t\tthis.camp, BonusParamType.DEF); break;\r\n\t\t\tcase ParamType.AVO:\r\n\t\t\t\tres += this.bonusParam(BonusParamType.AVO) - 1;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 附加属性\r\n\t */\r\n\tpublic bonusParam(index: BonusParamType) {\r\n\t\tlet res = this.bonusParams[index] || 1;\r\n\t\tres += this.traitBonusParam(index);\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 特性属性\r\n\t */\r\n\tpublic traitBonusParam(index: BonusParamType) {\r\n\t\treturn this.traits().filter(TraitType.BonusParam).sum(0, index);\r\n\t}\r\n\r\n\t/**\r\n\t * 属性快速访问\r\n\t */\r\n\tpublic get cp() { return this.param(ParamType.CP) }\r\n\tpublic get cpb() { return this.param(ParamType.CPB) }\r\n\tpublic get hid() { return this.param(ParamType.HID) }\r\n\tpublic get pow() { return this.param(ParamType.POW) }\r\n\tpublic get agi() { return this.param(ParamType.AGI) }\r\n\tpublic get int() { return this.param(ParamType.INT) }\r\n\tpublic get powb() { return this.param(ParamType.POWB) }\r\n\tpublic get agib() { return this.param(ParamType.AGIB) }\r\n\tpublic get intb() { return this.param(ParamType.INTB) }\r\n\tpublic get atk() { return this.param(ParamType.ATK) }\r\n\tpublic get cri() { return this.param(ParamType.CRI) }\r\n\tpublic get dmg() { return this.param(ParamType.DMG) }\r\n\tpublic get atkb() { return this.param(ParamType.ATKB) }\r\n\tpublic get crib() { return this.param(ParamType.CRIB) }\r\n\tpublic get dmgb() { return this.param(ParamType.DMGB) }\r\n\tpublic get def() { return this.param(ParamType.DEF) }\r\n\tpublic get avo() { return this.param(ParamType.AVO) }\r\n\tpublic get eva() { return this.param(ParamType.EVA) }\r\n\tpublic get defb() { return this.param(ParamType.DEFB) }\r\n\tpublic get avob() { return this.param(ParamType.AVOB) }\r\n\tpublic get evab() { return this.param(ParamType.EVAB) }\r\n\tpublic get mhp() { return this.param(ParamType.MHP) }\r\n\tpublic get spd() { return this.param(ParamType.SPD) }\r\n\tpublic get hit() { return this.param(ParamType.HIT) }\r\n\tpublic get mhpb() { return this.param(ParamType.MHPB) }\r\n\tpublic get spdb() { return this.param(ParamType.SPDB) }\r\n\tpublic get hitb() { return this.param(ParamType.HITB) }\r\n\tpublic get ab1() { return this.param(ParamType.AB1) }\r\n\tpublic get ab2() { return this.param(ParamType.AB2) }\r\n\tpublic get ab3() { return this.param(ParamType.AB3) }\r\n\tpublic get ab4() { return this.param(ParamType.AB4) }\r\n\tpublic get bp() { return this.param(ParamType.BP) }\r\n\tpublic get bpb() { return this.param(ParamType.BPB) }\r\n\r\n\tpublic get isHPDead() { return this.hp <= 0; }\r\n\r\n\t/**\r\n\t * 添加HP\r\n\t */\r\n\tpublic addHP(val) {\r\n\t\tthis.hp += val;\r\n\t\tthis.refreshHp();\r\n\t}\r\n\r\n\t/**\r\n\t * 重置HP\r\n\t */\r\n\tpublic resetHp() {\r\n\t\tthis.hp = this.mhp;\r\n\t}\r\n\r\n\t/**\r\n\t * 死亡判定\r\n\t */\r\n\tpublic judgeDie() {\r\n\t\tif (!this.isDead && !this.isDying && this.isHPDead) this.die();\r\n\t}\r\n\r\n\t/**\r\n\t * 死亡\r\n\t */\r\n\tpublic die() {\r\n\t\tthis.addMotion(DieMotionGroupId,\r\n\t\t\tthis.onDie.bind(this), this.onDead.bind(this));\r\n\t}\r\n\r\n\t/**\r\n\t * 死亡开始回调\r\n\t */\r\n\tpublic onDie() {\r\n\t\tthis.state = BattlerState.Dying;\r\n\t}\r\n\r\n\t/**\r\n\t * 死亡回调\r\n\t */\r\n\tpublic onDead() {\r\n\t\tthis.state = BattlerState.Dead;\r\n\t\tthis.battle.enterNextBattler(this);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 进场控制\r\n\r\n\t/**\r\n\t * 入场\r\n\t */\r\n\tpublic enter() {\r\n\t\tif (!this.isHidden) return;\r\n\r\n\t\tthis.state = BattlerState.Entering;\r\n\t}\r\n\r\n\t/**\r\n\t * 进入完成回调\r\n\t * @private\r\n\t */\r\n\tprivate onEntered() {\r\n\t\tthis.state = BattlerState.Idle\r\n\t}\r\n\r\n\t/**\r\n\t * 更新进场动画\r\n\t */\r\n\tprivate updateEntering() {\r\n\t\t// 如果处于Entering状态，且当前没有动作\r\n\t\tif (this.isEntering && !this.motion)\r\n\t\t\tthis.addMotion(this.isEnemy && this.enemy().type == EnemyType.Boss ? BossEnterMotionGroupId : EnterMotionGroupId,\r\n\t\t\t\tnull, this.onEntered.bind(this));\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 行动控制\r\n\r\n\t/**\r\n\t * 当前行动\r\n\t */\r\n\tpublic action: Action = null;\r\n\r\n\t/**\r\n\t * 属性\r\n\t */\r\n\tpublic get subject() { return this.action?.subject.battler; }\r\n\tpublic get target() { return this.action?.target.battler; }\r\n\tpublic get isSubject() { return this == this.subject; }\r\n\tpublic get isTarget() { return this == this.target; }\r\n\r\n\t/**\r\n\t * 能否执行Action\r\n\t */\r\n\tpublic get canInvokeAction() { return this.isIdle; }\r\n\r\n\t/**\r\n\t * 输入行动\r\n\t */\r\n\tpublic inputAction(target?: IBattlerInfo,\r\n\t\t\t\t\t\t\t\t\t\t skill?: SkillInfo, time?: number) {\r\n\t\ttarget ||= this.generateTarget();\r\n\t\tskill ||= this.generateSkill();\r\n\r\n\t\treturn this.battle.addAction(this, target, skill, time);\r\n\t}\r\n\tprivate generateTarget() {\r\n\t\treturn MathUtils.randomPick(this.opponents);\r\n\t}\r\n\tprivate generateSkill() {\r\n\t\tfor (const skill of this.skills)\r\n\t\t\tif (skill.isUsable) return skill;\r\n\t\treturn this.skills[this.skills.length - 1];\r\n\t}\r\n\r\n\t/**\r\n\t * 执行行动\r\n\t */\r\n\tpublic invokeAction(action: Action) {\r\n\t\tif (!this.canInvokeAction) return;\r\n\t\tthis.action = action;\r\n\t\taction.apply();\r\n\r\n\t\tconst skill = action.skill;\r\n\t\tif (skill.subjectMotionId == PartAttackId) {\r\n\t\t\tif (this.isHero) {\r\n\t\t\t\tlet weapon = (this.entity as Hero).weaponPart;\r\n\t\t\t\tlet motion = weapon ? weapon.attackMotionId : AttackMotionGroupId;\r\n\t\t\t\tthis.addMotion(motion,\r\n\t\t\t\t\tthis.onActionStart.bind(this),\r\n\t\t\t\t\tthis.onActionEnd.bind(this), action);\r\n\t\t\t}\r\n\t\t\tif (this.isEnemy) this.addMotion(this.enemy().attackMotionId,\r\n\t\t\t\t\t\t\t\tthis.onActionStart.bind(this),\r\n\t\t\t\t\t\t\t\tthis.onActionEnd.bind(this), action);\r\n\t\t}\r\n\t\telse\r\n\t\t\tthis.addMotion(skill.subjectMotionId,\r\n\t\t\t\tthis.onActionStart.bind(this),\r\n\t\t\t\tthis.onActionEnd.bind(this), action);\r\n\t}\r\n\r\n\t/**\r\n\t * 更新所有行动\r\n\t */\r\n\t// public updateAction() {\r\n\t// \t// 如果所有人的动作都结束了，行动结束\r\n\t// \tif (this.isActing &&\r\n\t// \t\tthis.isMotionsFinished &&\r\n\t// \t\tthis.target.isMotionsFinished)\r\n\t// \t\tthis.onActionEnd();\r\n\t// }\r\n\r\n\t/**\r\n\t * 行动结束\r\n\t */\r\n\tprotected onActionStart() {\r\n\t\tthis.state = BattlerState.Acting;\r\n\t}\r\n\r\n\t/**\r\n\t * 行动结束\r\n\t */\r\n\tprotected onActionEnd() {\r\n\t\tthis.state = BattlerState.Idle;\r\n\t\tthis.action = null;\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 结果控制\r\n\r\n\t/**\r\n\t * 要显示的结果\r\n\t */\r\n\tprivate _result: Result;\r\n\tpublic get result() {\r\n\t\tconst res = this._result;\r\n\t\tthis._result = null;\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 能否应用结果\r\n\t */\r\n\tpublic get canApplyResult() { return this.isIdle; }\r\n\r\n\t/**\r\n\t * 显示结果\r\n\t */\r\n\tprivate processResult(result: Result) {\r\n\r\n\t\t// 处理结果\r\n\t\tthis.addHP(-result.hpDamage);\r\n\t\tthis.addHP(result.hpRecover);\r\n\t\tthis.addHP(-result.hpDrain);\r\n\r\n\t\tresult.action.subjectBattler.addHP(result.hpDrain);\r\n\r\n\t\tthis.refresh();\r\n\t}\r\n\r\n\t/**\r\n\t * 应用结果\r\n\t * @param action\r\n\t */\r\n\tpublic applyResult(action: Action) {\r\n\t\tif (!this.canApplyResult || action.result.isMiss)\r\n\t\t\tthis.showResult(action.result);\r\n\t\telse\r\n\t\t\tthis.addMotion(action.skill.targetMotionId,\r\n\t\t\t\tthis.onResultApply.bind(this),\r\n\t\t\t\tthis.onResultEnd.bind(this),\r\n\t\t\t\taction, true);\r\n\t}\r\n\r\n\t/**\r\n\t * 显示结果\r\n\t */\r\n\tpublic showResult(result: Result) {\r\n\t\tthis.processResult(this._result = result);\r\n\t\tthis.judgeDie();\r\n\t}\r\n\r\n\t/**\r\n\t * 结果执行回调\r\n\t */\r\n\tprivate onResultApply() {\r\n\t\tthis.state = BattlerState.Frozen;\r\n\t}\r\n\r\n\t/**\r\n\t * 结果执行结束回调\r\n\t */\r\n\tprivate onResultEnd() {\r\n\t\tthis.state = BattlerState.Idle;\r\n\t}\r\n\r\n\t/**\r\n\t * 更新结果\r\n\t */\r\n\t// public updateResult() {\r\n\t// \tif (this.isFrozen && this.isMotionsFinished)\r\n\t// \t\tthis.state = BattlerState.Idle;\r\n\t// }\r\n\r\n\t// endregion\r\n\r\n\t// region 动作控制\r\n\r\n\t/**\r\n\t * 动作序列\r\n\t */\r\n\tpublic motions: MotionInfo[] = [];\r\n\tpublic get motion() { return this.motions[0]; }\r\n\r\n\t/**\r\n\t * 当前未开始播放的动作\r\n\t */\r\n\tpublic get curMotion() {\r\n\t\treturn this.motion?.played ? null : this.motion;\r\n\t}\r\n\r\n\t/**\r\n\t * 动作处理器\r\n\t */\r\n\tpublic motionProcessors: MotionProcessor[] = [];\r\n\r\n\t/**\r\n\t * 辅助变量\r\n\t */\r\n\tprivate motionEndTime: number;\r\n\tprivate preparingMotion: boolean = false;\r\n\r\n\t/**\r\n\t * 战场时间\r\n\t */\r\n\tpublic get elapsedTime() { return this.battle.elapsedTime; }\r\n\r\n\t/**\r\n\t * 是否所有动作都完成了\r\n\t */\r\n\tpublic get isMotionsFinished() {\r\n\t\treturn !this.preparingMotion && !this.motion;\r\n\t\t// this.motionProcessors.every(\r\n\t\t// \tp => this.elapsedTime >= p.endTime\r\n\t\t// );\r\n\t\t// this.elapsedTime >= this.motionEndTime;\r\n\t}\r\n\r\n\t/**\r\n\t * 当前动作是否播放完成\r\n\t */\r\n\tpublic get isCurMotionFinished() {\r\n\t\treturn this.elapsedTime >= this.motionEndTime;\r\n\t\t// this.motionProcessors.every(\r\n\t\t// \tp => this.elapsedTime >= p.endTime\r\n\t\t// );\r\n\t}\r\n\r\n\t/**\r\n\t * 添加动作\r\n\t */\r\n\tpublic addMotion(id: number,\r\n\t\t\t\t\t\t\t\t\t onStart?: Function,\r\n\t\t\t\t\t\t\t\t\t onFinish?: Function,\r\n\t\t\t\t\t\t\t\t\t action?: Action,\r\n\t\t\t\t\t\t\t\t\t isResult: boolean = false) {\r\n\t\treturn this.motions.push({\r\n\t\t\tmotion: motionGroupRepo().getById(id),\r\n\t\t\tonStart, onFinish, action, isResult\r\n\t\t});\r\n\t}\r\n\t// public addMotion(id: number,\r\n\t// \t\t\t\t\t\t\t\t state?: BattlerState,\r\n\t// \t\t\t\t\t\t\t\t action?: Action,\r\n\t// \t\t\t\t\t\t\t\t isResult: boolean = false) {\r\n\t// \treturn new Promise(resolve => {\r\n\t// \t\tthis.preparingMotion = true;\r\n\t// \t\tthis.motions.push({\r\n\t// \t\t\tmotion: motionGroupRepo().getById(id),\r\n\t// \t\t\tstate, action, isResult,\r\n\t// \t\t\tonFinished: resolve\r\n\t// \t\t})\r\n\t// \t\tthis.preparingMotion = false;\r\n\t// \t})\r\n\t// }\r\n\r\n\t/**\r\n\t * 播放动作\r\n\t */\r\n\tprivate playMotion(motion: MotionInfo) {\r\n\t\tthis.motionProcessors = motion.motion.motions\r\n\t\t\t.map(m => createProcessor(this, m,\r\n\t\t\t\tmotion.action, motion.isResult));\r\n\r\n\t\tthis.scheduleMotions();\r\n\t\tthis.onMotionStart(motion);\r\n\r\n\t\t// this.motionEndTime = this.calcMotionEndTime(motion.motion);\r\n\t}\r\n\r\n\t/**\r\n\t * 添加行动\r\n\t */\r\n\t// public playMotions(motions: Motion[], action?: Action,\r\n\t// \t\t\t\t\t\t\t\t\t isResult: boolean = false) {\r\n\t// \taction ||= this.action;\r\n\t// \tthis.motionProcessors = motions\r\n\t// \t\t.map(m => createProcessor(this, action, m, isResult))\r\n\t// \t\t.filter(p => !!p);\r\n\t//\r\n\t// \tthis.scheduleMotions();\r\n\t// }\r\n\r\n\t/**\r\n\t * 调度动作\r\n\t */\r\n\tprivate scheduleMotions() {\r\n\t\tlet startTime = this.elapsedTime;\r\n\t\tlet endTime = this.elapsedTime;\r\n\r\n\t\tfor (const processor of this.motionProcessors) {\r\n\t\t\tconst playType = processor.motion.playType;\r\n\t\t\tif (playType == 'after') startTime = endTime;\r\n\r\n\t\t\tprocessor.startTime = startTime + processor.motion.offset;\r\n\t\t\tendTime = Math.max(endTime, processor.totalEndTime);\r\n\t\t}\r\n\t\tthis.motionEndTime = endTime;\r\n\t}\r\n\r\n\t/**\r\n\t * 更新动作\r\n\t */\r\n\tprivate updateMotions() {\r\n\t\tif (!this.motion) return;\r\n\r\n\t\t// 如果当前motion还没开始播放\r\n\t\tif (!this.motion.played)\r\n\t\t\tthis.playMotion(this.motion);\r\n\t\t// 如果已经播放完毕\r\n\t\telse if (this.isCurMotionFinished)\r\n\t\t\tthis.onMotionFinish(this.motion);\r\n\r\n\t\tthis.motionProcessors.forEach(p => p.update());\r\n\r\n\t\t// if (!this.isCurMotionFinished) return;\r\n\t\t// if (this.motion.played)\r\n\t\t// \tthis.onMotionFinish(this.motion);\r\n\t\t// else\r\n\t\t// \tthis.playMotion(this.motion);\r\n\t}\r\n\r\n\t/**\r\n\t * 行动完成回调\r\n\t */\r\n\tprivate onMotionStart(motion: MotionInfo) {\r\n\t\tmotion.onStart && motion.onStart();\r\n\t\tmotion.played = true;\r\n\t}\r\n\r\n\t/**\r\n\t * 行动完成回调\r\n\t */\r\n\tprivate onMotionFinish(motion: MotionInfo) {\r\n\t\tmotion.onFinish && motion.onFinish();\r\n\t\tthis.motions.shift();\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 刷新\r\n\r\n\t/**\r\n\t * 刷新数据\r\n\t */\r\n\tpublic refresh() {\r\n\t\tthis.refreshEntity();\r\n\t\tthis.refreshParams();\r\n\t\tthis.refreshHp();\r\n\t}\r\n\r\n\t/**\r\n\t * 刷新Entity\r\n\t */\r\n\tprivate refreshEntity() {\r\n\t\tif (this.isHero) this.entity = this.hero();\r\n\t\tif (this.isEnemy) this.entity = this.enemy();\r\n\t}\r\n\r\n\t/**\r\n\t * 刷新属性\r\n\t */\r\n\tprivate refreshParams() {\r\n\t\tthis.params = this.entity.battleParams.slice(0);\r\n\t\t// TODO: 根据具体情况设置属性\r\n\t\tif (this.isEnemy) {\r\n\t\t\tthis.params[ParamType.ATK] *= this.enemyLevel;\r\n\t\t\tthis.params[ParamType.MHP] *= this.enemyLevel;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 刷新HP\r\n\t * @private\r\n\t */\r\n\tprivate refreshHp() {\r\n\t\tthis.hp = MathUtils.clamp(this.hp, 0, this.mhp);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 更新控制\r\n\r\n\tpublic update() {\r\n\t\tthis.updateMotions();\r\n\t\tthis.updateEntering();\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 测试\r\n\r\n\t/**\r\n\t * 生成测试数据\r\n\t */\r\n\tpublic static testData(camp, index, nftId?, enemyId?) {\r\n\t\tconst res = new Battler();\r\n\r\n\t\tres.camp = camp;\r\n\t\tres.pos = index;\r\n\t\tres.nftId = nftId;\r\n\t\tres.enemyId = enemyId;\r\n\r\n\t\tconst skill = skillRepo().normalAttack();\r\n\t\tconst sInfo = SkillInfo.testData(skill);\r\n\r\n\t\tres.skills.push(sInfo);\r\n\t\tsInfo.battler = res;\r\n\r\n\t\tres.enter();\r\n\t\tres.refreshEntity();\r\n\r\n\t\t// TODO: 生成一些随机数据\r\n\t\tres.entity.battleParams = [10, 125, 10, 5];\r\n\t\tres.refresh();\r\n\t\tres.resetHp();\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t// endregion\r\n\r\n}\r\n\r\nimport {Hero, RestraintType} from \"../../HeroModule/Data/Hero\";\r\nimport {heroMgr} from \"../../HeroModule/Managers/HeroManager\";\r\nimport {ParamType} from \"../../HeroModule/Data/Param\";\r\nimport {cGte, ConditionGroup, ConditionType} from \"../../PlayerModule/Data/Condition\";\r\nimport {TraitGroup, TraitType} from \"./Trait\";\r\n","import {BaseData, dataPK, field, PK, pkType} from \"../../CoreModule/Data/BaseData\";\r\nimport {Reward} from \"../../PlayerModule/Data/Reward\";\r\nimport {Battler, BonusParamType, SkillInfo} from \"./Battler\";\r\nimport {Action, BattlerInfo, IBattlerInfo} from \"./Action\";\r\nimport {DynamicData} from \"../../CoreModule/Data/DynamicData\";\r\n\r\nexport enum BattleType {\r\n\tMain, PVP, Copy, Boss\r\n}\r\n\r\nexport enum BattleState {\r\n\tNotStarted, Starting,\r\n\tIdle, Acting, Ending, Ended\r\n}\r\n\r\nexport const PlayerCamp = 0;\r\nexport const EnemyCamp = 1;\r\nexport const MainIndex = 0;\r\n\r\nexport class BattleResult extends BaseData {\r\n\r\n\t@field([Reward])\r\n\tpublic rewards: Reward[] = [];\r\n\t@field(Number)\r\n\tpublic winner: number;\r\n\r\n\tpublic battle: Battle;\r\n\r\n\tconstructor(index, parent) {\r\n\t\tsuper(index);\r\n\t\tthis.battle = parent;\r\n\t}\r\n}\r\n\r\nexport class Battle extends DynamicData {\r\n\r\n\t// region 基本属性\r\n\r\n\t@field(String) @dataPK\r\n\tpublic battleId: string;\r\n\r\n\t@field(String)\r\n\tpublic uuid: string;\r\n\r\n\t@field(Number)\r\n\tpublic type: BattleType;\r\n\r\n\t@field(Number)\r\n\tpublic copyId?: number;\r\n\t@field(Number)\r\n\tpublic level?: number;\r\n\t@field(Boolean)\r\n\tpublic isFirst?: boolean;\r\n\r\n\t@field([Battler])\r\n\tpublic battlers: Battler[] = [];\r\n\r\n\t@field([Action])\r\n\tpublic actions: Action[] = [];\r\n\r\n\t@field(BattleResult)\r\n\tpublic result: BattleResult;\r\n\r\n\t@field(Number)\r\n\tpublic createdAt: number;\r\n\t@field(Number)\r\n\tpublic endAt: number;\r\n\r\n\t// 当前ActionTime战斗者输入序列（输入指的是输入行动）\r\n\t@field([BattlerInfo])\r\n\tpublic inputtingBattlers: BattlerInfo[] = [];\r\n\t@field // 当前Action输入索引\r\n\tpublic inputIndex: number = 0;\r\n\r\n\t@field\r\n\tpublic elapsedTime: number = -1;\r\n\t@field\r\n\tpublic actionTime: number = -1;\r\n\r\n\t@field\r\n\tpublic battleAnimations: string[] = [];\r\n\tpublic getCurrentAnimations() {\r\n\t\tconst res = this.battleAnimations;\r\n\t\tthis.battleAnimations = [];\r\n\t\treturn res;\r\n\t}\r\n\t@field\r\n\tpublic battleAnimationTimes: number[] = [];\r\n\tpublic getCurrentAnimationTimes() {\r\n\t\tconst res = this.battleAnimationTimes;\r\n\t\tthis.battleAnimationTimes = [];\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 事件监听/数据生成器\r\n\t */\r\n\tpublic onActionStartListener: (Action) => void;\r\n\tpublic onActionEndListener: (Action) => void;\r\n\tpublic onBattleEndListener: (number) => void;\r\n\tpublic inputtingBattlersGenerator: (Battle?) => BattlerInfo[];\r\n\r\n\t// region 状态机\r\n\r\n\t// @field\r\n\tpublic state: BattleState = BattleState.NotStarted;\r\n\r\n\tpublic get isStarting() { return this.state == BattleState.Starting; }\r\n\tpublic get isRunning() { return this.state >= BattleState.Starting; }\r\n\tpublic get isIdle() { return this.state == BattleState.Idle; }\r\n\tpublic get isActing() { return this.state == BattleState.Acting; }\r\n\tpublic get isEnding() { return this.state == BattleState.Ending; }\r\n\tpublic get isEnded() { return this.state == BattleState.Ended; }\r\n\r\n\t// endregion\r\n\r\n\t// region 流程控制\r\n\r\n\tpublic winner: number;\r\n\r\n\t/**\r\n\t * 输入中战斗者（将要产生行动的战斗者）\r\n\t */\r\n\tpublic get inputtingBattler() {\r\n\t\treturn this.inputtingBattlers[this.inputIndex]?.battler;\r\n\t}\r\n\r\n\t/**\r\n\t * 开始战斗\r\n\t */\r\n\tpublic start() {\r\n\t\tif (this.isRunning) return;\r\n\t\tthis.elapsedTime = this.actionTime = 0;\r\n\t\tthis.state = BattleState.Starting;\r\n\t}\r\n\r\n\t/**\r\n\t * 结束战斗\r\n\t */\r\n\tpublic terminate() {\r\n\t\tif (this.isEnded) return;\r\n\t\tthis.elapsedTime = this.actionTime = -1;\r\n\t\tthis.state = BattleState.Ended;\r\n\t}\r\n\r\n\t// /**\r\n\t//  * 下一步\r\n\t//  */\r\n\t// public next() {\r\n\t// \tthis.inputIndex++;\r\n\t// }\r\n\t//\r\n\t// /**\r\n\t//  * 生成行动顺序\r\n\t//  */\r\n\t// private generateActionBattlers() {\r\n\t// \tthis.inputIndex = 0;\r\n\t// \tif (this.actionBattlersGenerator)\r\n\t// \t\tthis.inputtingBattlers = this.actionBattlersGenerator(this);\r\n\t// \telse\r\n\t// \t\tthis.inputtingBattlers = [];\r\n\t// }\r\n\r\n\t/**\r\n\t * 更新进程\r\n\t */\r\n\tprivate updateProgress() {\r\n\t\tif (this.isStarting &&\r\n\t\t\tthis.isAllBattlersIdle()) {\r\n\t\t\tthis.state = BattleState.Idle;\r\n\t\t\tthis.nextRound();\r\n\t\t}\r\n\t}\r\n\r\n\t// private updateProgress() {\r\n\t// \tif (this.isStarting) this.state = BattleState.Idle;\r\n\t// \t// if (this.isEnding) this.state = BattleState.Ended;\r\n\t// }\r\n\r\n\t/**\r\n\t * 战斗即将结束\r\n\t */\r\n\tprivate onBattleEnd(winner) {\r\n\t\tthis.state = BattleState.Ending;\r\n\t\tthis.winner = winner;\r\n\r\n\t\tif (this.onBattleEndListener)\r\n\t\t\tthis.onBattleEndListener(winner);\r\n\r\n\t\t// TODO: 处理结果\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 回合控制\r\n\r\n\t/**\r\n\t * 是否下一回合\r\n\t */\r\n\tpublic isNextRound() {\r\n\t\treturn this.inputIndex >= this.inputtingBattlers.length;\r\n\t}\r\n\r\n\t/**\r\n\t * 下一步\r\n\t */\r\n\tpublic next() {\r\n\t\tif (this.getBattlers().length <= 0) return;\r\n\r\n\t\tdo { this.inputIndex++; }\r\n\t\twhile (this.inputtingBattler && !this.inputtingBattler.isIdle);\r\n\r\n\t\tif (this.isNextRound()) {\r\n\t\t\tthis.nextRound(); this.next();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 添加回合\r\n\t */\r\n\tpublic nextRound(at = 1) {\r\n\t\tthis.setActionTime(this.actionTime + at);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置回合\r\n\t */\r\n\tpublic setActionTime(at) {\r\n\t\tif (this.actionTime == at) return;\r\n\r\n\t\tthis.actionTime = at;\r\n\t\t// 如果发生回合变化，清空actionBattlers\r\n\t\tthis.generateInputtingBattlers();\r\n\t}\r\n\r\n\t/**\r\n\t * 生成行动顺序\r\n\t */\r\n\tprivate generateInputtingBattlers() {\r\n\t\tthis.inputIndex = -1;\r\n\t\tif (this.inputtingBattlersGenerator)\r\n\t\t\tthis.inputtingBattlers = this.inputtingBattlersGenerator(this);\r\n\t\telse\r\n\t\t\tthis.inputtingBattlers = [];\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 战斗者控制\r\n\r\n\t/**\r\n\t * 获取所有存活的战斗者\r\n\t */\r\n\tpublic getBattlers() {\r\n\t\treturn this.battlers\r\n\t\t\t.filter(b => !b.isHidden && !b.isDead);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取战斗者对象\r\n\t */\r\n\tpublic getBattler(info: IBattlerInfo) {\r\n\t\treturn this.battlers.find(b =>\r\n\t\t\t!b.isHidden && !b.isDead &&\r\n\t\t\tb.camp == info.camp && b.pos == info.pos);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取指定位置的下一个战斗者\r\n\t */\r\n\tpublic getNextBattler(info: IBattlerInfo) {\r\n\t\treturn this.battlers.find(b =>\r\n\t\t\tb.isHidden && b.camp == info.camp && b.pos == info.pos);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取对手数组\r\n\t */\r\n\tpublic getOpponents(info: IBattlerInfo) {\r\n\t\treturn this.getCampBattlers(1 - info.camp);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取阵营的所有战斗者\r\n\t */\r\n\tpublic getCampBattlers(camp) {\r\n\t\treturn this.battlers.filter(b =>\r\n\t\t\t!b.isHidden && !b.isDead && b.camp == camp);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取阵营的所有战斗者\r\n\t */\r\n\tpublic getCampAllBattlers(camp) {\r\n\t\treturn this.battlers.filter(b => b.camp == camp);\r\n\t}\r\n\r\n\t/**\r\n\t * 是否所有存活的战斗者都处于Idle状态\r\n\t */\r\n\tpublic isAllBattlersIdle() {\r\n\t\treturn this.getBattlers().every(b => b.isIdle);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取某个阵营是否全体死亡\r\n\t */\r\n\tpublic isCampDead(camp) {\r\n\t\treturn this.getCampBattlers(camp).every(b => b.isDead);\r\n\t}\r\n\r\n\t/**\r\n\t * 阵营属性\r\n\t */\r\n\tpublic campBonusParam(camp: number, index: BonusParamType) {\r\n\t\tconst battlers = this.getCampBattlers(camp);\r\n\t\treturn battlers.reduce((res, b) => res + b.bonusParam(index) - 1, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * 是否所有Battler的所有Motion都结束了\r\n\t */\r\n\tpublic isMotionsFinished() {\r\n\t\treturn this.battlers.every(\r\n\t\t\tb => b.isMotionsFinished\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * 添加战斗者\r\n\t */\r\n\tpublic addBattler(battler: Battler) {\r\n\t\tbattler.battle = this;\r\n\r\n\t\tthis.battlers.push(battler);\r\n\t}\r\n\r\n\t/**\r\n\t * 判断胜者\r\n\t */\r\n\tpublic judgeWinner() {\r\n\t\tif (this.isCampDead(0)) return 1;\r\n\t\tif (this.isCampDead(1)) return 0;\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t/**\r\n\t * 更新战斗者\r\n\t */\r\n\tprivate updateBattlers() {\r\n\t\tthis.battlers.forEach(b => b.update());\r\n\t}\r\n\r\n\t/**\r\n\t * 进入下一个战斗者\r\n\t */\r\n\tpublic enterNextBattler(battler: Battler) {\r\n\t\tbattler = this.getNextBattler(battler);\r\n\t\tbattler?.enter();\r\n\t\tthis.nextRound();\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 行动控制\r\n\r\n\t/**\r\n\t * 当前行动\r\n\t */\r\n\tpublic get action() { return this.actions[0]; }\r\n\r\n\t/**\r\n\t * 当前行动\r\n\t */\r\n\tpublic get curAction() {\r\n\t\treturn this.actionTime >= this.action?.time\r\n\t\t\t? this.action : undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * 添加行动\r\n\t */\r\n\tpublic addAction(actionOrSubject: Action | IBattlerInfo,\r\n\t\t\t\t\t\t\t\t\t target?: IBattlerInfo,\r\n\t\t\t\t\t\t\t\t\t skill?: SkillInfo, time?: number) {\r\n\t\tlet res;\r\n\t\tif (actionOrSubject instanceof Action) {\r\n\t\t\tres = actionOrSubject;\r\n\t\t\tactionOrSubject.index = this.actions.length;\r\n\t\t\tactionOrSubject.battle = this;\r\n\r\n\t\t} else {\r\n\t\t\tres = new Action(this.actions.length, this);\r\n\t\t\tres.time = time || this.actionTime;\r\n\t\t\tres.setSubject(actionOrSubject);\r\n\t\t\tres.setTarget(target);\r\n\t\t\tres.setSkill(skill);\r\n\t\t\tres.makeResult();\r\n\t\t}\r\n\r\n\t\tthis.actions.push(res);\r\n\t\tthis.actions.sort((a1, a2) => a1.time - a2.time);\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 更新行动\r\n\t */\r\n\tprivate updateActions() {\r\n\t\t// if (!this.isRunning) return;\r\n\t\tif (!this.curAction) return;\r\n\r\n\t\tif (this.isIdle) this.invokeAction();\r\n\r\n\t\t// 如果处于行动中，同时所有战斗者的动作都完成了\r\n\t\tif (this.isActing &&\r\n\t\t\tthis.isMotionsFinished())\r\n\t\t\tthis.onActionEnd();\r\n\t}\r\n\r\n\t/**\r\n\t * 处理Action\r\n\t */\r\n\tprotected invokeAction() {\r\n\t\tconst action = this.action;\r\n\t\tconst battler = action.subject.battler;\r\n\r\n\t\tif (battler) {\r\n\t\t\tbattler.invokeAction(action);\r\n\t\t\tthis.onActionStart();\r\n\t\t} else\r\n\t\t\tthis.actions.shift();\r\n\t}\r\n\r\n\t/**\r\n\t * 行动开始回调\r\n\t */\r\n\tprotected onActionStart() {\r\n\t\tthis.state = BattleState.Acting;\r\n\t\tif (this.onActionStartListener)\r\n\t\t\tthis.onActionStartListener(this.action);\r\n\t}\r\n\r\n\t/**\r\n\t * 行动结束回调\r\n\t */\r\n\tprotected onActionEnd() {\r\n\t\tthis.actions.shift();\r\n\r\n\t\tconst winner = this.judgeWinner();\r\n\t\tif (winner >= 0) // 胜负已分\r\n\t\t\tthis.onBattleEnd(winner);\r\n\t\telse {\r\n\t\t\tif (this.onActionEndListener)\r\n\t\t\t\tthis.onActionEndListener(this.action);\r\n\t\t\tthis.state = BattleState.Idle;\r\n\t\t}\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\tpublic update(dt) {\r\n\t\tif (this.isEnding || this.isEnded) return;\r\n\r\n\t\tthis.elapsedTime += dt;\r\n\r\n\t\tthis.updateProgress();\r\n\t\tthis.updateActions();\r\n\t\tthis.updateBattlers();\r\n\t}\r\n\r\n\t// region 测试\r\n\r\n\tpublic static async testData(type: BattleType = BattleType.Main) {\r\n\t\tconst res = new Battle();\r\n\r\n\t\tres.type = type;\r\n\r\n\t\tawait heroMgr().getOneFromServer(\"194\");\r\n\t\tawait heroMgr().getOneFromServer(\"203\");\r\n\t\tawait heroMgr().getOneFromServer(\"195\");\r\n\r\n\t\tconst battler1 = await Battler.testData(0, 0, \"194\");\r\n\t\tconst battler2 = await Battler.testData(0, 1, \"203\");\r\n\t\tconst battler3 = await Battler.testData(1, 0, \"195\");\r\n\r\n\t\tres.addBattler(battler1);\r\n\t\tres.addBattler(battler2);\r\n\t\tres.addBattler(battler3);\r\n\r\n\t\t// 第0回合\r\n\t\tbattler1.inputAction(battler3, undefined, 0);\r\n\t\tbattler3.inputAction(battler1, undefined, 0);\r\n\r\n\t\tbattler2.inputAction(battler3, undefined, 0);\r\n\t\tbattler3.inputAction(battler2, undefined, 0);\r\n\r\n\t\t// 第1回合\r\n\t\tbattler3.inputAction(battler1, undefined, 1);\r\n\t\tbattler1.inputAction(battler3, undefined, 1);\r\n\r\n\t\tbattler2.inputAction(battler3, undefined, 1);\r\n\t\tbattler3.inputAction(battler2, undefined, 1);\r\n\r\n\t\t// TODO: 添加其他数据\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t// endregion\r\n\r\n}\r\nimport {heroMgr} from \"../../HeroModule/Managers/HeroManager\";\r\nimport {copyRepo} from \"../../CopyModule/Data/Copy\";\r\n","import {ItemContainer} from \"../../../CoreModule/Components/ItemContainer\";\r\nimport {Hero} from \"../../../HeroModule/Data/Hero\";\r\nimport {waitForDataLoad} from \"../../../CoreModule/Managers/DataManager\";\r\nimport {playerMgr, waitForLogin} from \"../../../PlayerModule/Managers/PlayerManager\";\r\nimport HeroCompositingDisplay from \"./Compositing/HeroCompositingDisplay\";\r\nimport CultivateWindowController from \"./CultivateWindowController\";\r\nimport {heroMgr} from \"../../../HeroModule/Managers/HeroManager\";\r\nimport {battleScene} from \"../../../../Scenes/BattleScene\";\r\nimport Button = cc.Button;\r\nimport Node = cc.Node;\r\nimport EventHandler = cc.Component.EventHandler;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class BottomListHeroContainer extends ItemContainer<Hero, HeroCompositingDisplay> {\r\n\r\n    private cultivateController: CultivateWindowController = null;\r\n    private totalHeroes: Hero[] = [];\r\n    private page: number = 0;\r\n\r\n    start () {\r\n        this.cultivateController = battleScene().cultivateWindow;\r\n        this.setup().then();\r\n    }\r\n\r\n    @waitForDataLoad\r\n    @waitForLogin\r\n    private async setup() {\r\n        const acc = playerMgr().player.account;\r\n        this.totalHeroes = (await heroMgr().getListFromServer())\r\n          .filter(h => h.ownerAccount == acc);\r\n        this.onPageChange();\r\n    }\r\n\r\n    update (dt) {\r\n        this.updateNodes();\r\n    }\r\n\r\n    @property(Node)\r\n    heroFrame: Node = null;\r\n\r\n    updateNodes() {\r\n        let index = this.items.findIndex(i => i == battleScene().cultivateWindow.currentHero);\r\n        if (index == -1) {\r\n            this.heroFrame.active = false;\r\n            return;\r\n        }\r\n        this.heroFrame.active = true;\r\n        this.heroFrame.x = 125 * index - 250;\r\n    }\r\n\r\n\r\n    onItemsChanged() {\r\n        super.onItemsChanged();\r\n        this.itemsComponents.forEach((item, i) => {\r\n            let event = new EventHandler();\r\n            event.target = this.node;\r\n            event.component = \"BottomListHeroContainer\";\r\n            event.handler = \"onItemClicked\";\r\n            event.customEventData = \"\" + i;\r\n            item.getComponent(Button).clickEvents = [];\r\n            item.getComponent(Button).clickEvents.push(event);\r\n        })\r\n    }\r\n\r\n    nextPage() {\r\n        if (this.totalHeroes.length > (this.page + 1) * 5) this.page++;\r\n        this.onPageChange();\r\n    }\r\n\r\n    lastPage() {\r\n        if (this.page > 0) this.page--;\r\n        this.onPageChange();\r\n    }\r\n\r\n    onPageChange() {\r\n        let items = this.totalHeroes.filter((h, i) => Math.floor(i / 5) == this.page);\r\n        this.setItems(items);\r\n    }\r\n\r\n    onItemClicked(event: any, index: string) {\r\n        this.cultivateController.currentHero = this.items[index];\r\n        this.cultivateController.refreshHero = true;\r\n    }\r\n}\r\n","import requireComponent = cc._decorator.requireComponent;\r\nimport Button = cc.Button;\r\nimport Sprite = cc.Sprite;\r\nimport Node = cc.Node;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\n@requireComponent(Button)\r\n@requireComponent(Sprite)\r\nexport default class ButtonFlash extends cc.Component {\r\n\r\n    // @property(Node)\r\n    // mask: Node = null;\r\n\r\n    button: Button = null;\r\n    sprite: Sprite = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n        this.button = this.getComponent(Button);\r\n        this.sprite = this.getComponent(Sprite);\r\n        this.node.on(Node.EventType.TOUCH_START, () => this.lightOn());\r\n        this.node.on(Node.EventType.TOUCH_CANCEL, () => this.lightOff());\r\n        this.node.on(Node.EventType.TOUCH_END, () => this.lightOff());\r\n    }\r\n\r\n    // update (dt) { }\r\n\r\n    lightOn() {\r\n        this.sprite.dstBlendFactor = cc.macro.ONE;\r\n        // this.mask.active = true;\r\n    }\r\n\r\n    lightOff() {\r\n        this.sprite.dstBlendFactor = cc.macro.ONE_MINUS_SRC_ALPHA;\r\n        // this.mask.active = false;\r\n    }\r\n}\r\n","import Node = cc.Node;\r\nimport Widget = cc.Widget;\r\nimport {nftMgr} from \"../../../Modules/NFTModule/Managers/NFTManager\";\r\nimport {selectorScene} from \"../SelectorScene\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CanvasAdapter extends cc.Component {\r\n\r\n    @property(Node)\r\n    canvas: Node = null;\r\n    @property(Widget)\r\n    previewUI: Widget = null;\r\n    @property(Widget)\r\n    selectUI: Widget = null;\r\n    @property(Widget)\r\n    createUI: Widget = null;\r\n    @property(Widget)\r\n    descriptionUI: Widget = null;\r\n    @property(Widget)\r\n    main: Widget = null;\r\n    @property(Widget)\r\n    fixed: Widget = null;\r\n\r\n    windowWidth: number = 1200;\r\n    isDebug: boolean = true;\r\n\r\n    @property(Number)\r\n    testWidth: number = 1200; // 运行从编辑器进行宽度设置\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    update (dt) {\r\n        if (selectorScene().editorMode) return;\r\n\r\n        this.fixed.top = this.canvas.y - 400;\r\n\r\n        if (nftMgr().data.windowSize || !this.isDebug) {\r\n            if (nftMgr().data.windowSize[0] == this.windowWidth) return;\r\n            this.windowWidth = nftMgr().data.windowSize[0];\r\n            this.windowWidth = Math.min(1200, this.testWidth);\r\n            this.isDebug = false;\r\n        }\r\n        else {\r\n            // this.testWidth = cc.view.getVisibleSize().width; // 自动以画布可视尺寸适配\r\n            this.testWidth = window.document.documentElement.clientWidth; // 自动以浏览器界面尺寸适配\r\n            if(this.testWidth == this.windowWidth) return;\r\n            this.windowWidth = Math.min(1200, this.testWidth);\r\n        }\r\n        if (this.windowWidth >= 880) {\r\n            this.canvas.width = this.windowWidth;\r\n            this.canvas.height = this.getHeightByWidth();\r\n\r\n            this.previewUI.isAlignLeft = true;\r\n            this.previewUI.left = 0;\r\n\r\n            this.selectUI.top = 150;\r\n            this.selectUI.left = 450;\r\n\r\n            this.createUI.top = 650;\r\n            this.createUI.right = this.windowWidth - 450;\r\n\r\n            this.descriptionUI.top = 760;\r\n            this.descriptionUI.left = 450;\r\n            this.descriptionUI.right = 30;\r\n            this.descriptionUI.node.height = this.windowWidth == 1200 ? 330 : 570;\r\n        }\r\n        else {\r\n            this.canvas.width = Math.max(450, this.windowWidth);\r\n            this.canvas.height = this.getHeightByWidth();\r\n\r\n            this.previewUI.isAlignHorizontalCenter = true;\r\n            this.previewUI.horizontalCenter = 0;\r\n\r\n            this.selectUI.top = 700;\r\n            this.selectUI.left = 30;\r\n\r\n            this.createUI.top = 1300;\r\n            this.createUI.right = 0;\r\n\r\n            this.descriptionUI.top = 1600;\r\n            this.descriptionUI.left = 20;\r\n            this.descriptionUI.right = 20;\r\n            this.descriptionUI.node.height = this.windowWidth > 780 ? 330 : 570;\r\n        }\r\n        if (this.windowWidth < 450) this.canvas.scale = this.windowWidth / 450;\r\n        else this.canvas.scale = 1;\r\n    }\r\n\r\n    getHeightByWidth(width: number = this.windowWidth): number{\r\n        if (width >= 1200) return 1100;\r\n        if (width >= 880) return 1350;\r\n        if (width >= 780) return 1950;\r\n        return 2200;\r\n    }\r\n\r\n}\r\n","import Prefab = cc.Prefab;\r\nimport Component = cc.Component;\r\nimport instantiate = cc.instantiate;\r\nimport Vec3 = cc.Vec3;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class ClickAnimation extends Component {\r\n\r\n    @property(Prefab)\r\n    clickObj: Prefab = null;\r\n\r\n    isLoad: boolean = false;\r\n\r\n    protected update(dt: number) {\r\n        if (!this.isLoad) {\r\n            this.node.on(cc.Node.EventType.TOUCH_END, e => { this.click(e); });\r\n            (this.node as any)._touchListener.setSwallowTouches(false);\r\n            this.isLoad = true;\r\n        }\r\n    }\r\n\r\n    click (event: Event) {\r\n        let node = instantiate(this.clickObj);\r\n        node.parent = this.node;\r\n        node.position = new Vec3(Number(event[\"touch\"][\"_point\"][\"x\"]) - this.node.width / 2,\r\n                                 Number(event[\"touch\"][\"_point\"][\"y\"]) - this.node.height / 2,\r\n                                 0);\r\n        setTimeout(() => { node.destroy(); }, 400);\r\n    }\r\n}\r\n","import executeInEditMode = cc._decorator.executeInEditMode;\r\nimport Color = cc.Color;\r\nimport director = cc.director;\r\nimport requireComponent = cc._decorator.requireComponent;\r\nimport RenderComponent = cc.RenderComponent;\r\nimport Director = cc.Director;\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\n@executeInEditMode\r\n@requireComponent(RenderComponent)\r\nexport default class ColorAssembler extends cc.Component {\r\n\r\n    @property([Color])\r\n    colors: Color[] = [\r\n        null, null, null, null\r\n    ]; // 依次为左下角，右下角，左上角，右上角\r\n\r\n    onEnable() { director.once(Director.EVENT_AFTER_DRAW, this.updateColors, this); }\r\n\r\n    onDisable() { director.off(Director.EVENT_AFTER_DRAW, this.updateColors, this); this.node[ '_renderFlag'] |= cc[ 'RenderFlow'].FLAG_COLOR; }\r\n\r\n    updateColors() {\r\n        const cmp = this.getComponent(cc.RenderComponent);\r\n        if (!cmp) return;\r\n        const _assembler = cmp['_assembler'];\r\n        if (!(_assembler instanceof cc['Assembler2D'])) return;\r\n        const uintVerts = _assembler._renderData.uintVDatas[0];\r\n        if (!uintVerts) return;\r\n        const color = this.node.color;\r\n        const floatsPerVert = _assembler.floatsPerVert;\r\n        const colorOffset = _assembler.colorOffset;\r\n        let count = 0;\r\n        for (let i = colorOffset, l = uintVerts.length; i < l; i += floatsPerVert)\r\n            uintVerts[i] = (this.colors[count++] || color)['_val'];\r\n    }\r\n}\r\n","import HeroInfoDisplay from \"../HeroInfoDisplay\";\r\nimport CultivateWindowController from \"../CultivateWindowController\";\r\nimport {playerMgr} from \"../../../../PlayerModule/Managers/PlayerManager\";\r\nimport {PlayerMoney} from \"../../../../EconomicModule/Data/PlayerMoney\";\r\nimport Label = cc.Label;\r\nimport HeroCompositingDisplay from \"./HeroCompositingDisplay\";\r\nimport {Hero} from \"../../../../HeroModule/Data/Hero\";\r\nimport {battleScene} from \"../../../../../Scenes/BattleScene\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CompositingWindowDisplay extends cc.Component {\r\n\r\n    // region Background中组件及资源引用\r\n\r\n    @property(HeroInfoDisplay)\r\n    heroInfo: HeroInfoDisplay = null;\r\n    @property(Label)\r\n    lastTime: Label = null;\r\n    @property(HeroCompositingDisplay)\r\n    mainHero: HeroCompositingDisplay = null;\r\n    @property(HeroCompositingDisplay)\r\n    secondHero: HeroCompositingDisplay = null;\r\n\r\n    // endregion\r\n\r\n    // region Content中组件及资源引用\r\n\r\n    @property(Label)\r\n    priceValues: Label[] = [];\r\n    @property(Label)\r\n    balanceValues: Label[] = [];\r\n\r\n    // endregion\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    private cultivateController: CultivateWindowController = null;\r\n\r\n    start () {\r\n        this.cultivateController = battleScene().cultivateWindow;\r\n        this.mainHero.setItem(null);\r\n        this.secondHero.setItem(null);\r\n    }\r\n\r\n    // region 更新控制\r\n\r\n    update (dt) {\r\n        this.updateLabels();\r\n        this.updatePictures();\r\n    }\r\n\r\n    updateLabels() {\r\n        this.priceValues[0].string = \"1000\";\r\n        this.priceValues[1].string = \"1\";\r\n        this.balanceValues[0].string = \"\\\\L[SShop14]:\" + playerMgr().getPlayerData(PlayerMoney).gold.toString();\r\n        this.balanceValues[1].string = \"\\\\L[SShop14]:\" + playerMgr().getPlayerData(PlayerMoney).token.toString();\r\n        this.lastTime.string = \"16:22\";\r\n    }\r\n\r\n    updatePictures() {\r\n\r\n\r\n    }\r\n\r\n    protected onEnable() {\r\n        this.heroInfo.node.active = false;\r\n    }\r\n\r\n    protected onDisable() {\r\n        this.mainHero.setItem(null);\r\n        this.secondHero.setItem(null);\r\n        this.mainHero.node.active = false;\r\n        this.secondHero.node.active = false;\r\n    }\r\n\r\n    // endregion\r\n\r\n    onHeroChange() {\r\n        this.cultivateController.refreshHero = true;\r\n    }\r\n\r\n    // region 组件点击回调\r\n\r\n    selectHero(hero: Hero) {\r\n        if (!this.mainHero.item) {\r\n            this.mainHero.node.active = true;\r\n            this.mainHero.setItem(hero);\r\n            return;\r\n        }\r\n        if (!this.secondHero.item) {\r\n            this.secondHero.node.active = true;\r\n            this.secondHero.setItem(hero);\r\n            return;\r\n        }\r\n    }\r\n\r\n    deselectMainHero() {\r\n        this.mainHero.setItem(null);\r\n        this.mainHero.node.active = false;\r\n    }\r\n\r\n    deselectSecondHero() {\r\n        this.secondHero.setItem(null);\r\n        this.secondHero.node.active = false;\r\n    }\r\n\r\n    compositingBtn() {\r\n\r\n        this.onHeroChange();\r\n    }\r\n\r\n    // endregion\r\n\r\n}\r\n","import {Condition, ConditionType} from \"../Data/Condition\";\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\n\r\nexport function conditionProcessor(type: ConditionType) {\r\n\treturn (clazz) => {\r\n\t\tConditionProcessor.processorSettings[type] = clazz;\r\n\t}\r\n}\r\n\r\nexport function createProcessor(condition: Condition) {\r\n\tconst clazz = ConditionProcessor.processorSettings[condition.type];\r\n\treturn new clazz(condition);\r\n}\r\n\r\nexport abstract class ConditionProcessor {\r\n\r\n\tpublic static processorSettings:\r\n\t\t{[K: string]: Constructor<ConditionProcessor>} = {};\r\n\r\n\tpublic condition: Condition;\r\n\r\n\tprotected constructor(condition: Condition) {\r\n\t\tthis.condition = condition;\r\n\t}\r\n\r\n\t/**\r\n\t * 属性声明\r\n\t */\r\n\tpublic get value() { return this.condition.value; }\r\n\tpublic get compare() { return this.condition.compare; }\r\n\tpublic get consumable() { return this.condition.consumable; }\r\n\tpublic get errMsg() { return this.condition.errMsg; }\r\n\r\n\tprotected abstract get playerValue(): number;\r\n\tprotected abstract get throwFunc(): Function;\r\n\r\n\t/**\r\n\t * 条件判断\r\n\t */\r\n\tpublic judge() {\r\n\t\tthis.preprocess();\r\n\t\tconst pValue = this.playerValue;\r\n\t\tswitch (this.compare) {\r\n\t\t\tcase \"eq\": return pValue == this.value;\r\n\t\t\tcase \"neq\": return pValue != this.value;\r\n\t\t\tcase \"gt\": return pValue > this.value;\r\n\t\t\tcase \"gte\": return pValue >= this.value;\r\n\t\t\tcase \"lt\": return pValue < this.value;\r\n\t\t\tcase \"lte\": return pValue <= this.value;\r\n\t\t\tdefault: return false;\r\n\t\t}\r\n \t}\r\n\r\n\t/**\r\n\t * 消耗\r\n\t */\r\n\tpublic check() {\r\n\t\tif (!this.judge()) this.throwFunc(this.errMsg);\r\n\t}\r\n\r\n\t/**\r\n\t * 消耗\r\n\t */\r\n\tpublic consume() {\r\n\t\tif (this.consumable) this.doConsume();\r\n\t}\r\n\r\n\t/**\r\n\t * 预处理\r\n\t */\r\n \tprotected preprocess() { }\r\n\r\n\t/**\r\n\t * 执行消耗\r\n\t */\r\n\tprotected doConsume() { }\r\n\r\n}\r\n\r\n@conditionProcessor(ConditionType.Func)\r\nclass FuncConditionProcessor extends ConditionProcessor {\r\n\r\n\tprotected get playerValue(): number { return 0; }\r\n\tprotected get throwFunc(): Function { return this.condition.params.throwFunc; }\r\n\r\n\tjudge(): boolean {\r\n\t\treturn this.condition.params.jFunc();\r\n\t}\r\n\r\n}\r\n","\r\nexport enum ConditionType {\r\n\tFunc = \"func\",\r\n\r\n\tGold = \"gold\",\r\n\tDiamond = \"diamond\",\r\n\tMedal = \"medal\",\r\n\tFragment = \"fragment\", // 碎片\r\n\tToken = \"token\", // 代币\r\n\r\n\tReturnTime = \"returnTime\",\r\n\r\n\t// TODO: 补充更多\r\n}\r\n\r\nexport type CompareType = 'eq' | 'neq' | 'gt' | 'lt' | 'gte' | 'lte'\r\n\r\nexport const DefaultThrowFunc = () => {throw \"Condition not met！\"};\r\n\r\nexport function cEq(type: ConditionType, value: number, consumable: boolean = true,\r\n\t\t\t\t\t\t\t\t\t\tparams: object = {}, errMsg?: string) {\r\n\treturn Condition.eq(type, value, consumable, params, errMsg);\r\n}\r\nexport function cNeq(type: ConditionType, value: number, consumable: boolean = true,\r\n\t\t\t\t\t\t\t\t\t\t params: object = {}, errMsg?: string) {\r\n\treturn Condition.neq(type, value, consumable, params, errMsg);\r\n}\r\nexport function cGte(type: ConditionType, value: number, consumable: boolean = true,\r\n\t\t\t\t\t\t\t\t\t\t params: object = {}, errMsg?: string) {\r\n\treturn Condition.gte(type, value, consumable, params, errMsg);\r\n}\r\nexport function cGt(type: ConditionType, value: number, consumable: boolean = true,\r\n\t\t\t\t\t\t\t\t\t\tparams: object = {}, errMsg?: string) {\r\n\treturn Condition.gt(type, value, consumable, params, errMsg);\r\n}\r\nexport function cLte(type: ConditionType, value: number, consumable: boolean = true,\r\n\t\t\t\t\t\t\t\t\t\t params: object = {}, errMsg?: string) {\r\n\treturn Condition.lte(type, value, consumable, params, errMsg);\r\n}\r\nexport function cLt(type: ConditionType, value: number, consumable: boolean = true,\r\n\t\t\t\t\t\t\t\t\t\tparams: object = {}, errMsg?: string) {\r\n\treturn Condition.lt(type, value, consumable, params, errMsg);\r\n}\r\nexport function cFun(jFunc: Function, tFunc: Function = DefaultThrowFunc, errMsg?: string) {\r\n\treturn Condition.fun(jFunc, tFunc, errMsg);\r\n}\r\n\r\nimport {BaseData, field} from \"../../CoreModule/Data/BaseData\";\r\n\r\nexport class Condition extends BaseData {\r\n\r\n\t@field\r\n\tpublic type: ConditionType = ConditionType.Gold;\r\n\t@field\r\n\tpublic value: number = 100;\r\n\t@field(Object)\r\n\tpublic params: any = {};\r\n\r\n\t@field\r\n\tpublic compare: CompareType = \"gte\";\r\n\t@field\r\n\tpublic consumable: boolean = true;\r\n\r\n\t@field(String)\r\n\tpublic errMsg: string;\r\n\r\n\tprotected constructor(type, value, compare,\r\n\t\t\t\t\t\t\t\t\t\t\t\tconsumable, params, errMsg) {\r\n\t\tsuper();\r\n\t\tthis.type = type;\r\n\t\tthis.value = value;\r\n\t\tthis.compare = compare;\r\n\t\tthis.consumable = consumable;\r\n\t\tthis.params = params;\r\n\t\tthis.errMsg = errMsg;\r\n\t}\r\n\r\n\tpublic static eq(type: ConditionType, value: number, consumable: boolean = true,\r\n\t\t\t\t\t\t\t\t\t params: object = {}, errMsg?: string) {\r\n\t\treturn new Condition(type, value, \"eq\", consumable, params, errMsg);\r\n\t}\r\n\tpublic static neq(type: ConditionType, value: number, consumable: boolean = true,\r\n\t\t\t\t\t\t\t\t\t\tparams: object = {}, errMsg?: string) {\r\n\t\treturn new Condition(type, value, \"neq\", consumable, params, errMsg);\r\n\t}\r\n\tpublic static gte(type: ConditionType, value: number, consumable: boolean = true,\r\n\t\t\t\t\t\t\t\t\t\tparams: object = {}, errMsg?: string) {\r\n\t\treturn new Condition(type, value, \"gte\", consumable, params, errMsg);\r\n\t}\r\n\tpublic static gt(type: ConditionType, value: number, consumable: boolean = true,\r\n\t\t\t\t\t\t\t\t\t params: object = {}, errMsg?: string) {\r\n\t\treturn new Condition(type, value, \"gt\", consumable, params, errMsg);\r\n\t}\r\n\tpublic static lte(type: ConditionType, value: number, consumable: boolean = false,\r\n\t\t\t\t\t\t\t\t\t\tparams: object = {}, errMsg?: string) {\r\n\t\treturn new Condition(type, value, \"lte\", consumable, params, errMsg);\r\n\t}\r\n\tpublic static lt(type: ConditionType, value: number, consumable: boolean = false,\r\n\t\t\t\t\t\t\t\t\t params: object = {}, errMsg?: string) {\r\n\t\treturn new Condition(type, value, \"lt\", consumable, params, errMsg);\r\n\t}\r\n\r\n\tpublic static fun(jFunc: Function, tFunc: Function = DefaultThrowFunc, errMsg?: string) {\r\n\t\treturn new Condition(ConditionType.Func,\r\n\t\t\tnull, null, false,\r\n\t\t\t{ jFunc, tFunc }, errMsg);\r\n\t}\r\n\r\n}\r\n\r\nimport {createProcessor} from \"../Utils/ConditionProcessor\";\r\n\r\nexport class ConditionGroup extends BaseData {\r\n\r\n\t@field([Condition])\r\n\tpublic conditions: Condition[] = [];\r\n\r\n\tpublic static create(...conds: (Condition | ConditionGroup)[]) {\r\n\t\tconst res = new ConditionGroup();\r\n\t\tconds.forEach(cond => res.add(cond));\r\n\t\treturn res;\r\n\t}\r\n\r\n\tpublic add(cond: Condition | ConditionGroup) {\r\n\t\tif (cond instanceof Condition) {\r\n\t\t\tif (cond.type != ConditionType.Func) {\r\n\t\t\t\tconst curCond = this.find(cond.type);\r\n\t\t\t\tif (curCond) curCond.value += cond.value;\r\n\t\t\t\telse this.conditions.push(cond.clone());\r\n\t\t\t} else this.conditions.push(cond.clone());\r\n\t\t} else\r\n\t\t\tcond.conditions.forEach(c => this.add(c))\r\n\t}\r\n\r\n\tpublic process() {\r\n\t\tconst processors = this.conditions.map(\r\n\t\t\tc => createProcessor(c));\r\n\r\n\t\tfor (const p of processors) p.check();\r\n\t\tfor (const p of processors) p.consume();\r\n\t}\r\n\r\n\tpublic check() {\r\n\t\tconst processors = this.conditions.map(\r\n\t\t\tc => createProcessor(c));\r\n\t\tfor (const p of processors) p.check();\r\n\t}\r\n\r\n\tpublic judge() {\r\n\t\tconst processors = this.conditions.map(\r\n\t\t\tc => createProcessor(c));\r\n\t\treturn processors.every(p => p.judge());\r\n\t}\r\n\r\n\tpublic find(type: ConditionType) {\r\n\t\treturn this.conditions.find(c => c.type == type);\r\n\t}\r\n\r\n\t// region 快捷查找\r\n\r\n\tpublic get gold() { return this.find(ConditionType.Gold); }\r\n\tpublic get diamond() { return this.find(ConditionType.Diamond); }\r\n\tpublic get medal() { return this.find(ConditionType.Medal); }\r\n\tpublic get token() { return this.find(ConditionType.Token); }\r\n\r\n\tpublic get fragment() { return this.find(ConditionType.Fragment); }\r\n\r\n\t// endregion\r\n\r\n}\r\n","import {BaseConfig} from \"../Data/BaseConfig\";\r\nimport {BaseManager, getManager, manager} from \"./BaseManager\";\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\nimport {CoreInterface} from \"../Common/CoreCommon\";\r\nimport {DataLoader} from \"../Utils/DataLoader\";\r\n\r\nexport function configMgr() {\r\n\treturn getManager(ConfigManager)\r\n}\r\n\r\ntype ConfigCache<T extends BaseConfig> = {\r\n\tclazz: Constructor<T>, name: string, config?: T\r\n}\r\n\r\nconst ClazzConfigKey = \"configName\";\r\n\r\n@manager\r\nexport class ConfigManager extends BaseManager {\r\n\r\n\tpublic configs: {[T: string]: ConfigCache<any>} = {};\r\n\r\n\tprivate isLoaded = false;\r\n\r\n\t/**\r\n\t * 初始化\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._initializeData().then();\r\n\t}\r\n\tprivate async _initializeData() {\r\n\t\tthis.isLoaded = false;\r\n\r\n\t\tconst res = await CoreInterface.GetConfig();\r\n\t\tfor (const key in this.configs) {\r\n\t\t\tconst cache = this.configs[key];\r\n\t\t\tthis.configs[key].config = DataLoader.load(\r\n\t\t\t\tcache.clazz, res.configs[key]);\r\n\t\t}\r\n\r\n\t\tthis.isLoaded = true;\r\n\t}\r\n\r\n\t// region 配置操作\r\n\r\n\tpublic registerConfig<T extends BaseConfig>(\r\n\t\tclazz: Constructor<T>, name: string) {\r\n\t\tclazz[ClazzConfigKey] = name;\r\n\r\n\t\tthis.configs[name] = { clazz, name };\r\n\t}\r\n\tpublic getConfigCache<T extends BaseConfig>(\r\n\t\tclazz: Constructor<T> | string): ConfigCache<T> {\r\n\t\tif (typeof clazz !== 'string')\r\n\t\t\tclazz = clazz[ClazzConfigKey] as string;\r\n\r\n\t\treturn this.configs[clazz];\r\n\t}\r\n\r\n\t/**\r\n\t * 获取集合\r\n\t * @param clazz\r\n\t */\r\n\tpublic config<T extends BaseConfig>(clazz: Constructor<T> | string) {\r\n\t\tconst config = this.getConfigCache(clazz);\r\n\t\treturn config.config ||= new config.clazz();\r\n\t}\r\n\r\n\t// endregion\r\n\r\n}\r\n","import {get, post} from \"../CoreModule/Common/CoreCommon\";\r\n\r\nexport class CopyInterface {\r\n    @post(\"/copy/setting/adjust_heroes\") static AdjustHeroes(d?): any {}\r\n}\r\n","import {BaseManager, getManager, manager} from \"../../CoreModule/Managers/BaseManager\";\r\nimport {CopyInterface} from \"../CopyCommon\";\r\nimport {PlayerCopy} from \"../Data/PlayerCopy\";\r\nimport {DataLoader} from \"../../CoreModule/Utils/DataLoader\";\r\nimport {copyRepo, CopyType} from \"../Data/Copy\";\r\nimport {playerMgr} from \"../../PlayerModule/Managers/PlayerManager\";\r\nimport {PlayerJob} from \"../../EconomicModule/Data/PlayerJob\";\r\n\r\nexport function copyMgr() {\r\n\treturn getManager(CopyManager)\r\n}\r\n\r\n@manager\r\nclass CopyManager extends BaseManager {\r\n\r\n\t/**\r\n\t * 获取闯关“副本”进度\r\n\t */\r\n\tpublic getMainPlayerCopy() {\r\n\t\treturn playerMgr().getPlayerData(PlayerCopy).mainCopy();\r\n\t}\r\n\r\n\tpublic getMainPlayerCopySettings() {\r\n\t\treturn playerMgr().getPlayerData(PlayerCopy)?.mainSetting();\r\n\t}\r\n\r\n\tpublic getPlayerCopy() {\r\n\t\treturn playerMgr().getPlayerData(PlayerCopy);\r\n\t}\r\n}\r\n","import {Reward, RewardGroup} from \"../../PlayerModule/Data/Reward\";\r\nimport {assetField, BaseData, field, GameData, PK, pkType} from \"../../CoreModule/Data/BaseData\";\r\nimport {Condition} from \"../../PlayerModule/Data/Condition\";\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\nimport {BaseRepository, getRepository, repository} from \"../../CoreModule/Data/BaseRepository\";\r\nimport {Enemy, enemyRepo} from \"./Enemy\";\r\nimport {data, StaticData} from \"../../CoreModule/Data/StaticData\";\r\nimport {copyMgr} from \"../Managers/CopyManager\";\r\nimport {BundleName} from \"../../CoreModule/Managers/AssetBundleManager\";\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport {ParamType} from \"../../HeroModule/Data/Param\";\r\n\r\nexport enum CopyType {\r\n\tMain, Copy, Boss\r\n}\r\n\r\nconst DefaultMaxRound = 100;\r\n\r\nexport class CopyLevel extends BaseData {\r\n\r\n\t@field\r\n\tpublic mapIdx: number = 0; // 关卡所属的地图\r\n\t@field([Number])\r\n\tpublic enemyIds: number[] = []; // 关卡敌人设置\r\n\r\n\t// 暂定\r\n\t@field([Reward])\r\n\tpublic firstRewards: Reward[] = [];\r\n\t@field([Reward])\r\n\tpublic winRewards: Reward[] = [];\r\n\t@field([Reward])\r\n\tpublic loseRewards: Reward[] = [];\r\n\r\n\tpublic copy: Copy;\r\n\r\n\tconstructor(index, parent) {\r\n\t\tsuper(index);\r\n\t\tthis.copy = parent;\r\n\t}\r\n\r\n\t/**\r\n\t * 显示名称\r\n\t */\r\n\tpublic get displayName() {\r\n\t\treturn `\\\\L[CopyLevel${this.mapIdx}]`;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取敌人列表\r\n\t */\r\n\tpublic enemies() {\r\n\t\treturn this.enemyIds.map(eid => enemyRepo().getById(eid))\r\n\t}\r\n\r\n\t/**\r\n\t * 获取奖励\r\n\t */\r\n\tpublic calcRewards(win: boolean, first = false) {\r\n\t\tconst res = RewardGroup.create(\r\n\t\t\t...(win ? this.winRewards : this.loseRewards)\r\n\t\t);\r\n\t\tif (win && first)\r\n\t\t\tthis.firstRewards.forEach(r => res.add(r));\r\n\t\treturn res;\r\n\t}\r\n\r\n\tprivate get mapName() { switch (this.copy.type) {\r\n\t\tcase CopyType.Main:\r\n\t\t\treturn \"main_\" + this.mapIdx;\r\n\t\tcase CopyType.Boss:\r\n\t\t\treturn \"boss_\" + this.mapIdx;\r\n\t\tcase CopyType.Copy:\r\n\t\t\treturn \"copy_\" + this.mapIdx;\r\n\t} }\r\n\t@assetField(SpriteFrame, BundleName.Sprites,\r\n\t\t\"battlemaps/${mapName}\")\r\n\tpublic mapPicture: SpriteFrame;\r\n\r\n}\r\n\r\n@data(\"Copy\")\r\nexport class Copy extends StaticData {\r\n\r\n\t@field\r\n\tpublic type: CopyType = CopyType.Copy;\r\n\t@field\r\n\tpublic pictureName: string = \"\";\r\n\t@field\r\n\tpublic maxRound: number = DefaultMaxRound;\r\n\t@field\r\n\tpublic maxLevel: number = 0;\r\n\t@field([CopyLevel])\r\n\tpublic levels: CopyLevel[] = []; // 每个关卡的配置，实际关卡超出配置范围后会从0开始\r\n\t@field\r\n\tpublic difficulty: number = 1;\r\n\t@field([Condition])\r\n\tpublic conditions: Condition[] = [];\r\n\r\n\tpublic level(level: number): CopyLevel {\r\n\t\treturn this.levels[(level + 1) % this.levels.length];\r\n\t}\r\n}\r\n\r\nexport function copyRepo() {\r\n\treturn getRepository(CopyRepo);\r\n}\r\n\r\n@repository\r\nexport class CopyRepo extends BaseRepository<Copy> {\r\n\r\n\tget clazz(): Constructor<Copy> { return Copy; }\r\n\r\n\t// @ts-ignore\r\n\tpublic getByType(type: CopyType): Copy { };\r\n\r\n\tpublic main() {\r\n\t\treturn this.getByType(CopyType.Main);\r\n\t}\r\n\r\n}\r\n","\r\nexport function error(code: number, errMsg: string) {\r\n\treturn (obj, key, desc) => {\r\n\t\tdesc.value = (detail, data) => {\r\n\t\t\tthrow new GameError(code, errMsg, detail, data);\r\n\t\t};\r\n\t}\r\n}\r\n\r\nexport function loading(code: number, title?: string,\r\n\t\t\t\t\t\t\t\t\t\t\t\tmaxValue: number = 1,\r\n\t\t\t\t\t\t\t\t\t\t\t\tshowImmediately: boolean = false) {\r\n\treturn (obj, key, desc) => {\r\n\t\tdesc.value = (detail?: string) =>\r\n\t\t\tnew GameLoading(code, title, detail, maxValue, showImmediately);\r\n\t}\r\n}\r\n\r\nexport function post(\r\n\tp1: string, p2?: string | InterfaceLoading,\r\n\tp3?: InterfaceLoading | boolean, p4?: boolean) {\r\n\r\n\tconst opt = makeInterfaceOption(\"post\", p1, p2, p3, p4);\r\n\r\n\treturn (obj, key, desc) => {\r\n\t\tdesc.value = p => networkMgr().request(new Interface(opt), p)\r\n\t}\r\n}\r\nexport function get(\r\n\tp1: string, p2?: string | InterfaceLoading,\r\n\tp3?: InterfaceLoading | boolean, p4?: boolean) {\r\n\r\n\tconst opt = makeInterfaceOption(\"get\", p1, p2, p3, p4);\r\n\r\n\treturn (obj, key, desc) => {\r\n\t\tdesc.value = d => networkMgr().request(new Interface(opt), d)\r\n\t}\r\n}\r\n\r\nfunction makeInterfaceOption(method: Method,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t hostOrRoute: string,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t routeOrLoading?: string | InterfaceLoading,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t loadingOrUseToken?: InterfaceLoading | boolean,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t useEncrypt: boolean = true): InterfaceOptions {\r\n\tconst res: InterfaceOptions = { method, route: hostOrRoute };\r\n\tif (typeof routeOrLoading === \"string\") { // 有host参数\r\n\t\tres.host = hostOrRoute;\r\n\t\tres.route = routeOrLoading;\r\n\t\tres.loading = loadingOrUseToken;\r\n\t\t// 有host参数，不可设置token和加密\r\n\t\tres.useToken = res.useEncrypt = false;\r\n\t} else {\r\n\t\tres.loading = routeOrLoading;\r\n\t\t// @ts-ignore\r\n\t\tres.useToken = loadingOrUseToken;\r\n\t\tres.useEncrypt = useEncrypt;\r\n\t}\r\n\tif (res.useToken === undefined) res.useToken = true;\r\n\treturn res;\r\n}\r\n\r\nexport class CoreThrow {\r\n\r\n\t@error(100000, \"系统错误\") static SystemError(...p) {}\r\n\r\n}\r\n\r\nexport class CoreLoading {\r\n\r\n\t@loading(100000, \"\") static Default(...p): any {};\r\n\t@loading(100001, \"Loading assets\") static GetAsset(...p): any {};\r\n\t@loading(100002, \"Waiting for response\") static Request(...p): any {};\r\n\t@loading(100003, \"Loading data\") static GetData(...p): any {};\r\n\r\n}\r\n\r\nexport class CoreInterface {\r\n\t@get(\"/core/data/get\", CoreLoading.GetData, false) static GetData(d?): any {}\r\n\t@get(\"/core/config/get\", CoreLoading.GetData, false) static GetConfig(d?): any {}\r\n\t@post(\"/core/token/update\", false) static UpdateToken(d?): any {}\r\n}\r\n\r\nimport {GameLoading} from \"../Managers/LoadingManager\";\r\nimport {GameError} from \"../Managers/AlertManager\";\r\nimport {Interface, InterfaceLoading, InterfaceOptions, Method, networkMgr} from \"../Managers/NetworkManager\";\r\n","import Sprite = cc.Sprite;\r\nimport Label = cc.Label;\r\nimport Animation = cc.Animation;\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport Color = cc.Color;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nconst MaxQuality = 5;\r\n\r\n@ccclass\r\nexport default class CreatedWindow extends cc.Component {\r\n\r\n\t@property(Sprite)\r\n\tpicture: Sprite = null;\r\n\t@property(Sprite)\r\n\tlight: Sprite = null;\r\n\t@property(Sprite)\r\n\tframe: Sprite = null;\r\n\t@property(Label)\r\n\ttips: Label = null;\r\n\r\n\t@property([SpriteFrame])\r\n\tsf: SpriteFrame[] = [];\r\n\t@property([String])\r\n\ttipContents: string[] = [\r\n\t\t\"\\\\L[SCreate31]\\\\L[SCreate36]\\\\L[SCreate37]\",\r\n\t\t\"\\\\L[SCreate31]\\\\L[SCreate35]\\\\L[SCreate37]\",\r\n\t\t\"\\\\L[SCreate31]\\\\L[SCreate34]\\\\L[SCreate37]\",\r\n\t\t\"\\\\L[SCreate31]\\\\L[SCreate33]\\\\L[SCreate37]\",\r\n\t\t\"\\\\L[SCreate31]\\\\L[SCreate32]\\\\L[SCreate37]\"\r\n\t];\r\n\t@property([Color])\r\n\tcolors: Color[] = [\r\n\t\tnew Color(35, 229, 160),\r\n\t\tnew Color(23, 179, 226),\r\n\t\tnew Color(160, 69, 246),\r\n\t\tnew Color(216, 91, 225),\r\n\t\tnew Color(254, 189, 74)\r\n\t];\r\n\r\n\tsetPicture(base64: string){\r\n\t\tif(!this.picture) return;\r\n\t\tlet img = new Image();\r\n\t\timg.src = base64;\r\n\t\tlet self = this;\r\n\t\timg.onload = function(){\r\n\t\t\tlet texture = new cc.Texture2D();\r\n\t\t\ttexture.initWithElement(img);\r\n\t\t\ttexture.handleLoadedTexture();\r\n\t\t\tself.picture.spriteFrame = new cc.SpriteFrame(texture);\r\n\t\t}\r\n\t}\r\n\r\n\tsetQuality(quality: number) {\r\n\t\tconst idx = MaxQuality - quality;\r\n\t\tthis.light.spriteFrame = this.sf[idx];\r\n\t\tthis.tips.string = this.tipContents[idx];\r\n\t\tthis.frame.node.color = this.colors[idx];\r\n\r\n\t\t/*\r\n\t\tswitch (quality){\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\t\tthis.light.spriteFrame = this.sf[0];\r\n\t\t\t\t\t\tthis.frame.node.color = new Color(35, 229, 160);\r\n\t\t\t\t\t\tthis.tips.string = \"\\\\L[SCreate30]\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\t\tthis.light.spriteFrame = this.sf[1];\r\n\t\t\t\t\t\tthis.frame.node.color = new Color(23, 179, 226);\r\n\t\t\t\t\t\tthis.tips.string = \"\\\\L[SCreate30]\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\t\tthis.light.spriteFrame = this.sf[2];\r\n\t\t\t\t\t\tthis.frame.node.color = new Color(160, 69, 246);\r\n\t\t\t\t\t\tthis.tips.string = \"\\\\L[SCreate30]\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\t\tthis.light.spriteFrame = this.sf[3];\r\n\t\t\t\t\t\tthis.frame.node.color = new Color(216, 91, 225);\r\n\t\t\t\t\t\tthis.tips.string = \"\\\\L[SCreate30]\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\t\tthis.light.spriteFrame = this.sf[4];\r\n\t\t\t\t\t\tthis.frame.node.color = new Color(254, 189, 74);\r\n\t\t\t\t\t\tthis.tips.string = \"\\\\L[SCreate30]\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t}\r\n\t\t*/\r\n\t}\r\n\r\n\tshow(){\r\n\t\tthis.light.node.getComponent(Animation).play();\r\n\t\tthis.node.active = true;\r\n\t}\r\n\r\n\tshut(){\r\n\t\tthis.node.active = false;\r\n\t}\r\n\r\n\tjump(){\r\n\t\twindow.parent.location.href = \"/mynft\";\r\n\t}\r\n\r\n}\r\n","import {SelectableGroup} from \"../../../CoreModule/Components/SelectableGroup\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CultivateSelectionGroup extends SelectableGroup {\r\n\r\n}\r\n","import {SelectableObject} from \"../../../CoreModule/Components/SelectableObject\";\r\nimport Sprite = cc.Sprite;\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport CultivateWindowController from \"./CultivateWindowController\";\r\nimport Node = cc.Node;\r\nimport Color = cc.Color;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CultivateSelection extends SelectableObject {\r\n\r\n\r\n    @property(Sprite)\r\n    picture: Sprite = null;\r\n    @property(Node)\r\n    labelNode: Node = null;\r\n    @property(Node)\r\n    redPoint: Node = null;\r\n\r\n    @property([SpriteFrame])\r\n    pictures: SpriteFrame[] = [];\r\n\r\n    controller: CultivateWindowController = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    update (dt) {\r\n        this.redPoint.active = false;\r\n    }\r\n\r\n    onDeselected(): void {\r\n        this.refresh(false);\r\n    }\r\n\r\n    onSelected(): void {\r\n        this.controller.onSelectionCardChange();\r\n        this.refresh(true);\r\n    }\r\n\r\n    refresh(select: boolean) {\r\n        this.picture.spriteFrame = this.pictures[select ? 1 : 0];\r\n        this.labelNode.color = select ? new Color(0, 0, 0) : new Color(62, 50, 36);\r\n        this.labelNode.scale = 1 + (select ? 0.07 : 0);\r\n    }\r\n\r\n}\r\n","import Node = cc.Node;\r\nimport CultivateSelection from \"./CultivateSelection\";\r\nimport CultivateSelectionGroup from \"./CultivateSelectionGroup\";\r\nimport {Hero} from \"../../../HeroModule/Data/Hero\";\r\nimport Animation = cc.Animation;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CultivateWindowController extends cc.Component {\r\n\r\n    @property(Node)\r\n    window: Node = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () { }\r\n\r\n    // region 选项卡控制\r\n\r\n    @property([CultivateSelection])\r\n    selectionCards: CultivateSelection[] = [];\r\n    selectionGroup: CultivateSelectionGroup = null;\r\n    @property([Node])\r\n    outNodes: Node[] = [];\r\n    @property([Node])\r\n    inNodes: Node[] = [];\r\n\r\n    initSelectionGroup() {\r\n        this.selectionGroup = new CultivateSelectionGroup(false);\r\n        this.selectionCards.forEach(c => {\r\n            c.selectableGroup = this.selectionGroup;\r\n            c.controller = this;\r\n            this.selectionGroup.addElement(c);\r\n        })\r\n    }\r\n\r\n    onSelectionCardChange() {\r\n        let selected = this.selectionCards.findIndex(c => c.selectableGroup.isSelected(c));\r\n        this.outNodes.forEach((n, i) => n.active = i == selected);\r\n        this.inNodes.forEach((n, i) => n.active = i == selected);\r\n        this.refreshHero = true;\r\n    }\r\n\r\n    // endregion\r\n\r\n    // update (dt) {}\r\n\r\n    public currentHero: Hero = null;\r\n    public refreshHero: boolean = false;\r\n\r\n    open(hero: Hero) {\r\n        if (!this.selectionGroup)\r\n            this.initSelectionGroup();\r\n        this.currentHero = hero;\r\n        this.refreshHero = true;\r\n        this.selectionGroup.select(this.selectionCards[0]);\r\n        this.window.active = true;\r\n        this.getComponent(Animation).play();\r\n    }\r\n\r\n    quit() {\r\n        this.window.active = false;\r\n    }\r\n}\r\n","import {assetMgr} from \"../Managers/AssetBundleManager\";\r\nimport {CoreThrow} from \"../Common/CoreCommon\";\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\n\r\nimport JsonAsset = cc.JsonAsset;\r\nimport isChildClassOf = cc.js.isChildClassOf;\r\nimport {getMetaData} from \"../../../Utils/TypeUtils\";\r\n\r\nconst CACHE_KEY = '__exermonCache__';\r\n\r\ntype DataSetting = {\r\n\tdefault: any,\r\n\tproperties: {\r\n\t\t[K: string]: {\r\n\t\t\ttype: Constructor | Constructor[], default: any\r\n\t\t}\r\n\t},\r\n\tassetFields: {\r\n\t\t[K: string]: {\r\n\t\t\ttype: Constructor | Constructor[],\r\n\t\t\tbundleName: string, assetPath: string\r\n\t\t}\r\n\t}\r\n\toccasions: {[K: string]: number},\r\n\tdataPK: string\r\n}\r\nconst DataSettingKey = \"dataSetting\";\r\n\r\nexport class DataLoader {\r\n\r\n\tpublic static getSetting<T extends BaseData>(type: Constructor<T>) {\r\n\t\treturn getMetaData<DataSetting>(\r\n\t\t\ttype, DataSettingKey, {\r\n\t\t\t\tdefault: new type(),\r\n\t\t\t\tproperties: {},\r\n\t\t\t\tassetFields: {},\r\n\t\t\t\toccasions: {},\r\n\t\t\t\tdataPK: undefined\r\n\t\t\t});\r\n\t}\r\n\r\n\tpublic static getDefault<T extends BaseData>(type: Constructor<T>) {\r\n\t\treturn this.getSetting(type).default;\r\n\t}\r\n\tpublic static getProperties<T extends BaseData>(type: Constructor<T>) {\r\n\t\treturn this.getSetting(type).properties;\r\n\t}\r\n\tpublic static getDataPK<T extends BaseData>(type: Constructor<T>) {\r\n\t\treturn this.getSetting(type).dataPK;\r\n\t}\r\n\tprivate static getAssetFields<T extends BaseData>(type: Constructor<T>) {\r\n\t\treturn this.getSetting(type).assetFields;\r\n\t}\r\n\r\n\t// static getOrCreateCache<T extends BaseData>(\r\n\t// \ttype: Constructor<T> | Object) {\r\n\t// \t\tif (typeof type !== 'function')\r\n\t// \t\t\treturn this.getOrCreateCache(type.constructor);\r\n\t//\r\n\t// \treturn type[CACHE_KEY] ||= {\r\n\t// \t\t// @ts-ignore\r\n\t// \t\tdefault: new type(),\r\n\t// \t\tproto: {\r\n\t// \t\t\tproperties: { /* 每个字段的定义 */ },\r\n\t// \t\t\tassetFields: { /* 每个素材的定义 */ }\r\n\t// \t\t}\r\n\t// \t};\r\n\t// }\r\n\t// static getOrCreateCache<T extends BaseData>(\r\n\t// \ttype: Constructor<T> | Object) {\r\n\t// \tif (typeof type !== 'function')\r\n\t// \t\treturn this.getOrCreateCache(type.constructor);\r\n\t//\r\n\t// \tlet cache = type[CACHE_KEY];\r\n\t// \t// 如果还没有cache 或者 cache的类型和当前类型不一致\r\n\t// \tif (!cache || cache.default.constructor !== type) {\r\n\t// \t\tcache = this.createCache(type, cache);\r\n\t// \t\tconsole.log(\"[Cache]\", type, cache);\r\n\t// \t}\r\n\t//\r\n\t// \treturn cache;\r\n\t// }\r\n\t// private static createCache(type, parentCache) {\r\n\t// \tconst res = type[CACHE_KEY] = {\r\n\t// \t\t// @ts-ignore\r\n\t// \t\tdefault: new type(),\r\n\t// \t\tproto: {\r\n\t// \t\t\tproperties: { /* 每个字段的定义 */ },\r\n\t// \t\t\tassetFields: { /* 每个素材的定义 */ }\r\n\t// \t\t}\r\n\t// \t};\r\n\t// \tif (parentCache) {\r\n\t// \t\tObject.assign(res.proto.properties,\r\n\t// \t\t\tparentCache.proto.properties);\r\n\t// \t\tObject.assign(res.proto.assetFields,\r\n\t// \t\t\tparentCache.proto.assetFields);\r\n\t// \t}\r\n\t// \treturn res;\r\n\t// }\r\n\t// static getDefaultValue(obj, key) {\r\n\t// \tlet res = obj[key];\r\n\t// \tif (res && res.clone) res = res.clone();\r\n\t// \treturn res;\r\n\t// }\r\n\r\n\t// region 读取（反序列化）\r\n\r\n\tpublic static load<T extends BaseData>(\r\n\t\ttype: Constructor<T>, data = null,\r\n\t\tindex: number = null, parent: BaseData = null) : T {\r\n\t\tif (data == null) return data;\r\n\t\tlet res = new type(index, parent);\r\n\r\n\t\tif (data) {\r\n\t\t\tconst properties = this.getProperties(type);\r\n\t\t\tfor (const key in properties) if (key in data)\r\n\t\t\t\tthis.loadProp(res, key, properties[key], data[key]);\r\n\t\t}\r\n\r\n\t\tconst assetFields = this.getAssetFields(type);\r\n\t\tfor (const key in assetFields)\r\n\t\t\tthis.loadAsset(res, key, assetFields[key]);\r\n\r\n\t\tPromise.all(res.loadTasks())\r\n\t\t\t.then(() => res.isLoaded = true);\r\n\r\n\t\tres.onCreated();\r\n\t\treturn res;\r\n\t}\r\n\r\n\tpublic static async loadFromAssetBundle<T extends GameData>(\r\n\t\tbundleName: string, assetPath: string, type: Constructor<T>) : Promise<Object> {\r\n\r\n\t\tlet data: any = await assetMgr().loadAsset(\r\n\t\t\tJsonAsset, bundleName, assetPath);\r\n\t\tif (!data) return {};\r\n\r\n\t\treturn this.loadFromJSON(data.json, type);\r\n\t}\r\n\tpublic static loadFromJSON<T extends GameData>(\r\n\t\tjson: object[], type: Constructor<T>) : Object {\r\n\r\n\t\tif (!json) console.error(json, type);\r\n\r\n\t\tlet list: T[] = json ? json.map(this.load.bind(this, type)) : [];\r\n\r\n\t\tlet res = {};\r\n\t\tlist.forEach(d => res[d._id] = d);\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\tprivate static loadProp(res: BaseData, key: string, prop, data) {\r\n\t\ttry {\r\n\t\t\tlet pType = prop.type || prop.default?.constructor;\r\n\r\n\t\t\tres[key] = this.loadType(pType, data, res);\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(e, res, key, data, prop);\r\n\t\t}\r\n\t}\r\n\tprivate static loadAsset(res: BaseData, key: string, asset) {\r\n\t\tres.addLoadTask(asset.type, key, asset.bundleName, asset.assetPath);\r\n\t}\r\n\r\n\tprivate static loadType(type, data, parent, index = null) {\r\n\t\tif (data === null) return null;\r\n\r\n\t\tif (type instanceof Array) {\r\n\t\t\tthis.ensureType(Array, data);\r\n\r\n\t\t\tconst eType = type[0]; // 元素类型\r\n\t\t\treturn data.map((d, idx) =>\r\n\t\t\t\tthis.loadType(eType, d, parent, idx));\r\n\t\t}\r\n\r\n\t\tthis.ensureType(type, data);\r\n\t\treturn cc.js.isChildClassOf(type, BaseData) ?\r\n\t\t\tthis.load(type, data, index, parent) : data;\r\n\t}\r\n\r\n\tprivate static ensureType(type, data) {\r\n\t\tif (!type) return;\r\n\r\n\t\tconst isData = cc.js.isChildClassOf(type, BaseData);\r\n\t\tif (isData && data.constructor != Object)\r\n\t\t\tCoreThrow.SystemError(`Data type error: value = ${data}，type = ${type}`);\r\n\t\t\t// throw `Data type error: value = ${data}，type = ${type}`;\r\n\t\t\t// throw new DataLoaderError(type, data);\r\n\r\n\r\n\t\tif (!isData && !isChildClassOf(data.constructor, type))\r\n\t\t\tCoreThrow.SystemError(`Data type error: value = ${data}，type = ${type}`);\r\n\t\t// if (!isData && type != data.constructor)\r\n\t\t// \tCoreThrow.SystemError(`Data type error: value = ${data}，type = ${type}`);\r\n\t\t\t// throw `Data type error: value = ${data}，type = ${type}`;\r\n\t\t\t// throw new DataLoaderError(type, data);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 转化（序列化）\r\n\r\n\tpublic static convert<T extends BaseData>(\r\n\t\ttypeOrData: Constructor<T> | any, data?: any): Partial<T> {\r\n\t\tlet type: Constructor<T>;\r\n\t\tif (typeOrData instanceof Function)\r\n\t\t\ttype = typeOrData;\r\n\t\telse {\r\n\t\t\tdata = typeOrData;\r\n\t\t\tif (typeOrData instanceof BaseData)\r\n\t\t\t\ttype = data.constructor as Constructor<T>;\r\n\t\t}\r\n\r\n\t\tif (!data) return null;\r\n\r\n\t\tconst res = {};\r\n\t\tif (type) { // 赋值 type\r\n\t\t\tconst properties = this.getProperties(type);\r\n\t\t\tfor (const key in properties) if (key in data)\r\n\t\t\t\tthis.convertProp(res, key, properties[key], data[key]);\r\n\r\n\t\t} else { // 没有赋值 type\r\n\t\t\tconst keys = Object.keys(data);\r\n\t\t\tfor (const key of keys)\r\n\t\t\t\tthis.convertProp(res, key, null, data[key]);\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\tprivate static convertProp(res: object, key: string, prop, data) {\r\n\t\ttry {\r\n\t\t\tlet pType = prop?.type || prop?.default?.constructor || data?.constructor;\r\n\r\n\t\t\tres[key] = this.convertType(pType, data);\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(e, res, key, data, prop);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static convertType(type, data) {\r\n\t\tif (data === null) return null;\r\n\r\n\t\tif (type instanceof Array)\r\n\t\t\t// this.ensureType(Array, data); // Convert不需要保证类型\r\n\t\t\treturn data.map(d => this.convertType(type[0], d));\r\n\r\n\t\t// this.ensureType(type, data); // Convert不需要保证类型\r\n\t\treturn isChildClassOf(type, BaseData) ?\r\n\t\t\tthis.convert(data) : data;\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 转化（序列化）\r\n\r\n\t// public static convert<T extends BaseData>(data: BaseData) {\r\n\t// \tif (!data) return null;\r\n\t//\r\n\t// \tconst res = {};\r\n\t// \tconst type = data.constructor as Constructor<T>;\r\n\t// \tconst properties = this.getProperties(type);\r\n\t// \tfor (const key in properties)\r\n\t// \t\tres[key] = data[key];\r\n\t//\r\n\t// \treturn res;\r\n\t// }\r\n\r\n\t// endregion\r\n\r\n}\r\n\r\nimport {BaseData, GameData} from \"../Data/BaseData\";\r\n","import {CoreInterface} from \"../Common/CoreCommon\";\r\nimport {BaseManager, getManager, manager} from \"./BaseManager\";\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\nimport {PromiseUtils} from \"../../../Utils/PromiseUtils\";\r\nimport {GameData, PK} from \"../Data/BaseData\";\r\nimport {DataLoader} from \"../Utils/DataLoader\";\r\n\r\n// function data<T extends GameData>(\r\n// \tclazz: Constructor<T>, path: string = null) {\r\n// \treturn (target: DataManager, key) => {\r\n// \t\t// @ts-ignore\r\n// \t\ttarget.database ||= {};\r\n// \t\t// @ts-ignore\r\n// \t\ttarget.database[key] = {\r\n// \t\t\tclazz, path: path || key\r\n// \t\t};\r\n// \t}\r\n// }\r\n\r\nconst ClazzDataKey = \"dataName\";\r\n\r\nexport function waitForDataLoad(obj, key, desc) {\r\n\tconst oriFunc = desc.value;\r\n\tdesc.value = async function (...p) {\r\n\t\tawait PromiseUtils.waitFor(() => dataMgr().loadingProgress() >= 1);\r\n\t\treturn oriFunc.apply(this, p);\r\n\t}\r\n}\r\n\r\nexport function dataMgr() : DataManager {\r\n\treturn getManager(DataManager);\r\n}\r\n\r\n@manager\r\nclass DataManager extends BaseManager {\r\n\r\n\t/**\r\n\t * 数据库（内部处理用）\r\n\t */\r\n\tprivate database = {};\r\n\tprivate isLoaded = false;\r\n\r\n\t/**\r\n\t * 初始化\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._initializeData().then();\r\n\t}\r\n\tprivate async _initializeData() {\r\n\t\tthis.isLoaded = false;\r\n\r\n\t\tconst res = await CoreInterface.GetData();\r\n\r\n\t\tawait this._initializeDatabase(res.data);\r\n\r\n\t\tthis.isLoaded = true;\r\n\t}\r\n\tprivate async _initializeDatabase(data) {\r\n\t\t// const bundleName = BundleName.Data;\r\n\t\tfor (const key in this.database) {\r\n\t\t\tconst item = this.database[key];\r\n\t\t\titem.data = await DataLoader.loadFromJSON(\r\n\t\t\t\tdata[item.name], item.clazz);\r\n\t\t\t// this[key] = await DataLoader.loadFromAssetBundle(\r\n\t\t\t// \tbundleName, item.path, item.clazz)\r\n\t\t}\r\n\t\tconsole.log(\"Database: \", this.database);\r\n\t}\r\n\r\n\t/**\r\n\t * 注册数据\r\n\t */\r\n\tpublic async registerData<T extends GameData>(\r\n\t\tclazz: Constructor<T>, name: string) {\r\n\t\tclazz[ClazzDataKey] = name;\r\n\r\n\t\tthis.database[name] = {\r\n\t\t\tclazz, name, data: []\r\n\t\t\t\t// await DataLoader.loadFromAssetBundle(\r\n\t\t\t\t// \tBundleName.Data, path, clazz)\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * 数据获取\r\n\t */\r\n\tpublic getData<T extends GameData>(\r\n\t\tclazz: Constructor<T> | string,\r\n\t\tval: any, dataKey: string = \"_id\") : T {\r\n\t\tif (dataKey != \"_id\")\r\n\t\t\treturn this.getDataList(clazz)\r\n\t\t\t\t.find(d => d[dataKey] == val);\r\n\r\n\t\treturn typeof val === 'string' ?\r\n\t\t\tthis.getDataById(clazz, val) :\r\n\t\t\tthis.getDataByIndex(clazz, val);\r\n\t}\r\n\tpublic getDataByIndex<T extends GameData>(\r\n\t\tclazz: Constructor<T> | string, idx: number) : T {\r\n\t\treturn this.getDataList(clazz)[idx];\r\n\t}\r\n\tpublic getDataById<T extends GameData>(\r\n\t\tclazz: Constructor<T> | string, id: PK) : T {\r\n\t\treturn this.getDataDict(clazz)[id];\r\n\t}\r\n\tpublic getDataList<T extends GameData>(\r\n\t\tclazz: Constructor<T> | string) : T[] {\r\n\t\tconst dict = this.getDataDict(clazz);\r\n\t\treturn Object.values(dict);\r\n\t}\r\n\tpublic getDataDict<T extends GameData>(\r\n\t\tclazz: Constructor<T> | string) : Object {\r\n\t\tif (typeof clazz !== 'string')\r\n\t\t\tclazz = this.getDataName(clazz);\r\n\t\treturn this.database[clazz].data;\r\n\t}\r\n\tpublic getDataName<T extends GameData>(\r\n\t\tclazz: Constructor<T>): string {\r\n\t\treturn clazz[ClazzDataKey];\r\n\t}\r\n\r\n\t/**\r\n\t * 所有数据\r\n\t */\r\n\tpublic allData() {\r\n\t\tlet res = [];\r\n\t\tfor (const key in this.database)\r\n\t\t\tres = res.concat(Object.values(this.database[key].data));\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 读取进度\r\n\t */\r\n\tpublic loadingProgress() {\r\n\t\tif (!this.isLoaded) return 0;\r\n\r\n\t\tlet data = this.allData();\r\n\t\treturn data.reduce((res, e) =>\r\n\t\t\tres + (e.isLoaded ? 1 : 0), 0) / data.length;\r\n\t}\r\n\r\n}\r\n\r\n","\r\nexport class DateUtils {\r\n\r\n\tpublic static DayTime = 24*60*60*1000;\r\n\r\n\t/**\r\n\t * 日期转化为字符串\r\n\t */\r\n\tpublic static time2DateStr(time: number) {\r\n\t\tconst date = new Date(time);\r\n\t\tconst year = date.getFullYear().toString();\r\n\t\tconst month = (date.getMonth() + 1).toString().padStart(2, \"0\");\r\n\t\tconst day = date.getDate().toString().padStart(2, \"0\");\r\n\r\n\t\treturn `${year}/${month}/${day}`;\r\n\t}\r\n\r\n\t/**\r\n\t * 日期转化为字符串\r\n\t */\r\n\tpublic static time2Str(time: number) {\r\n\t\tconst date = new Date(time);\r\n\t\tconst year = date.getFullYear().toString();\r\n\t\tconst month = (date.getMonth() + 1).toString().padStart(2, \"0\");\r\n\t\tconst day = date.getDate().toString().padStart(2, \"0\");\r\n\t\tconst hour = date.getHours().toString().padStart(2, \"0\");\r\n\t\tconst minute = date.getMinutes().toString().padStart(2, \"0\");\r\n\t\tconst second = date.getSeconds().toString().padStart(2, \"0\");\r\n\r\n\t\treturn `${year}/${month}/${day} ${hour}:${minute}:${second}`;\r\n\t}\r\n\r\n\t/**\r\n\t * 日期转化为字符串\r\n\t */\r\n\tpublic static time2StrInFile(time: number) {\r\n\t\tconst date = new Date(time);\r\n\t\tconst month = (date.getMonth() + 1).toString().padStart(2, \"0\");\r\n\t\tconst day = date.getDate().toString().padStart(2, \"0\");\r\n\t\tconst hour = date.getHours().toString().padStart(2, \"0\");\r\n\t\tconst minute = date.getMinutes().toString().padStart(2, \"0\");\r\n\t\tconst second = date.getSeconds().toString().padStart(2, \"0\");\r\n\r\n\t\treturn `${month}${day}-${hour}${minute}${second}`;\r\n\t}\r\n\r\n\t/**\r\n\t * 时间转化为字符串\r\n\t */\r\n\tpublic static sec2Str(sec: number) {\r\n\t\tif (sec < 60) return sec.toString();\r\n\t\treturn Math.floor(sec / 60) + \":\" +\r\n\t\t\t(sec % 60).toString().padStart(2, \"0\");\r\n\t}\r\n\r\n\t/**\r\n\t * 将时间转换为日期\r\n\t * @param date\r\n\t */\r\n\tpublic static date2DayStart(date: Date | number) {\r\n\t\tlet res = new Date(date)\r\n\t\tres.setHours(0,0,0,0);\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 判断指定日期是否为今天\r\n\t * @param date\r\n\t */\r\n\tpublic static isToday(date: Date | number) {\r\n\t\treturn this.dayDiff(new Date(), date) == 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取date1到date2之间相隔的天数\r\n\t */\r\n\tpublic static dayDiff(date1: Date | number, date2: Date | number) {\r\n\t\tif (typeof date1 == 'number' && date1 <= 0)\r\n\t\t\treturn Number.NEGATIVE_INFINITY;\r\n\t\tif (typeof date2 == 'number' && date2 <= 0)\r\n\t\t\treturn Number.POSITIVE_INFINITY;\r\n\r\n\t\tconst day1 = this.date2DayStart(date1).getTime();\r\n\t\tconst day2 = this.date2DayStart(date2).getTime();\r\n\r\n\t\treturn (day1 - day2) / this.DayTime;\r\n\t}\r\n\r\n}\r\n","\r\nexport function cache(obj, key, desc) {\r\n\tconst oriFun = desc.value;\r\n\tdesc.value = function (): Promise<any> | any {\r\n\t\tif (this[key + \"_CACHE\"]) return this[key + \"_CACHE\"];\r\n\r\n\t\tconst res = oriFun.apply(this);\r\n\t\t// 如果是Promise需要进行特殊处理，保证非Promise时候是同步状态\r\n\t\tif (res instanceof Promise)\r\n\t\t\treturn res.then(r => this[key + \"_CACHE\"] = r)\r\n\t\treturn this[key + \"_CACHE\"] = res;\r\n\t}\r\n}\r\n","import requireComponent = cc._decorator.requireComponent;\r\nimport Button = cc.Button;\r\nimport Sprite = cc.Sprite;\r\nimport SpriteFrame = cc.SpriteFrame;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\n@requireComponent(Button)\r\n@requireComponent(Sprite)\r\nexport default class NewClass extends cc.Component {\r\n\r\n    button: Button = null;\r\n    sprite: Sprite = null;\r\n\r\n    @property([SpriteFrame])\r\n    pictures: SpriteFrame[] = [null, null];\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n        this.button = this.getComponent(Button);\r\n        this.sprite = this.getComponent(Sprite);\r\n    }\r\n\r\n    update (dt) {\r\n        this.sprite.spriteFrame = this.pictures[this.button.interactable ? 0 : 1];\r\n    }\r\n}\r\n","import {GameData} from \"./BaseData\";\r\n\r\nexport abstract class DynamicData extends GameData {\r\n\r\n\tpublic get syncAble() { return true; }\r\n\tpublic get removeAble() {  return false; }\r\n\r\n\t// public sync() : undefined | Promise<SyncResult>;\r\n\t// public remove() : undefined | Promise<RemoveResult>;\r\n\r\n\t/**\r\n\t * 业务主键\r\n\t */\r\n\tpublic get dataId(): string {\r\n\t\t// @ts-ignore\r\n\t\treturn this[DataLoader.getDataPK(this.constructor)];\r\n\t}\r\n\r\n}\r\n","import {error, get, post} from \"../../CoreModule/Common/CoreCommon\";\r\n\r\nexport class EconomicThrow {\r\n\r\n    @error(400001, \"持有货币不足\") static NotEnoughMoney(d?) {}\r\n    @error(400002, \"持有碎片不足\") static NotEnoughFragment(d?) {}\r\n    @error(400003, \"回城次数不足\") static NotEnoughReturn(d?) {}\r\n    @error(400011, \"无法解锁打工点\") static CanNotUnlockJob(d?) {}\r\n    @error(400012, \"打工点已解锁\") static JobAlreadyUnlocked(d?) {}\r\n    @error(400013, \"打工点未解锁\") static JobNotUnlocked(d?) {}\r\n    @error(400014, \"到达打工等级上限\") static ReachJobMaxLevel(d?) {}\r\n    @error(400015, \"领取时间未到\") static NotJobProfitTime(d?) {}\r\n    @error(400016, \"解锁打工点失败\") static UnlockJobError(d?) {}\r\n    @error(400017, \"升级打工点失败\") static UpgradeJobError(d?) {}\r\n    @error(400018, \"领取打工金币失败\") static ProfitJobError(d?) {}\r\n\r\n}\r\n\r\nexport class EconomicInterface {\r\n\r\n    @post(\"/job/job/unlock\") static UnlockJob(d?): any {}\r\n    @post(\"/job/job/upgrade\") static UpgradeJob(d?): any {}\r\n    @post(\"/job/job/profit\") static ProfitJob(d?): any {}\r\n\r\n}\r\n","import {BaseManager, getManager, manager} from \"../../CoreModule/Managers/BaseManager\";\r\nimport {EconomicInterface} from \"../Common/EconomicCommon\";\r\nimport {PlayerJob, PlayerJobItem} from \"../Data/PlayerJob\";\r\nimport {handleError} from \"../../CoreModule/Managers/AlertManager\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nexport function economicMgr() {\r\n    return getManager(EconomicManager);\r\n}\r\n\r\n@manager\r\nexport default class EconomicManager extends BaseManager {\r\n\r\n    playerJob: PlayerJob = null;\r\n    jobItems: PlayerJobItem[] = [];\r\n\r\n    update(dt: number) {\r\n        super.update(dt);\r\n        if (this.playerJob?.isAutoProfit)\r\n            this.profitAutoCheck();\r\n    }\r\n\r\n    // region 玩家操作处理\r\n\r\n    @handleError\r\n    public async profit(id : number) {\r\n        const jobItem = this.jobItems.find(j => j.jobId == id);\r\n        await EconomicInterface.ProfitJob({id: jobItem.jobId});\r\n        jobItem.profitConditions().process();\r\n        jobItem.profitRewards().invoke();\r\n        jobItem.profit();\r\n    }\r\n\r\n    @handleError\r\n    public async upgrade(id : number) {\r\n        const jobItem = this.jobItems.find(j => j.jobId == id);\r\n        if (jobItem.curLevel <= 0) { // 未解锁\r\n            await EconomicInterface.UnlockJob({id: jobItem.jobId});\r\n            jobItem.unlockConditions().process();\r\n        } else {\r\n            await EconomicInterface.UpgradeJob({id: jobItem.jobId});\r\n            jobItem.upgradeConditions().process();\r\n        }\r\n        jobItem.upgrade();\r\n    }\r\n\r\n    // endregion\r\n\r\n    // region 自动操作检测\r\n\r\n    private profitAutoCheck() {\r\n        this.jobItems.forEach(j => {\r\n            if (!j.profitConditions().judge()) return;\r\n            j.profitRewards().invoke();\r\n            j.profit();\r\n        })\r\n    }\r\n\r\n    // endregion\r\n\r\n}\r\n","import {get, post} from \"../../CoreModule/Common/CoreCommon\";\r\n\r\nexport class EditorInterface {\r\n\r\n\t@post(\"/editor/config/push\", true, false) static PushConfig(d?): any {}\r\n\t@get(\"/editor/config/pull\", true, false) static PullConfig(d?): any {}\r\n\t@post(\"/editor/config/save\", true, false) static SaveConfig(d?): any {}\r\n\t@post(\"/editor/config/recalc\", true, false) static RecalcConfig(d?): any {}\r\n\t@post(\"/editor/part/import\", true, false) static ImportParts(d?): any {}\r\n\r\n}\r\n","import {BaseManager, getManager, manager} from \"../../CoreModule/Managers/BaseManager\";\r\nimport {configMgr} from \"../../CoreModule/Managers/ConfigManager\";\r\nimport PartConfig from \"../Configs/PartConfig\";\r\nimport {EditorInterface} from \"../Common/EditorCommon\";\r\nimport {AlertDialogType, alertMgr} from \"../../CoreModule/Managers/AlertManager\";\r\nimport {showLoading} from \"../../CoreModule/Managers/LoadingManager\";\r\nimport {DateUtils} from \"../../../Utils/DateUtils\";\r\n\r\nexport function editorMgr() {\r\n\treturn getManager(EditorManager);\r\n}\r\n\r\nexport type ChangeType = \"pHtScale\" |\r\n\t\"ptBptScale\" | \"ptBptOffset\" | \"ptBptHidden\" |\r\n\t\"clothes6Problem\" | \"weapon3Problem\" | \"footOffset\";\r\nexport type ChangeValue =\r\n\tnumber | [number, number] | string[] | boolean;\r\nexport type ChangeInfo = {\r\n\tkey: ChangeType\r\n\tpath: number[] // 变更路径\r\n\tori?: ChangeValue\r\n\tval: ChangeValue\r\n}\r\n\r\n// 读取文件方式\r\nexport enum FileType {\r\n\tDataUrl,// readAsDataURL, base64\r\n\tText,// readAsText\r\n\tBinary,// readAsBinaryString\r\n\tArrayBuffer,// readAsArrayBuffer\r\n}\r\n\r\n@manager\r\nclass EditorManager extends BaseManager {\r\n\r\n\tpublic changes: {[T: string]:ChangeInfo} = {};\r\n\r\n\tprivate _config;\r\n\tpublic get config() {\r\n\t\treturn this._config ||= configMgr().config(PartConfig);\r\n\t}\r\n\r\n\t// region 配置获取\r\n\r\n\tprivate getMapValue(cKey: keyof PartConfig, id1, id2,\r\n\t\t\t\t\t\t\t\t\t\t\tdefault_, add = false) {\r\n\t\tconst key = `${id1}-${id2}`;\r\n\t\tlet res = this.config[cKey][key];\r\n\r\n\t\tif (res == undefined) {\r\n\t\t\tres = default_;\r\n\t\t\tif (add) this.config[cKey][key] = default_;\r\n\t\t}\r\n\t\tif (res instanceof Array) res = res.slice();\r\n\t\treturn res;\r\n\t}\r\n\tprivate setMapValue(cKey, id1, id2, val) {\r\n\t\tconst key = `${id1}-${id2}`;\r\n\t\treturn this.config[cKey][key] = val;\r\n\t}\r\n\r\n\tpublic getPHtScale(ptId: number, fhtId: number, htId: number) {\r\n\t\tconst res = this.config.pHtScale[ptId][fhtId][htId];\r\n\t\treturn res === undefined ? 1 : res;\r\n\t}\r\n\tpublic getPtBptScale(pOriId, bpOriId,\r\n\t\t\t\t\t\t\t\t\t\t\t default_ = 1,\r\n\t\t\t\t\t\t\t\t\t\t\t add = false): number {\r\n\t\treturn this.getMapValue(\"ptBptScale\", pOriId, bpOriId, default_, add);\r\n\t}\r\n\tpublic getPtBptOffset(pOriId, bpOriId,\r\n\t\t\t\t\t\t\t\t\t\t\t\tdefault_: [number, number] = [0, 0],\r\n\t\t\t\t\t\t\t\t\t\t\t\tadd = false): [number, number] {\r\n\t\treturn this.getMapValue(\"ptBptOffset\", pOriId, bpOriId, default_, add);\r\n\t}\r\n\tpublic getPtBptHidden(pOriId, bpOriId,\r\n\t\t\t\t\t\t\t\t\t\t\t\tdefault_: string[] = [],\r\n\t\t\t\t\t\t\t\t\t\t\t\tadd = false): string[] {\r\n\t\treturn this.getMapValue(\"ptBptHidden\", pOriId, bpOriId, default_, add);\r\n\t}\r\n\tpublic getClothes6Problem(pOriId, hpOriId,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdefault_ = false,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tadd = false): boolean {\r\n\t\treturn this.getMapValue(\"clothes6Problem\", pOriId, hpOriId, default_, add);\r\n\t}\r\n\tpublic getWeapon3Problem(pOriId, hpOriId,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t default_ = false,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t add = false): boolean {\r\n\t\treturn this.getMapValue(\"weapon3Problem\", pOriId, hpOriId, default_, add);\r\n\t}\r\n\tpublic getFootOffset(bodyId, default_ = [0, 0],\r\n\t\t\t\t\t\t\t\t\t\t\t add = false): [number, number] {\r\n\t\tlet res = this.config.footOffset[bodyId];\r\n\r\n\t\tif (res == undefined) {\r\n\t\t\tres = default_;\r\n\t\t\tif (add) this.config.footOffset[bodyId] = default_;\r\n\t\t}\r\n\t\treturn res.slice();\r\n\t}\r\n\r\n\t// public getPtBptScale(pOriId, bpOriId, default_: number = 1): number {\r\n\t// \treturn this.getPtBptScaleConfig(pOriId, bpOriId, default_)[2];\r\n\t// }\r\n\t// public getPtBptOffset(pOriId, bpOriId, default_: [number, number] = [0, 0]): [number, number] {\r\n\t// \treturn this.getPtBptOffsetConfig(pOriId, bpOriId, default_)[2].slice() as [number, number];\r\n\t// }\r\n\t// public getPtBptHidden(pOriId, bpOriId, default_: string[] = []): string[] {\r\n\t// \treturn this.getPtBptHiddenConfig(pOriId, bpOriId, default_)[2].slice();\r\n\t// }\r\n\r\n\tprivate setPHtScale(ptId, fhtId, htId, val) {\r\n\t\treturn this.config.pHtScale[ptId][fhtId][htId] = val;\r\n\t}\r\n\tprivate setPtBptScale(pOriId, bpOriId, val: number) {\r\n\t\treturn this.setMapValue(\"ptBptScale\", pOriId, bpOriId, val);\r\n\t}\r\n\tprivate setPtBptOffset(pOriId, bpOriId, val: [number, number]) {\r\n\t\treturn this.setMapValue(\"ptBptOffset\", pOriId, bpOriId, val);\r\n\t}\r\n\tprivate setPtBptHidden(pOriId, bpOriId, val: string[]) {\r\n\t\treturn this.setMapValue(\"ptBptHidden\", pOriId, bpOriId, val);\r\n\t}\r\n\tprivate setClothes6Problem(pOriId, hpOriId, val: boolean) {\r\n\t\treturn this.setMapValue(\"clothes6Problem\", pOriId, hpOriId, val);\r\n\t}\r\n\tprivate setWeapon3Problem(pOriId, hpOriId, val: boolean) {\r\n\t\treturn this.setMapValue(\"weapon3Problem\", pOriId, hpOriId, val);\r\n\t}\r\n\tprivate setFootOffset(bodyId, val: boolean) {\r\n\t\treturn this.config.footOffset[bodyId] = val;\r\n\t}\r\n\r\n\tpublic getConfig(key: ChangeType, path: number[]) {\r\n\t\tswitch (key) {\r\n\t\t\tcase \"pHtScale\": // @ts-ignore\r\n\t\t\t\treturn this.getPHtScale(...path);\r\n\t\t\tcase \"ptBptScale\": // @ts-ignore\r\n\t\t\t\treturn this.getPtBptScale(...path);\r\n\t\t\tcase \"ptBptOffset\": // @ts-ignore\r\n\t\t\t\treturn this.getPtBptOffset(...path);\r\n\t\t\tcase \"ptBptHidden\": // @ts-ignore\r\n\t\t\t\treturn this.getPtBptHidden(...path);\r\n\t\t\tcase \"clothes6Problem\": // @ts-ignore\r\n\t\t\t\treturn this.getClothes6Problem(...path);\r\n\t\t\tcase \"weapon3Problem\": // @ts-ignore\r\n\t\t\t\treturn this.getWeapon3Problem(...path);\r\n\t\t\tcase \"footOffset\": // @ts-ignore\r\n\t\t\t\treturn this.getFootOffset(...path);\r\n\t\t}\r\n\t}\r\n\tprivate setConfig(key: ChangeType, path: number[], val: ChangeValue) {\r\n\t\tswitch (key) {\r\n\t\t\tcase \"pHtScale\": // @ts-ignore\r\n\t\t\t\treturn this.setPHtScale(...path, val);\r\n\t\t\tcase \"ptBptScale\": // @ts-ignore\r\n\t\t\t\treturn this.setPtBptScale(...path, val);\r\n\t\t\tcase \"ptBptOffset\": // @ts-ignore\r\n\t\t\t\treturn this.setPtBptOffset(...path, val);\r\n\t\t\tcase \"ptBptHidden\": // @ts-ignore\r\n\t\t\t\treturn this.setPtBptHidden(...path, val);\r\n\t\t\tcase \"clothes6Problem\": // @ts-ignore\r\n\t\t\t\treturn this.setClothes6Problem(...path, val);\r\n\t\t\tcase \"weapon3Problem\": // @ts-ignore\r\n\t\t\t\treturn this.setWeapon3Problem(...path, val);\r\n\t\t\tcase \"footOffset\": // @ts-ignore\r\n\t\t\t\treturn this.setFootOffset(...path, val);\r\n\t\t}\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 配置变更\r\n\r\n\tpublic changePtBptScale(ptId, bptId, val) {\r\n\t\tthis.addChange(\"ptBptScale\", [ptId, bptId], val);\r\n\t}\r\n\tpublic changePtBptOffset(ptId, bptId, val) {\r\n\t\tthis.addChange(\"ptBptOffset\", [ptId, bptId], val);\r\n\t}\r\n\tpublic changePHtScale(ptId, htId, chtId, val) {\r\n\t\tthis.addChange(\"pHtScale\", [ptId, htId, chtId], val);\r\n\t}\r\n\tpublic changePtBptHidden(ptId, bptId, val) {\r\n\t\tthis.addChange(\"ptBptHidden\", [ptId, bptId], val);\r\n\t}\r\n\tpublic changeClothes6Problem(ptId, bptId, val) {\r\n\t\tthis.addChange(\"clothes6Problem\", [ptId, bptId], val);\r\n\t}\r\n\tpublic changeWeapon3Problem(ptId, bptId, val) {\r\n\t\tthis.addChange(\"weapon3Problem\", [ptId, bptId], val);\r\n\t}\r\n\tpublic changeFootOffset(bodyId, val) {\r\n\t\tthis.addChange(\"footOffset\", [bodyId], val);\r\n\t}\r\n\r\n\tprivate getKey(key: ChangeType, path: number[]) {\r\n\t\treturn key + \".\" + path.join(\",\");\r\n\t}\r\n\r\n\tpublic getChange(key: ChangeType, path: number[]) {\r\n\t\treturn this.changes[this.getKey(key, path)];\r\n\t}\r\n\r\n\tpublic addChange(changeOrKey: ChangeInfo | ChangeType,\r\n\t\t\t\t\t\t\t\t\t path?: number[], val?: ChangeValue) {\r\n\t\tif (typeof changeOrKey == \"string\") { // key\r\n\t\t\tconst key = changeOrKey;\r\n\t\t\tconst cKey = this.getKey(key, path);\r\n\t\t\tconst res = this.changes[cKey] ||= {\r\n\t\t\t\tkey, path, val, ori: this.getConfig(key, path)\r\n\t\t\t};\r\n\t\t\t// const res = this.changes[cKey] ||= { key, path, val };\r\n\t\t\t// res.ori = res.ori === undefined ? this.getConfig(key, path) : res.ori;\r\n\t\t\tthis.setConfig(key, path, res.val = val);\r\n\t\t\treturn res;\r\n\t\t}\r\n\t\t// ChangeInfo\r\n\t\tconst change = changeOrKey;\r\n\t\tconst cKey = this.getKey(change.key, change.path);\r\n\t\tconst oldChange = this.changes[cKey];\r\n\t\tif (oldChange) // 如果已经有变更了，需要合并\r\n\t\t\tthis.addChange(change.key, change.path,\r\n\t\t\t\tthis.getMergeVal(change.key, oldChange.val, change.val))\r\n\t\telse\r\n\t\t\tthis.addChange(change.key, change.path, change.val);\r\n\t}\r\n\r\n\tprivate getMergeVal(key: ChangeType,\r\n\t\t\t\t\t\t\t\t\t\t\told: ChangeValue,\r\n\t\t\t\t\t\t\t\t\t\t\tnew_: ChangeValue) {\r\n\t\t// let dist;\r\n\t\t// switch (key) {\r\n\t\t// \tcase \"pHtScale\": case \"ptBptScale\":\r\n\t\t// \t\t// 计算缩放值与1的距离，取距离最长的值，如果相等，取新的值\r\n\t\t// \t\tdist = (val) => val == 0 ? Infinity :\r\n\t\t// \t\t\tval > 1 ? val - 1 : 1 / val - 1; break;\r\n\t\t// \tcase \"ptBptOffset\":\r\n\t\t// \t\t// 计算偏移量与[0, 0]的距离，取距离最长的值，如果相等，取新的值\r\n\t\t// \t\tdist = (val: [number, number]) =>\r\n\t\t// \t\t\tval[0] * val[0] + val[1] * val[1]; break;\r\n\t\t// \tcase \"ptBptHidden\":\r\n\t\t// \t\tdist = (val: string[]) => val.length; break;\r\n\t\t// \tcase \"clothes6Problem\":\r\n\t\t// \t\tdist = (val: boolean) => val ? 1 : 0; break;\r\n\t\t// }\r\n\t\treturn new_; // dist(old) > dist(new_) ? old : new_;\r\n\t}\r\n\r\n\tpublic resetChange(key, path) {\r\n\t\tconst cKey = this.getKey(key, path);\r\n\t\tconst change = this.changes[cKey];\r\n\t\tif (!change) return;\r\n\t\tthis.setConfig(key, path, change.ori);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 配置同步\r\n\r\n\t/**\r\n\t * 导出全部\r\n\t */\r\n\tpublic exportAll() {\r\n\t\tconsole.log(this.config);\r\n\t\tconst str = JSON.stringify(this.config);\r\n\t\tthis.saveForBrowser(str, `export-all-${DateUtils.time2StrInFile(Date.now())}.json`);\r\n\t\tthis.copyToClipboard(str);\r\n\t\talertMgr().alert('全部数据已下载并复制到粘贴板！',\r\n\t\t\t\"\", AlertDialogType.OK).then();\r\n\t}\r\n\r\n\t/**\r\n\t * 导出\r\n\t */\r\n\tpublic export() {\r\n\t\tconsole.log(this.changes);\r\n\t\tconst str = JSON.stringify(this.changes);\r\n\t\tthis.saveForBrowser(str, `export-${DateUtils.time2StrInFile(Date.now())}.json`);\r\n\t\tthis.copyToClipboard(str);\r\n\t\talertMgr().alert('配置变更已下载并复制到粘贴板！',\r\n\t\t\t\"\", AlertDialogType.OK).then();\r\n\t}\r\n\tprivate copyToClipboard(str) {\r\n\t\tconst input = document.createElement('input');\r\n\t\tdocument.body.appendChild(input);\r\n\t\tinput.setAttribute('value', str);\r\n\t\tinput.select();\r\n\t\tif (document.execCommand('copy')) {\r\n\t\t\tdocument.execCommand('copy');\r\n\t\t}\r\n\t\tdocument.body.removeChild(input);\r\n\t}\r\n\r\n\t/**\r\n\t * 导入\r\n\t */\r\n\t@showLoading\r\n\tpublic async import() {\r\n\t\tconst file = await this.openLocalFile(\"*.json\");\r\n\t\tconst str = await this.readLocalFile(file, FileType.Text) as string;\r\n\t\tconsole.log(\"str:\", str);\r\n\t\tconst data = JSON.parse(str);\r\n\t\tconsole.log(\"data:\", data);\r\n\r\n\t\tObject.values<any>(data).forEach(\r\n\t\t\tchange => this.addChange(change));\r\n\t}\r\n\r\n\t/**\r\n\t * 提交\r\n\t */\r\n\tpublic async push() {\r\n\t\tawait EditorInterface.PushConfig({changes: this.changes});\r\n\t\talertMgr().alert('成功提交当前更改！',\r\n\t\t\t\"\", AlertDialogType.OK).then();\r\n\t}\r\n\r\n\t/**\r\n\t * 拉取\r\n\t */\r\n\tpublic async pull() {\r\n\t\tconst res = await EditorInterface.PullConfig();\r\n\t\tconsole.log(res);\r\n\r\n\t\tObject.values<any>(res.changes).forEach(\r\n\t\t\tchange => this.addChange(change));\r\n\t\tObject.assign(this.config, res.config);\r\n\r\n\t\talertMgr().alert('成功拉取最新配置！',\r\n\t\t\t\"\", AlertDialogType.OK).then();\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 导入/导出文件操作\r\n\r\n\t// 保存字符串内容到文件。\r\n\t// 效果相当于从浏览器下载了一个文件到本地。\r\n\t// textToWrite - 要保存的文件内容\r\n\t// fileNameToSaveAs - 要保存的文件名\r\n\tsaveForBrowser(textToWrite, fileNameToSaveAs) {\r\n\t\tif (cc.sys.isBrowser) {\r\n\t\t\tconsole.log(\"浏览器\");\r\n\t\t\tlet textFileAsBlob = new Blob([textToWrite], {type:'application/json'});\r\n\t\t\tlet downloadLink = document.createElement(\"a\");\r\n\t\t\tdownloadLink.download = fileNameToSaveAs;\r\n\t\t\tdownloadLink.innerHTML = \"Download File\";\r\n\t\t\tif (window.webkitURL != null)\r\n\t\t\t{\r\n\t\t\t\t// Chrome allows the link to be clicked\r\n\t\t\t\t// without actually adding it to the DOM.\r\n\t\t\t\tdownloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// Firefox requires the link to be added to the DOM\r\n\t\t\t\t// before it can be clicked.\r\n\t\t\t\tdownloadLink.href = window.URL.createObjectURL(textFileAsBlob);\r\n\t\t\t\t// downloadLink.onclick = destroyClickedElement;\r\n\t\t\t\tdownloadLink.style.display = \"none\";\r\n\t\t\t\tdocument.body.appendChild(downloadLink);\r\n\t\t\t}\r\n\t\t\tdownloadLink.click();\r\n\t\t}\r\n\t}\r\n\r\n\t// TS\r\n\t// 使用input调起文件选择窗口\r\n\topenLocalFile(accept: string) {\r\n\t\tlet inputEl: HTMLInputElement = <HTMLInputElement>document.getElementById('file_input');\r\n\t\tif (!inputEl) {\r\n\t\t\tinputEl = document.createElement('input');\r\n\t\t\tinputEl.id = 'file_input';\r\n\t\t\tinputEl.setAttribute('id', 'file_input');\r\n\t\t\tinputEl.setAttribute('type', 'file');\r\n\t\t\tinputEl.setAttribute('class', 'fileToUpload');\r\n\t\t\tinputEl.style.opacity = '0';\r\n\t\t\tinputEl.style.position = 'absolute';\r\n\t\t\tinputEl.setAttribute('left', '-999px');\r\n\t\t\tdocument.body.appendChild(inputEl);\r\n\t\t}\r\n\r\n\t\taccept = accept || \".*\";\r\n\t\tinputEl.setAttribute('accept', accept);\r\n\r\n\t\treturn new Promise<File>(resolve => {\r\n\t\t\tinputEl.onchange = (event) => {\r\n\t\t\t\t// console.log('xxx onchange2', event, inputEl.files);\r\n\t\t\t\tlet files = inputEl.files\r\n\t\t\t\tconsole.log(\"event\", event, \"files\", files);\r\n\t\t\t\tresolve(files[0]);\r\n\t\t\t}\r\n\t\t\tinputEl.click();\r\n\t\t})\r\n\t}\r\n\r\n\t// 读取本地文件数据\r\n\treadLocalFile(file: File, readType: FileType) {\r\n\t\tconst reader = new FileReader();\r\n\t\treturn new Promise<string | ArrayBuffer>(resolve => {\r\n\t\t\treader.onload = function (event) {\r\n\t\t\t\tif (reader.readyState == FileReader.DONE)\r\n\t\t\t\t\tresolve(reader.result);\r\n\t\t\t\telse resolve(null);\r\n\t\t\t};\r\n\t\t\tswitch (readType) {\r\n\t\t\t\tcase FileType.DataUrl:\r\n\t\t\t\t\treader.readAsDataURL(file);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase FileType.Text:\r\n\t\t\t\t\treader.readAsText(file);   //作为字符串读出\r\n\t\t\t\t\t//reader.readAsText(file,'gb2312');   //默认是用utf-8格式输出的，想指定输出格式就再添加一个参数，像txt的ANSI格式只能用国标才能显示出来\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase FileType.Binary:\r\n\t\t\t\t\treader.readAsBinaryString(file);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase FileType.ArrayBuffer:\r\n\t\t\t\t\treader.readAsArrayBuffer(file);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t// base64生成Texture2D\r\n\tbase64ToTexture2D(base64: string, callback: (this: void, texture: cc.Texture2D) => void) {\r\n\t\tif (base64) {\r\n\t\t\tvar img = new Image();\r\n\t\t\timg.onload = function () {\r\n\t\t\t\tvar texture = new cc.Texture2D();\r\n\t\t\t\ttexture.initWithElement(img);\r\n\t\t\t\ttexture.handleLoadedTexture();\r\n\t\t\t\tif (callback) callback(texture);\r\n\t\t\t}\r\n\t\t\timg.onerror = function (err) {\r\n\t\t\t}\r\n\t\t\tif ((<any>base64).startsWith !== undefined && (<any>base64).startsWith(\"data:image\")) {\r\n\t\t\t\timg.src = base64;\r\n\t\t\t} else {\r\n\t\t\t\timg.src = \"data:image/png;base64,\" + base64;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (callback) callback(null);\r\n\t\t}\r\n\t}\r\n\r\n\t// base64生成cc.SpriteFrame\r\n\tbase64ToSpriteFrame(base64: string, callback: (this: void, spriteFrame: cc.SpriteFrame) => void) {\r\n\t\tthis.base64ToTexture2D(base64, (texture: cc.Texture2D) => {\r\n\t\t\tif (texture) {\r\n\t\t\t\tvar newframe = new cc.SpriteFrame(texture);\r\n\t\t\t\tif (callback) callback(newframe);\r\n\t\t\t} else {\r\n\t\t\t\tif (callback) callback(null);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// endregion\r\n}\r\n\r\n","import {BaseData, field} from \"../../CoreModule/Data/BaseData\";\r\n\r\nexport enum EffectType {\r\n\tNone = \"none\",\r\n\tApply = \"apply\",\r\n\tAddParam = \"addParam\",\r\n\t// AddStatus = \"addStatus\",\r\n\t// RemoveStatus = \"removeStatus\",\r\n}\r\n\r\nclass LevelSetting extends BaseData {\r\n\t@field(Number)\r\n\tpublic idx: number = 0;\r\n\t@field(Number)\r\n\tpublic value: number = 0;\r\n\t@field(String)\r\n\tpublic method: \"add\" | \"mult\" = \"add\";\r\n}\r\n\r\nexport class Effect extends BaseData {\r\n\r\n\t@field\r\n\tpublic percent: number = 1; // 成功几率\r\n\r\n\t@field(String)\r\n\tpublic type: EffectType = EffectType.None;\r\n\t@field([Object])\r\n\tpublic params: any[] = [];\r\n\t@field([LevelSetting])\r\n\tpublic levelSettings: LevelSetting[] = [];\r\n\r\n\t/**\r\n\t * 创建\r\n\t */\r\n\tpublic static create(type: EffectType, params: any[]) {\r\n\t\tconst res = new Effect();\r\n\t\tres.type = type;\r\n\t\tres.params = params;\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 应用等级效果\r\n\t */\r\n\tpublic applyLevel(level) {\r\n\t\tconst params = this.params.slice();\r\n\t\tthis.levelSettings.forEach(ls => {\r\n\t\t\tswitch (ls.method) {\r\n\t\t\t\tcase \"add\": params[ls.idx] += ls.value * level; break;\r\n\t\t\t\tcase \"mult\": params[ls.idx] *= ls.value * level; break;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn Effect.create(this.type, params);\r\n\t}\r\n}\r\n","import {assetField, field, GameData} from \"../../CoreModule/Data/BaseData\";\r\nimport {BundleName} from \"../../CoreModule/Managers/AssetBundleManager\";\r\nimport SkeletonData = sp.SkeletonData;\r\nimport {BaseRepository, getRepository, repository} from \"../../CoreModule/Data/BaseRepository\";\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\nimport {data, StaticData} from \"../../CoreModule/Data/StaticData\";\r\nimport {AttackMotionGroupId} from \"../../BattleModule/Data/MotionGroup\";\r\nimport {IEntity} from \"../../BattleModule/Data/Battler\";\r\nimport {paramRepo} from \"../../HeroModule/Data/Param\";\r\nimport {MathUtils} from \"../../../Utils/MathUtils\";\r\nimport {RestraintType} from \"../../HeroModule/Data/Hero\";\r\n\r\nexport enum EnemyType {\r\n\tNormal, Boss\r\n}\r\n\r\n@data(\"Enemy\")\r\nexport class Enemy extends StaticData implements IEntity {\r\n\r\n\t@field\r\n\tpublic type: EnemyType = EnemyType.Normal;\r\n\t@field\r\n\tpublic level: number = 1;\r\n\t@field\r\n\tpublic name: string = \"\";\r\n\t@field\r\n\tpublic restraint: RestraintType = RestraintType.Red;\r\n\t@field\r\n\tpublic skeletonName: string = \"\";\r\n\t@field\r\n\tpublic params: {[T: number]: number} = {};\r\n\t@field\r\n\tpublic score: number = 1;\r\n\r\n\t@field(Number)\r\n\tpublic attackMotionId: number = AttackMotionGroupId;\r\n\r\n\t@assetField(SkeletonData, BundleName.Sprites,\r\n\t\t\"parts/${skeletonName}\")\r\n\tpublic skeleton: SkeletonData;\r\n\r\n\t/**\r\n\t * 战斗等级\r\n\t */\r\n\tget battleLevel(): number { return this.level; }\r\n\r\n\t/**\r\n\t * 战斗属性\r\n\t */\r\n\tprivate _battleParams: number[];\r\n\tget battleParams(): number[] {\r\n\t\tif (!this._battleParams) {\r\n\t\t\tconst params = paramRepo().find();\r\n\r\n\t\t\tthis._battleParams = [];\r\n\t\t\tparams.forEach(p => {\r\n\t\t\t\tconst k = p.id;\r\n\t\t\t\tconst val = this.params[k] || p.default_;\r\n\t\t\t\tthis._battleParams[k] = MathUtils.clamp(val, p.min, p.max);\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn this._battleParams;\r\n\t}\r\n}\r\n\r\nexport function enemyRepo() {\r\n\treturn getRepository(EnemyRepo);\r\n}\r\n\r\n@repository\r\nexport class EnemyRepo extends BaseRepository<Enemy> {\r\n\r\n\tget clazz(): Constructor<Enemy> {\r\n\t\treturn Enemy;\r\n\t}\r\n\r\n\tpublic constructor() {\r\n\t\tsuper();\r\n\t}\r\n\r\n}\r\n","import gifshot = require('./gifshot')\r\nimport {PromiseUtils} from \"./PromiseUtils\";\r\n\r\nexport default class GIFUtils {\r\n\r\n    static async makeGIF(images: string[]) {\r\n        let passedOptions = this.getSelectedOptions();\r\n        let temp = [];\r\n        images.forEach(i => {\r\n            let image = new Image();\r\n            image.src = i;\r\n            temp.push(image);\r\n        })\r\n        passedOptions.images = temp;\r\n        let res = null;\r\n        let made = false;\r\n\r\n        gifshot['createGIF'](passedOptions, obj => {\r\n            if (!obj.error) res = obj.image;\r\n            made = true;\r\n        });\r\n        await PromiseUtils.waitFor(() => made);\r\n\r\n        return res;\r\n    }\r\n\r\n    private static getSelectedOptions() {\r\n        return {\r\n            gifWidth: Number(400),\r\n            gifHeight: Number(400),\r\n            images: [],\r\n            interval: Number(0.02),\r\n            frameDuration: Number(1),\r\n            sampleInterval: Number(10),\r\n            numWorkers: Number(2)\r\n        }\r\n    }\r\n}\r\n","import {BaseManager, getManager, manager} from \"./BaseManager\";\r\n\r\nimport {CoreInterface} from \"../Common/CoreCommon\";\r\n\r\nclass Token {\r\n\t// TOKEN有效总时间\r\n\tpublic static Duration = 30 * 60 * 1000;\r\n\t// TOKEN更新时间（测试30秒）\r\n\tpublic static UpdateDuration = 15 * 60 * 1000;\r\n\r\n\tpublic value: string;\r\n\tpublic time: number;\r\n\r\n\t// 是否过时\r\n\tpublic isOutOfDate() {\r\n\t\tconst now = Date.now();\r\n\t\treturn now > this.time + Token.Duration;\r\n\t}\r\n\r\n\t// 是否需要刷新\r\n\tpublic isNeedUpdate() {\r\n\t\tconst now = Date.now();\r\n\t\treturn now > this.time + Token.UpdateDuration;\r\n\t}\r\n\r\n\tpublic static create(token) {\r\n\t\tconst res = new Token();\r\n\t\tres.value = token;\r\n\t\tres.time = Date.now();\r\n\t\treturn res;\r\n\t}\r\n\r\n\tpublic static invalid() {\r\n\t\tlet token = new Token();\r\n\t\ttoken.time = -1000;\r\n\t\ttoken.value = \"\";\r\n\t\treturn token;\r\n\t}\r\n}\r\n\r\nexport function gameMgr(): GameManager {\r\n\treturn getManager(GameManager);\r\n}\r\n\r\n@manager\r\nclass GameManager extends BaseManager {\r\n\r\n\tpublic token: Token = null; // Token.invalid();\r\n\r\n\tprivate lastCheckUpdToken: number = 0;\r\n\r\n\tpublic needUpdateToken = true;\r\n\r\n\t// region 更新\r\n\r\n\tupdate(dt: number) {\r\n\t\tsuper.update(dt);\r\n\r\n\t\tthis.checkUpdateToken();\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region Token操作\r\n\r\n\t/**\r\n\t * 获取Token值\r\n\t */\r\n\tpublic getToken() {\r\n\t\treturn this.token.value;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置Token\r\n\t * @param token\r\n\t */\r\n\tpublic setToken(token: string) {\r\n\t\tthis.token = Token.create(token);\r\n\t}\r\n\r\n\t/**\r\n\t * 更新Token\r\n\t */\r\n\tpublic async updateToken() {\r\n\t\tconst res = await CoreInterface.UpdateToken();\r\n\t\tthis.setToken(res['token']);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\tprivate checkUpdateToken() { // 每5秒检查一次更新\r\n\t\tif (this.needUpdateToken &&\r\n\t\t\tthis.token?.isNeedUpdate() &&\r\n\t\t\tDate.now() - this.lastCheckUpdToken > 5000) {\r\n\r\n\t\t\tthis.lastCheckUpdToken = 1e300; // 防止频繁更新\r\n\r\n\t\t\tconsole.log(\"UpdateToken!!\")\r\n\t\t\t// @ts-ignore\r\n\t\t\tthis.updateToken().finally(() => {\r\n\t\t\t\tthis.lastCheckUpdToken = Date.now();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n\r\nimport {networkMgr} from \"./NetworkManager\";\r\n","import {ItemDisplay} from \"../../../../Modules/CoreModule/Components/ItemDisplay\";\r\nimport Label = cc.Label;\r\nimport Node = cc.Node;\r\nimport Sprite = cc.Sprite;\r\nimport {PartInfo} from \"../../../../Modules/HeroModule/Data/PartInfo\";\r\nimport Color = cc.Color;\r\nimport {selectorScene} from \"../../SelectorScene\";\r\nimport PartsDisplay from \"../ItemPrefabs/PartsDisplay\";\r\nimport Scrollbar = cc.Scrollbar;\r\nimport PreviewPictureDisplay from \"../ItemPrefabs/PreviewPictureDisplay\";\r\nimport {partMgr} from \"../../../../Modules/HeroModule/Managers/PartManager\";\r\nimport {configMgr} from \"../../../../Modules/CoreModule/Managers/ConfigManager\";\r\nimport PartConfig from \"../../../../Modules/HeroModule/Configs/PartConfig\";\r\nimport Slider = cc.Slider;\r\nimport PartsContainer from \"../ItemContainers/PartsContainer\";\r\nimport Component = cc.Component;\r\nimport EditBox = cc.EditBox;\r\nimport {PartType, partTypeRepo} from \"../../../../Modules/HeroModule/Data/PartType\";\r\nimport GlobalEditorLine from \"./GlobalEditorLine\";\r\nimport {HeroType} from \"../../../../Modules/HeroModule/Data/HeroType\";\r\nimport {editorMgr} from \"../../../../Modules/HeroModule/Managers/EditorManager\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nconst MaxScale = 4;\r\nconst MinScale = 0;\r\n\r\n@ccclass\r\nexport default class GlobalEditorCell extends ItemDisplay<HeroType> {\r\n\r\n\t@property(Boolean)\r\n\tpublic isTitle: boolean = false;\r\n\t@property(Label)\r\n\tpublic title: Label = null;\r\n\t@property(Slider)\r\n\tpublic slider: Slider = null;\r\n\t@property(Label)\r\n\tpublic value: Label = null;\r\n\t@property(EditBox)\r\n\tpublic edit: EditBox = null;\r\n\r\n\tpublic line: GlobalEditorLine = null;\r\n\r\n\t// region 数据获取\r\n\r\n\tpublic get globalEditor() {\r\n\t\treturn this.line.globalEditor;\r\n\t}\r\n\tpublic get singleEditor() {\r\n\t\treturn selectorScene().singleEditor;\r\n\t}\r\n\tpublic get partType() {\r\n\t\treturn this.globalEditor.item;\r\n\t}\r\n\tpublic get firstHeroType() {\r\n\t\treturn this.line.item;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取缩放\r\n\t */\r\n\tpublic get scale() {\r\n\t\tconst ptId = this.partType.id,\r\n\t\t\tfhtId = this.firstHeroType.id, htId = this.item.id;\r\n\t\treturn editorMgr().getPHtScale(ptId, fhtId, htId);\r\n\t}\r\n\tpublic set scale(val) {\r\n\t\tconst ptId = this.partType.id,\r\n\t\t\tfhtId = this.firstHeroType.id, htId = this.item.id;\r\n\t\teditorMgr().changePHtScale(ptId, fhtId, htId, val);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 绘制控制\r\n\r\n\tpublic refresh() {\r\n\t\tif (this.isTitle) this.drawTitle();\r\n\t\telse this.drawValue();\r\n\t}\r\n\tprivate drawTitle() {\r\n\t\t// const curPart = this.singleEditor?.part;\r\n\t\t// const htId = this.item.id\r\n\t\t// const cHtId = curPart?.heroTypeId;\r\n\t\t//\r\n\t\t// const color = htId == cHtId ? Color.GREEN : Color.WHITE;\r\n\r\n\t\tthis.title.string = `${this.item.id} ${this.item.getDisplayName()}`;\r\n\t\t// this.title.node.color = color;\r\n\t}\r\n\tprivate drawValue() {\r\n\t\tconst config = configMgr().config(PartConfig);\r\n\t\tconst ptId = this.partType.id,\r\n\t\t\tfhtId = this.firstHeroType.id, htId = this.item.id;\r\n\t\tconst scale = config.pHtScale[ptId][fhtId][htId];\r\n\r\n\t\tthis.slider.progress = (scale - MinScale) / (MaxScale - MinScale);\r\n\t\tthis.value.string = scale.toFixed(3);\r\n\t\tthis.edit.string = scale.toFixed(3);\r\n\r\n\t\tconst editable = fhtId != htId && !this.partType.isBody;\r\n\t\tthis.slider.node.active = editable;\r\n\t\tthis.edit.node.active = editable;\r\n\t\tthis.value.node.active = !editable;\r\n\r\n\t\tconst curPart = this.singleEditor?.part;\r\n\t\tconst basePart = this.partType.isWeapon ?\r\n\t\t\tthis.singleEditor?.bodyPart : this.singleEditor?.basePart;\r\n\t\tconst cPtId = curPart?.partTypeId;\r\n\t\tconst cHtId = curPart?.heroTypeId;\r\n\t\tconst cBhtId = basePart ? basePart.heroTypeId :\r\n\t\t\tthis.globalEditor.preview.item?.heroTypeId;\r\n\r\n\t\tconst isCurrent = ptId == cPtId && fhtId == cBhtId && htId == cHtId;\r\n\t\tconst color = isCurrent ? Color.GREEN : Color.WHITE;\r\n\r\n\t\tthis.value.node.color = this.edit.textLabel.node.color = color;\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 操作\r\n\r\n\t/**\r\n\t * 设置缩放\r\n\t */\r\n\tpublic setScale(scale) {\r\n\t\tthis.scale = scale;\r\n\r\n\t\tthis.refresh();\r\n\t\tthis.globalEditor.preview.refresh();\r\n\t\tthis.globalEditor.partsContainer.refresh();\r\n\t}\r\n\r\n\t/**\r\n\t * 重置\r\n\t */\r\n\tpublic reset() {\r\n\t\tthis.setScale(1);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 回调控制\r\n\r\n\tpublic onScaleSlide() {\r\n\t\tconst rate = this.slider.progress;\r\n\t\tthis.setScale(rate * (MaxScale - MinScale) + MinScale);\r\n\t}\r\n\tpublic onEdit() {\r\n\t\tconst num = Number(this.edit.string);\r\n\t\tif (isNaN(num)) this.setScale(this.scale);\r\n\t\telse this.setScale(num);\r\n\t}\r\n\r\n\t// endregion\r\n}\r\n","import {ItemDisplay} from \"../../../../Modules/CoreModule/Components/ItemDisplay\";\r\nimport Label = cc.Label;\r\nimport Node = cc.Node;\r\nimport Sprite = cc.Sprite;\r\nimport {PartInfo} from \"../../../../Modules/HeroModule/Data/PartInfo\";\r\nimport Color = cc.Color;\r\nimport {selectorScene} from \"../../SelectorScene\";\r\nimport PartsDisplay from \"../ItemPrefabs/PartsDisplay\";\r\nimport Scrollbar = cc.Scrollbar;\r\nimport PreviewPictureDisplay from \"../ItemPrefabs/PreviewPictureDisplay\";\r\nimport {partMgr} from \"../../../../Modules/HeroModule/Managers/PartManager\";\r\nimport {configMgr} from \"../../../../Modules/CoreModule/Managers/ConfigManager\";\r\nimport PartConfig from \"../../../../Modules/HeroModule/Configs/PartConfig\";\r\nimport Slider = cc.Slider;\r\nimport PartsContainer from \"../ItemContainers/PartsContainer\";\r\nimport Component = cc.Component;\r\nimport Boolean = cc.Boolean;\r\nimport GlobalEditorCell from \"./GlobalEditorCell\";\r\nimport Prefab = cc.Prefab;\r\nimport GlobalEditor from \"./GlobalEditor\";\r\nimport {partTypeRepo} from \"../../../../Modules/HeroModule/Data/PartType\";\r\nimport {HeroType, heroTypeRepo} from \"../../../../Modules/HeroModule/Data/HeroType\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class GlobalEditorLine extends ItemDisplay<HeroType> {\r\n\r\n\t@property(Boolean)\r\n\tpublic isTitle: boolean = false;\r\n\t@property(Label)\r\n\tpublic title: Label = null;\r\n\t@property(Node)\r\n\tpublic cellContainer: Node = null;\r\n\t@property([GlobalEditorCell])\r\n\tpublic cells: GlobalEditorCell[] = [];\r\n\t@property(Prefab)\r\n\tpublic editPrefab: Prefab = null;\r\n\t@property(Prefab)\r\n\tpublic titlePrefab: Prefab = null;\r\n\r\n\tpublic globalEditor: GlobalEditor = null;\r\n\tprivate cellCreated = false;\r\n\r\n\tpublic get prefab() {\r\n\t\treturn this.isTitle ? this.titlePrefab : this.editPrefab;\r\n\t}\r\n\r\n\tprotected onLoad() {\r\n\t}\r\n\r\n\trefresh() {\r\n\t\tsuper.refresh();\r\n\t\tthis.drawTitle();\r\n\t\tif (!this.cellCreated)\r\n\t\t\tthis.createCells();\r\n\t\telse this.refreshCells();\r\n\t}\r\n\tprivate drawTitle() {\r\n\t\tif (!this.title || !this.item) return;\r\n\t\tthis.title.string = `${this.item.id} ${this.item.getDisplayName()}`;\r\n\t}\r\n\tprivate createCells() {\r\n\t\tconst hts = heroTypeRepo().list;\r\n\t\thts.forEach(ht => this.createCell(ht));\r\n\t\tthis.cellCreated = true;\r\n\t}\r\n\tprivate refreshCells() {\r\n\t\tthis.cells.forEach(line => line.refresh());\r\n\t}\r\n\tprivate createCell(heroType: HeroType) {\r\n\t\tconst node = cc.instantiate(this.prefab);\r\n\t\tconst cell = node.getComponent(GlobalEditorCell);\r\n\t\tnode.parent = this.cellContainer;\r\n\r\n\t\t// const sp = this.cellContainer.getComponent(Sprite);\r\n\t\t// sp.enabled = !this.isTitle;\r\n\r\n\t\tcell.line = this;\r\n\t\tcell.isTitle = this.isTitle;\r\n\t\tcell.setItem(heroType);\r\n\r\n\t\tthis.cells.push(cell);\r\n\t}\r\n\r\n}\r\n","import {ItemDisplay} from \"../../../../Modules/CoreModule/Components/ItemDisplay\";\r\nimport Node = cc.Node;\r\nimport PreviewPictureDisplay from \"../ItemPrefabs/PreviewPictureDisplay\";\r\nimport PartsContainer from \"../ItemContainers/PartsContainer\";\r\nimport PartTypeContainer from \"../ItemContainers/PartTypeContainer\";\r\nimport {PartType, partTypeRepo} from \"../../../../Modules/HeroModule/Data/PartType\";\r\nimport Prefab = cc.Prefab;\r\nimport GlobalEditorLine from \"./GlobalEditorLine\";\r\nimport {HeroType, heroTypeRepo} from \"../../../../Modules/HeroModule/Data/HeroType\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class GlobalEditor extends ItemDisplay<PartType> {\r\n\r\n\t@property(PartTypeContainer)\r\n\tpublic partTypeContainer: PartTypeContainer = null;\r\n\t@property(Node)\r\n\tpublic lineContainer: Node = null;\r\n\t@property([GlobalEditorLine])\r\n\tpublic lines: GlobalEditorLine[] = [];\r\n\r\n\t@property(PartsContainer)\r\n\tpublic partsContainer: PartsContainer = null;\r\n\t@property(PreviewPictureDisplay)\r\n\tpublic preview: PreviewPictureDisplay = null;\r\n\r\n\t@property(Prefab)\r\n\tpublic prefab: Prefab = null;\r\n\r\n\t// region 初始化\r\n\r\n\tprotected onLoad() {\r\n\t\tthis.partTypeContainer.globalEditor = this;\r\n\t\tthis.partTypeContainer.setItems(partTypeRepo().list);\r\n\t\tthis.createLines();\r\n\t}\r\n\tprivate createLines() {\r\n\t\tthis.createLine(); // Title\r\n\t\tconst hts = heroTypeRepo().list;\r\n\t\thts.forEach(ht => this.createLine(ht));\r\n\t}\r\n\tprivate createLine(heroType?: HeroType) {\r\n\t\tconst node = cc.instantiate(this.prefab);\r\n\t\tconst line = node.getComponent(GlobalEditorLine);\r\n\t\tnode.parent = this.lineContainer;\r\n\r\n\t\tline.globalEditor = this;\r\n\t\tline.isTitle = !heroType;\r\n\t\tline.setItem(heroType);\r\n\r\n\t\tthis.lines.push(line);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 绘制控制\r\n\r\n\trefresh() {\r\n\t\tsuper.refresh();\r\n\t\tthis.lines.forEach(line => line.refresh());\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 数据控制\r\n\r\n\t// endregion\r\n\r\n}\r\n","import {get, post} from \"../../CoreModule/Common/CoreCommon\";\r\n\r\nexport class HeroInterface {\r\n\r\n\t@post(\"/hero/hero/sync\") static SyncHero(d?): any {}\r\n\t@post(\"/hero/hero/create\") static CreateHero(d?): any {}\r\n\t@get(\"/hero/hero/get_one\") static GetHero(d?): any {}\r\n\t@get(\"/hero/hero/count\") static GetHeroCount(d?): any {}\r\n\t@get(\"/hero/hero/get_list\") static GetHeroes(d?): any {}\r\n\r\n\t@post(\"/hero/level/upgrade\") static UpgradeLevel(d?): any {}\r\n\t@post(\"/hero/level/break\") static BreakLevel(d?): any {}\r\n\t@post(\"/hero/star/upgrade\") static UpgradeStar(d?): any {}\r\n\t@post(\"/hero/strengthen/upgrade\") static UpgradeStrengthen(d?): any {}\r\n\r\n\t@get(\"/hero/rank/refresh\") static RefreshAllRank(d?): any {}\r\n\r\n\t@post(\"/core/data/clear_cache\") static EmptyCache(d?): any {}\r\n\r\n}\r\n","import {ItemContainer} from \"../../../../CoreModule/Components/ItemContainer\";\r\nimport {Hero} from \"../../../../HeroModule/Data/Hero\";\r\nimport HeroCompositingDisplay from \"./HeroCompositingDisplay\";\r\nimport {waitForDataLoad} from \"../../../../CoreModule/Managers/DataManager\";\r\nimport {playerMgr, waitForLogin} from \"../../../../PlayerModule/Managers/PlayerManager\";\r\nimport {heroMgr} from \"../../../../HeroModule/Managers/HeroManager\";\r\nimport {ScrollviewFilter} from \"../../../../CoreModule/Utils/ScrollviewFilter\";\r\nimport HeroQualitySiftSelectionGroup from \"./HeroQualitySiftSelectionGroup\";\r\nimport HeroQualitySiftSelection from \"./HeroQualitySiftSelection\";\r\nimport CompositingWindowDisplay from \"./CompositingWindowDisplay\";\r\nimport Node = cc.Node;\r\nimport Button = cc.Button;\r\nimport EventHandler = cc.Component.EventHandler;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HeroCompositingContainer extends ItemContainer<Hero, HeroCompositingDisplay> {\r\n\r\n    @property([HeroQualitySiftSelection])\r\n    qualitySelections: HeroQualitySiftSelection[] = [];\r\n    @property(CompositingWindowDisplay)\r\n    compositing: CompositingWindowDisplay = null;\r\n    private selectionGroup: HeroQualitySiftSelectionGroup = null;\r\n\r\n    private totalHeroes: Hero[] = [];\r\n\r\n    start () {\r\n        this.selectionGroup = new HeroQualitySiftSelectionGroup(false);\r\n        this.qualitySelections.forEach(s => {\r\n            this.selectionGroup.addElement(s);\r\n            s.container = this;\r\n            s.selectableGroup = this.selectionGroup;\r\n        })\r\n        this.setup().then();\r\n    }\r\n\r\n    @waitForDataLoad\r\n    @waitForLogin\r\n    private async setup() {\r\n        const acc = playerMgr().player.account;\r\n        this.totalHeroes = (await heroMgr().getListFromServer())\r\n          .filter(h => h.ownerAccount == acc);\r\n        this.onSelectionChange();\r\n    }\r\n\r\n    update (dt) {\r\n        this.itemsComponents.forEach(i => i.isSelected = i.item == this.compositing.mainHero.item || i.item == this.compositing.secondHero.item);\r\n    }\r\n\r\n    onItemsChanged() {\r\n        super.onItemsChanged();\r\n        let nodes : Node[] = [];\r\n        this.itemsComponents.forEach((item, i) => {\r\n            if(item.node.active == true)\r\n                nodes.push(item.node);\r\n            let event = new EventHandler();\r\n            event.target = this.node;\r\n            event.component = \"HeroCompositingContainer\";\r\n            event.handler = \"onItemClicked\";\r\n            event.customEventData = \"\" + i;\r\n            item.getComponent(Button).clickEvents = [];\r\n            item.getComponent(Button).clickEvents.push(event);\r\n        })\r\n        ScrollviewFilter.filter(\"vertical\", this.container, nodes, 60, this.container.height, 60, 4);\r\n    }\r\n\r\n    onSelectionChange() {\r\n        let type = (this.selectionGroup.currentSelection() as HeroQualitySiftSelection).quality;\r\n        if (type == -1)\r\n            this.setItems(this.totalHeroes);\r\n        else\r\n            this.setItems(this.totalHeroes.filter(h => h.quality == type));\r\n    }\r\n\r\n    onItemClicked(event: any, index: string) {\r\n        if (this.items[index] == this.compositing.mainHero.item) {\r\n            this.compositing.deselectMainHero();\r\n            return;\r\n        }\r\n        if (this.items[index] == this.compositing.secondHero.item) {\r\n            this.compositing.deselectSecondHero();\r\n            return;\r\n        }\r\n        this.compositing.selectHero(this.items[index]);\r\n    }\r\n\r\n}\r\n","import Label = cc.Label;\r\nimport Node = cc.Node;\r\nimport Sprite = cc.Sprite;\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport {battleScene} from \"../../../../../Scenes/BattleScene\";\r\nimport HeroWithAvatar from \"../../HeroWithAvatar\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HeroCompositingDisplay extends HeroWithAvatar {\r\n\r\n    @property(Label)\r\n    nameLabel: Label = null;\r\n    @property(Sprite)\r\n    qualitySprite: Sprite = null;\r\n    @property(SpriteFrame)\r\n    qualityPictures: SpriteFrame[] = [];\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    protected onItemChanged() {\r\n        if (!this.item) return;\r\n        super.onItemChanged();\r\n        this.nameLabel.string = this.item.name;\r\n        this.qualitySprite.spriteFrame = this.qualityPictures[this.item.quality];\r\n    }\r\n\r\n    update (dt) {\r\n        this.updateMoreInfo();\r\n    }\r\n\r\n    // region 额外组件控制\r\n\r\n    @property(Node)\r\n    moreInfoNode: Node = null;\r\n    @property(Label)\r\n    levelLabel: Label = null;\r\n    @property([Node])\r\n    starNodes: Node[] = [];\r\n    @property(Node)\r\n    selectedNode: Node = null;\r\n    @property(Node)\r\n    fightingNode: Node = null;\r\n\r\n    public isSelected: boolean = false;\r\n\r\n    private updateMoreInfo() {\r\n        if (!this.moreInfoNode) return;\r\n        this.levelLabel.string = this.item.level.level.toString();\r\n        this.starNodes.forEach((s, i) => s.active = i < this.item.star.level);\r\n        this.selectedNode.active = this.isSelected;\r\n        this.fightingNode.active = battleScene().heroesInTeam.find(h => h == this.item) != undefined;\r\n    }\r\n\r\n    // endregion\r\n\r\n}\r\n","import {ItemContainer} from \"../../../CoreModule/Components/ItemContainer\";\r\nimport {ScrollviewFilter} from \"../../../CoreModule/Utils/ScrollviewFilter\";\r\nimport {Hero} from \"../../../HeroModule/Data/Hero\";\r\nimport {playerMgr, waitForLogin} from \"../../../PlayerModule/Managers/PlayerManager\";\r\nimport {waitForDataLoad} from \"../../../CoreModule/Managers/DataManager\";\r\nimport HeroGroupDisplay from \"./HeroGroupDisplay\";\r\nimport {HeroGroup, HeroGroupType} from \"../../Data/HeroGroup\";\r\nimport {heroMgr} from \"../../../HeroModule/Managers/HeroManager\";\r\nimport Node = cc.Node;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HeroGroupContainer extends ItemContainer<HeroGroup, HeroGroupDisplay> {\r\n    currentGroupType: HeroGroupType = HeroGroupType.RESTRAINT;\r\n    totalHeroes: Hero[] = [];\r\n\r\n    start() {\r\n        this.setup().then();\r\n    }\r\n\r\n    @waitForDataLoad\r\n    @waitForLogin\r\n    private async setup() {\r\n        const acc = playerMgr().player.account;\r\n        this.totalHeroes = (await heroMgr().getListFromServer())\r\n          .filter(h => h.ownerAccount == acc);\r\n        this.setItems(this.groupHeroes(this.totalHeroes));\r\n    }\r\n\r\n    update(dt) {\r\n    }\r\n\r\n    onItemsChanged() {\r\n        super.onItemsChanged();\r\n        let nodes: Node[] = [];\r\n        this.itemsComponents.forEach(item => {\r\n            if (item.node.active == true) nodes.push(item.node)\r\n        })\r\n        ScrollviewFilter.filter(\"vertical\", this.container, nodes, 5, this.container.height, 180, 5);\r\n    }\r\n\r\n    /**\r\n     * 根据分组依据将Hero分成若干个HeroGroup\r\n     */\r\n    groupHeroes(heroes: Hero[], groupBy: HeroGroupType = this.currentGroupType): HeroGroup[] {\r\n        this.currentGroupType = groupBy;\r\n        let groups: HeroGroup[] = [];\r\n        let maxIdx = 0;\r\n        heroes.forEach((hero) => {\r\n            let idx;//先后顺序\r\n            let val;//分组依据对应属性的值\r\n            switch (groupBy) {\r\n                case HeroGroupType.STAR:\r\n                    idx = 6 - hero.star.level;\r\n                    val = hero.star.level;\r\n                    break;\r\n                case HeroGroupType.QUALITY:\r\n                    val = hero.quality;\r\n                    idx = 6 - hero.quality;\r\n                    break;\r\n                case HeroGroupType.RESTRAINT:\r\n                    val = idx = hero.restraint;\r\n                    break;\r\n            }\r\n            groups[idx] ||= new HeroGroup(groupBy, val);\r\n            groups[idx].heroes.push(hero);\r\n            maxIdx = Math.max(maxIdx, idx);\r\n        })\r\n        for (let i = maxIdx; i >= 0; i--) {\r\n            if (groups[i] == null)\r\n                groups.splice(i, 1);\r\n        }\r\n        return groups;\r\n    }\r\n\r\n    /**\r\n     * tab按钮回调，设置不同的分组依据\r\n     */\r\n    setHeroGroupType(e, d) {\r\n        let value = parseInt(d);\r\n        this.setItems(this.groupHeroes(this.totalHeroes, value));\r\n    }\r\n}\r\n","import {ItemDisplay} from \"../../../CoreModule/Components/ItemDisplay\";\r\nimport {HeroGroup, HeroGroupType} from \"../../Data/HeroGroup\";\r\nimport HeroInBagContainer from \"./HeroInBagContainer\";\r\nimport {QualityType} from \"../../../HeroModule/Data/Quality\";\r\nimport Label = cc.Label;\r\nimport Node = cc.Node;\r\nimport Sprite = cc.Sprite;\r\nimport {RestraintType} from \"../../../HeroModule/Data/Hero\";\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport HeroGroupHeroContainer from \"./HeroGroupHeroContainer\";\r\nimport {ScrollviewFilter} from \"../../../CoreModule/Utils/ScrollviewFilter\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HeroGroupDisplay extends ItemDisplay<HeroGroup> {\r\n    @property(HeroGroupHeroContainer)\r\n    heroContainer: HeroGroupHeroContainer;\r\n    @property([Node])\r\n    stars: Node[] = [];\r\n    @property([SpriteFrame])\r\n    restraintIcons: SpriteFrame[] = [];\r\n    @property(Label)\r\n    tagLabel: Label;\r\n    @property(Sprite)\r\n    icon: Sprite;\r\n\r\n    @property(Node)\r\n    starsNode: Node;\r\n    @property(Node)\r\n    labelNode: Node;\r\n    @property(Node)\r\n    iconNode: Node;\r\n\r\n    start() {\r\n\r\n    }\r\n\r\n    protected onItemChanged() {\r\n        super.onItemChanged();\r\n        this.setTag();\r\n        this.heroContainer.setItems(this.item.heroes);\r\n    }\r\n\r\n\r\n    private setTag() {\r\n        this.starsNode.active = false;\r\n        this.labelNode.active = false;\r\n        this.iconNode.active = false;\r\n\r\n        switch (this.item.groupBy) {\r\n            case HeroGroupType.STAR:\r\n\r\n                for (let i = 0; i < 5; i++)\r\n                    this.stars[i].active = i < this.item.value;\r\n                this.starsNode.active = true;\r\n                break;\r\n            case HeroGroupType.QUALITY:\r\n                this.tagLabel.string = QualityType[this.item.value];\r\n                this.labelNode.x = 0;\r\n                this.labelNode.active = true;\r\n                break;\r\n            case HeroGroupType.RESTRAINT:\r\n                this.tagLabel.string = RestraintType[this.item.value];\r\n                this.labelNode.x = 7;\r\n                this.icon.spriteFrame = this.restraintIcons[this.item.value];\r\n                this.labelNode.active = true;\r\n                this.iconNode.active = true;\r\n                break;\r\n        }\r\n    }\r\n}\r\n","import {ItemContainer} from \"../../../CoreModule/Components/ItemContainer\";\r\nimport {ScrollviewFilter} from \"../../../CoreModule/Utils/ScrollviewFilter\";\r\nimport Node = cc.Node;\r\nimport {Hero} from \"../../../HeroModule/Data/Hero\";\r\nimport HeroInBagDisplay from \"./HeroInBagDisplay\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HeroGroupHeroContainer extends ItemContainer<Hero, HeroInBagDisplay> {\r\n\r\n    start() {\r\n    }\r\n\r\n    private async setup() {\r\n    }\r\n\r\n    onItemsChanged() {\r\n        super.onItemsChanged();\r\n        let nodes: Node[] = [];\r\n        this.itemsComponents.forEach(item => {\r\n            if (item.node.active == true) nodes.push(item.node)\r\n        })\r\n        ScrollviewFilter.filter(\"vertical\", this.container, nodes, 5, this.container.height, 40, 5);\r\n        this.modifyOnClickEvents();\r\n    }\r\n\r\n    modifyOnClickEvents() {\r\n        this.itemsComponents.forEach(item => {\r\n            let btn = item.node.getComponentInChildren(Button);\r\n            btn.clickEvents = [];\r\n            let clickEventHandler = new cc.Component.EventHandler();\r\n            clickEventHandler.target = this.node;\r\n            clickEventHandler.component = \"HeroGroupHeroContainer\";\r\n            clickEventHandler.handler = \"onHeroClicked\";\r\n            clickEventHandler.customEventData = item.item.nftId;//用nftId来作为附加数据\r\n            btn.clickEvents.push(clickEventHandler);\r\n        });\r\n    }\r\n\r\n    async onHeroClicked(e, nftId: string) {\r\n        battleScene().myTeamFrame.addTeamMember(nftId);\r\n    }\r\n}\r\nimport Button = cc.Button;\r\nimport {battleScene} from \"../../../../Scenes/BattleScene\";\r\nimport {HeroRace} from \"../../../HeroModule/Data/HeroType\";\r\n","import {Hero, RestraintType} from \"../../HeroModule/Data/Hero\";\r\nimport {QualityType} from \"../../HeroModule/Data/Quality\";\r\nimport {BaseData} from \"../../CoreModule/Data/BaseData\";\r\n\r\n\r\n/**\r\n * 根据什么来分类\r\n */\r\nexport enum HeroGroupType {\r\n    RESTRAINT, QUALITY, STAR\r\n}\r\n\r\n/**\r\n * 用于在选择英雄出战的页面\r\n */\r\nexport class HeroGroup extends BaseData{\r\n    heroes: Hero[];\r\n\r\n    groupBy: HeroGroupType;//分组依据\r\n    value: RestraintType | QualityType | number;//分组依据的值，即该HeroGroup的heroes的groupBy对应属性都是value\r\n\r\n    constructor(groupBy: HeroGroupType, groupValue) {\r\n        super();\r\n        this.groupBy = groupBy;\r\n        this.value = groupValue;\r\n        this.heroes = [];\r\n    }\r\n\r\n}","import {ItemContainer} from \"../../../CoreModule/Components/ItemContainer\";\r\nimport {ScrollviewFilter} from \"../../../CoreModule/Utils/ScrollviewFilter\";\r\nimport {Hero} from \"../../../HeroModule/Data/Hero\";\r\nimport HeroInBagDisplay from \"./HeroInBagDisplay\";\r\nimport {playerMgr, waitForLogin} from \"../../../PlayerModule/Managers/PlayerManager\";\r\nimport {waitForDataLoad} from \"../../../CoreModule/Managers/DataManager\";\r\nimport {heroMgr} from \"../../../HeroModule/Managers/HeroManager\";\r\nimport {HeroRace} from \"../../../HeroModule/Data/HeroType\";\r\nimport Node = cc.Node;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HeroInBagContainer extends ItemContainer<Hero, HeroInBagDisplay> {\r\n\r\n    private totalHeroes: Hero[] = [];\r\n    private currentRace: HeroRace;\r\n\r\n    start() {\r\n        this.setup().then();\r\n    }\r\n\r\n    @waitForDataLoad\r\n    @waitForLogin\r\n    private async setup() {\r\n        const acc = playerMgr().player.account;\r\n        this.totalHeroes = (await heroMgr().getListFromServer())\r\n          .filter(h => h.ownerAccount == acc);\r\n        this.currentRace = undefined;\r\n        this.onHeroRaceChange();\r\n    }\r\n\r\n    onItemsChanged() {\r\n        super.onItemsChanged();\r\n        let nodes : Node[] = [];\r\n        this.itemsComponents.forEach(item => { if(item.node.active == true) nodes.push(item.node) })\r\n        ScrollviewFilter.filter(\"vertical\", this.container, nodes, 5, this.container.height, 170, 5);\r\n    }\r\n\r\n\r\n    /**\r\n     * 筛选按钮回调\r\n     */\r\n    setHeroBagFilter(e, d) {\r\n        this.currentRace = d == 'undefined' ? undefined : parseInt(d);\r\n        this.onHeroRaceChange();\r\n    }\r\n\r\n    onHeroRaceChange() {\r\n        let items = this.currentRace ? this.totalHeroes.filter(h => h.race == this.currentRace) : this.totalHeroes;\r\n        this.setItems(items);\r\n    }\r\n}\r\n","import Label = cc.Label;\r\nimport Node = cc.Node;\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport Sprite = cc.Sprite;\r\nimport {battleScene} from \"../../../../Scenes/BattleScene\";\r\nimport HeroWithAvatar from \"../HeroWithAvatar\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HeroInBagDisplay extends HeroWithAvatar {\r\n\r\n    @property(Label)\r\n    nameLabel: Label = null;\r\n    @property(Label)\r\n    fragmentLabel: Label = null;\r\n\r\n    @property(Sprite)\r\n    qualityBackground: Sprite = null;\r\n\r\n    @property(Node)\r\n    fightingTips: Node = null;\r\n    @property([Node])\r\n    stars: Node[] = [];\r\n\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    protected onItemChanged() {\r\n        super.onItemChanged();\r\n        this.nameLabel.string = this.item.name;\r\n        this.qualityBackground.spriteFrame = this.qualityPictures[this.item.quality];\r\n    }\r\n    update (dt) {\r\n        if (!this.item) return;\r\n        this.updateLabels();\r\n        this.updatePictures();\r\n        this.updateNodes();\r\n    }\r\n\r\n    updateLabels() {\r\n        this.fragmentLabel.string = \"0/60\";\r\n    }\r\n\r\n    @property([SpriteFrame])\r\n    qualityPictures: SpriteFrame[] = [];\r\n\r\n    updatePictures() {\r\n\r\n    }\r\n\r\n    updateNodes() {\r\n        this.fightingTips.active = battleScene().heroesInTeam.find(h => h == this.item) != undefined;\r\n        this.stars.forEach((s, i) => { s.active = i < this.item.star.level; });\r\n    }\r\n\r\n    onAvatarClick() {\r\n        battleScene().cultivateWindow.open(this.item);\r\n    }\r\n\r\n}\r\n","import {ItemContainer} from \"../../../CoreModule/Components/ItemContainer\";\r\nimport {ScrollviewFilter} from \"../../../CoreModule/Utils/ScrollviewFilter\";\r\nimport Node = cc.Node;\r\nimport {Hero} from \"../../../HeroModule/Data/Hero\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HeroInTeamContainer extends ItemContainer<Hero, HeroInTeamDisplay> {\r\n\r\n    start() {\r\n    }\r\n\r\n    private async setup() {\r\n    }\r\n\r\n    onItemsChanged() {\r\n        super.onItemsChanged();\r\n        this.modifyOnClickEvents();\r\n    }\r\n\r\n    modifyOnClickEvents() {\r\n        this.itemsComponents.forEach(item => {\r\n            let btn = item.node.getComponentInChildren(Button);\r\n            btn.clickEvents = [];\r\n            let clickEventHandler = new cc.Component.EventHandler();\r\n            clickEventHandler.target = this.node;\r\n            clickEventHandler.component = \"HeroInTeamContainer\";\r\n            clickEventHandler.handler = \"onTeamHeroClicked\";\r\n            clickEventHandler.customEventData = item.item.nftId;//用nftId来作为附加数据\r\n            btn.clickEvents.push(clickEventHandler);\r\n        });\r\n    }\r\n\r\n    onTeamHeroClicked(e, nftId: string) {\r\n        battleScene().myTeamFrame.removeTeamMember(nftId);\r\n    }\r\n}\r\n\r\nimport HeroInTeamDisplay from \"./HeroInTeamDisplay\";\r\nimport Button = cc.Button;\r\nimport {battleScene} from \"../../../../Scenes/BattleScene\";\r\n","import Label = cc.Label;\r\nimport Sprite = cc.Sprite;\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport HeroWithAvatar from \"../HeroWithAvatar\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HeroInTeamDisplay extends HeroWithAvatar {\r\n\r\n\t@property(Label)\r\n\tnameLabel: Label = null;\r\n\t@property(Label)\r\n\tlevelLabel: Label = null;\r\n\t@property(Label)\r\n\tqualityLabel: Label = null;\r\n\r\n\t@property(Sprite)\r\n\tqualityBackground: Sprite = null;\r\n\r\n\tstart () {\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\tprivate setup() {\r\n\t}\r\n\r\n\tprotected onItemChanged() {\r\n\t\tsuper.onItemChanged();\r\n\t\tthis.nameLabel.string = this.item.name;\r\n\t\tthis.levelLabel.string = \"Lv.\" + this.item.level.level;\r\n\t\tthis.qualityLabel.string = this.item.qualityData.shortName;\r\n\t\tthis.qualityBackground.spriteFrame = this.qualityPictures[this.item.quality];\r\n\t}\r\n\r\n\t@property([SpriteFrame])\r\n\tqualityPictures: SpriteFrame[] = [];\r\n\r\n}\r\n","import Sprite = cc.Sprite;\r\nimport Label = cc.Label;\r\nimport Skeleton = sp.Skeleton;\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport {autoUnitConvert} from \"../../../../Utils/NumberUtils\";\r\nimport {HeroSkeleton} from \"../../../../Utils/SpineUtils\";\r\nimport {heroMgr} from \"../../../HeroModule/Managers/HeroManager\";\r\nimport {DefaultStand} from \"../../../../Scenes/SelectorScene/Components/ItemPrefabs/PreviewPictureDisplay\";\r\nimport Node = cc.Node;\r\nimport CultivateWindowController from \"./CultivateWindowController\";\r\nimport {battleScene} from \"../../../../Scenes/BattleScene\";\r\nimport Animation = cc.Animation;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HeroInfoDisplay extends cc.Component {\r\n\r\n    @property(Label)\r\n    nameLabel: Label = null;\r\n    @property(Sprite)\r\n    qualitySprite: Sprite = null;\r\n    @property(Label)\r\n    qualityLabel: Label = null;\r\n    qualityStrings: string[] = [\"N\", \"R\", \"SR\", \"SSR\", \"UR\"];\r\n    @property([Sprite])\r\n    starSprites: Sprite[] = [];\r\n    @property(Sprite)\r\n    restraintSprite: Sprite = null;\r\n    @property(Skeleton)\r\n    heroSkeleton: Skeleton = null;\r\n\r\n    @property([SpriteFrame])\r\n    qualityPictures: SpriteFrame[] = [];\r\n    @property([SpriteFrame])\r\n    starPictures: SpriteFrame[] = [];\r\n    @property([SpriteFrame])\r\n    restraintPictures: SpriteFrame[] = [];\r\n\r\n    @property(Animation)\r\n    animation: Animation = null;\r\n    // onLoad () {}\r\n\r\n    private cultivateController: CultivateWindowController = null;\r\n\r\n    start () {\r\n        this.cultivateController = battleScene().cultivateWindow;\r\n    }\r\n\r\n    // region 更新控制\r\n\r\n    update (dt) {}\r\n\r\n    refresh() {\r\n        if (!this.cultivateController)\r\n            this.cultivateController = battleScene().cultivateWindow;\r\n        this.updateLabels();\r\n        this.updatePictures();\r\n        this.drawSkeleton();\r\n    }\r\n\r\n    @autoUnitConvert\r\n    updateLabels() {\r\n        let hero = this.cultivateController.currentHero;\r\n        if (!hero) return;\r\n        this.nameLabel.string = hero.name;\r\n        this.qualityLabel.string = this.qualityStrings[hero.quality];\r\n    }\r\n\r\n    updatePictures() {\r\n        let hero = this.cultivateController.currentHero;\r\n        if (!hero) return;\r\n        this.qualitySprite.spriteFrame = this.qualityPictures[hero.quality];\r\n        this.starSprites.forEach((s, i) => {s.spriteFrame = this.starPictures[i < hero.star.level ? 1 : 0];});\r\n        this.restraintSprite.spriteFrame = this.restraintPictures[hero.restraint];\r\n    }\r\n\r\n    drawSkeleton() {\r\n        let hero = this.cultivateController.currentHero;\r\n        if (!hero) return;\r\n        let node = new Node('node');\r\n        let temp = node.addComponent(Skeleton);\r\n        let heroSkeleton = new HeroSkeleton(this.heroSkeleton, temp, heroMgr().getCacheOneFromServer(hero.nftId).heroTypeId);\r\n        hero.parts.forEach(part => { heroSkeleton.addPart(part); });\r\n        heroSkeleton.refresh().then(res => {\r\n            node.destroy();\r\n            this.heroSkeleton.clearTracks();\r\n            this.heroSkeleton.setAnimation(0, DefaultStand, true);\r\n            this.sizeFilter();\r\n        });\r\n    }\r\n\r\n    private size: number = 240;\r\n\r\n    private sizeFilter() {\r\n        let k = Math.max(\r\n          this.heroSkeleton.node.width * this.heroSkeleton.node.scaleX / this.size,\r\n          this.heroSkeleton.node.height * this.heroSkeleton.node.scaleY / this.size);\r\n        if (k > 1) {\r\n            this.heroSkeleton.node.scaleX /= k;\r\n            this.heroSkeleton.node.scaleY /= k;\r\n        }\r\n        this.heroSkeleton.node.y = - 50 - this.size / 3;\r\n    }\r\n\r\n    // endregion\r\n\r\n    playAnimation(name: string) {\r\n        this.animation.play(name);\r\n    }\r\n}\r\n","import {ItemContainer} from \"../../../CoreModule/Components/ItemContainer\";\r\nimport HeroItemDisplay from \"./HeroItemDisplay\";\r\nimport {ScrollviewFilter} from \"../../../CoreModule/Utils/ScrollviewFilter\";\r\nimport Node = cc.Node;\r\nimport {Hero} from \"../../../HeroModule/Data/Hero\";\r\nimport {playerMgr, waitForLogin} from \"../../../PlayerModule/Managers/PlayerManager\";\r\nimport {waitForDataLoad} from \"../../../CoreModule/Managers/DataManager\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HeroItemContainer extends ItemContainer<Hero, HeroItemDisplay> {\r\n\r\n\tstart () {\r\n\t\tthis.setup().then();\r\n\t}\r\n\r\n\t@waitForDataLoad\r\n\t@waitForLogin\r\n\tprivate async setup() {\r\n\t\tconst acc = playerMgr().player.account;\r\n\t\tthis.setItems((await heroMgr().getListFromServer())\r\n\t\t\t.filter(h => h.ownerAccount == acc));\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t}\r\n\r\n\tonItemsChanged() {\r\n\t\tsuper.onItemsChanged();\r\n\t\tlet nodes : Node[] = [];\r\n\t\tthis.itemsComponents.forEach(item => { if(item.node.active == true) nodes.push(item.node) })\r\n\t\tScrollviewFilter.filter(\"vertical\", this.container, nodes, 5, this.node.height, 170);\r\n\t}\r\n\r\n}\r\nimport { heroMgr } from \"../../../HeroModule/Managers/HeroManager\";\r\n","import Label = cc.Label;\r\nimport Sprite = cc.Sprite;\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport Node = cc.Node;\r\nimport Layout = cc.Layout;\r\nimport Button = cc.Button;\r\nimport {autoUnitConvert} from \"../../../../Utils/NumberUtils\";\r\nimport {heroMgr} from \"../../../HeroModule/Managers/HeroManager\";\r\nimport {battleScene} from \"../../../../Scenes/BattleScene\";\r\nimport HeroWithAvatar from \"../HeroWithAvatar\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HeroItemDisplay extends HeroWithAvatar {\r\n\r\n\t@property(Label)\r\n\tnameLabel: Label = null;\r\n\t@property(Label)\r\n\tlevelLabel: Label = null;\r\n\t@property(Label)\r\n\tqualityLabel: Label = null;\r\n\r\n\t@property(Label)\r\n\tattackLabel: Label = null;\r\n\t@property(Label)\r\n\tdefenseLabel: Label = null;\r\n\t@property(Label)\r\n\thealthLabel: Label = null;\r\n\r\n\t@property(Label)\r\n\tupgradeValueLabel: Label = null;\r\n\t@property(Label)\r\n\tupgradeTipsLabel: Label = null;\r\n\r\n\t@property(Sprite)\r\n\tqualityBackground: Sprite = null;\r\n\t@property(Sprite)\r\n\tscissorsIcon: Sprite = null;\r\n\t@property(Sprite)\r\n\tupgradeIcon: Sprite = null;\r\n\t@property(Node)\r\n\tupgradeNode: Node = null;\r\n\tprivate upgradePicture: Sprite = null;\r\n\tprivate upgradeButton: Button = null;\r\n\t@property([Node])\r\n\tstarNodes: Node[] = [];\r\n\t@property(Layout)\r\n\tstarLayout: Layout = null;\r\n\r\n\tstart () {\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\tprivate setup() {\r\n\t\tthis.upgradePicture = this.upgradeNode.getComponent(Sprite);\r\n\t\tthis.upgradeButton = this.upgradeNode.getComponent(Button);\r\n\t}\r\n\r\n\tprotected onItemChanged() {\r\n\t\tsuper.onItemChanged();\r\n\t\tthis.nameLabel.string = this.item.name;\r\n\t\tthis.qualityLabel.string = this.item.qualityData.shortName;\r\n\t\tthis.qualityBackground.spriteFrame = this.qualityPictures[this.item.quality];\r\n\t\tthis.scissorsIcon.spriteFrame = this.scissorsPictures[this.item.restraint];\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\tif (!this.item) return;\r\n\t\tthis.updateLabels();\r\n\t\tthis.updatePictures();\r\n\t\tthis.updateNodes();\r\n\t}\r\n\r\n\t@autoUnitConvert\r\n\tupdateLabels() {\r\n\t\tthis.levelLabel.string = \"Lv.\" + this.item.level.level;\r\n\t\tthis.attackLabel.string = this.item.atk.toString();\r\n\t\tthis.defenseLabel.string = this.item.def.toString();\r\n\t\tthis.healthLabel.string = this.item.mhp.toString();\r\n\t\tif (this.item.level.isMax()) {\r\n\t\t\tthis.upgradeValueLabel.string = \"0\";\r\n\t\t\tthis.upgradeTipsLabel.string = \"\\\\L[SJob10]\";\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (this.item.level.breakEnable()) {\r\n\t\t\tthis.upgradeValueLabel.string =\r\n\t\t\t\tthis.item.break.costs().diamond.value.toString();\r\n\t\t\tthis.upgradeTipsLabel.string = \"\\\\L[SHero3]\";\r\n\t\t} else {\r\n\t\t\tthis.upgradeValueLabel.string =\r\n\t\t\t\tthis.item.level.costs().gold.value.toString();\r\n\t\t\tthis.upgradeTipsLabel.string = \"\\\\L[SJob3]\";\r\n\t\t}\r\n\t}\r\n\r\n\t@property([SpriteFrame])\r\n\tqualityPictures: SpriteFrame[] = [];\r\n\t@property([SpriteFrame])\r\n\tscissorsPictures: SpriteFrame[] = [];\r\n\t@property([SpriteFrame])\r\n\tbuttonPictures: SpriteFrame[] = [];\r\n\t@property([SpriteFrame])\r\n\tupgradeIcons: SpriteFrame[] = [];\r\n\r\n\tprivate static spacingX: number[] = [0, 0, -8, -18, -23];\r\n\tprivate static leftPending: number[] = [29, 12, 0, 0, 0];\r\n\r\n\tupdatePictures() {\r\n\t\tthis.upgradeIcon.spriteFrame = this.item.level.breakEnable() ?\r\n\t\t\tthis.upgradeIcons[0] : this.upgradeIcons[1];\r\n\t}\r\n\r\n\tupdateNodes() {\r\n\t\tconst enable = (this.item.level.breakEnable() &&\r\n\t\t\tthis.item.break.conditions().judge()) ||\r\n\t\t\tthis.item.level.conditions().judge();\r\n\r\n\t\tthis.upgradePicture.spriteFrame = this.buttonPictures[enable ? 0 : 1];\r\n\t\tthis.upgradeButton.interactable = enable;\r\n\r\n\t\tconst star = this.item.star.level;\r\n\t\tthis.starNodes.forEach((n, i) => { n.active = i < star; });\r\n\t\tthis.starLayout.paddingLeft = HeroItemDisplay.leftPending[star - 1];\r\n\t\tthis.starLayout.spacingX = HeroItemDisplay.spacingX[star - 1];\r\n\t}\r\n\r\n\tupgradeBtn() {\r\n\t\tif (this.item.level.breakEnable())\r\n\t\t\theroMgr().break(this.item).then();\r\n\t\telse\r\n\t\t\theroMgr().upgrade(this.item).then();\r\n\t}\r\n\r\n\tonAvatarClick() {\r\n\t\tbattleScene().cultivateWindow.open(this.item);\r\n\t}\r\n\r\n}\r\n","import {BaseManager, getManager, manager} from \"../../CoreModule/Managers/BaseManager\";\r\nimport {Web3NFTData} from \"../../NFTModule/Utils/Web3\";\r\nimport {\r\n\tchainId,\r\n\tChainId,\r\n\tDefaultBt1,\r\n\tDefaultBt2,\r\n\tnftMgr,\r\n\tnftMakeId2PartId\r\n} from \"../../NFTModule/Managers/NFTManager\";\r\nimport {HeroInterface} from \"../Common/HeroCommon\";\r\nimport {Hero, PartSetting} from \"../Data/Hero\";\r\nimport {DataLoader} from \"../../CoreModule/Utils/DataLoader\";\r\nimport {handleError} from \"../../CoreModule/Managers/AlertManager\";\r\nimport {heroTypeRepo} from \"../Data/HeroType\";\r\nimport {QualityType} from \"../Data/Quality\";\r\n\r\nexport const PageSize = 100;\r\n\r\nconst Web3NFTParamCount = 6;\r\n\r\nexport function heroMgr() {\r\n\treturn getManager(HeroManager);\r\n}\r\n\r\n@manager\r\nclass HeroManager extends BaseManager {\r\n\r\n\tpublic data = {};\r\n\r\n\t// region 从链上获取数据\r\n\r\n\t/**\r\n\t * 获取指定英雄\r\n\t */\r\n\tpublic async getOne(bt1: number, bt2: number,\r\n\t\t\t\t\t\t\t\t\t\t\tid: string, refresh?: boolean) {\r\n\t\tlet res = this.getCacheOne(bt1, bt2, id);\r\n\t\tif (!res || refresh)\r\n\t\t\tres = this.add(bt1, bt2, await nftMgr().getNFTDetail(id))\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取类别下的所有英雄（带缓存）\r\n\t */\r\n\tpublic async getList(bt1: number, bt2: number,\r\n\t\t\t\t\t\t\t\t\t\t\t refresh?: boolean) {\r\n\t\tlet res = this.getCacheList(bt1, bt2);\r\n\r\n\t\t// 如果没有缓存或者强制刷新\r\n\t\tif (!res || refresh) {\r\n\t\t\tconst cnt = await this.getCount(bt1, bt2);\r\n\t\t\tconst maxPage = Math.ceil(cnt.createCount / PageSize);\r\n\t\t\t//TODO: 获取 我 创建的英雄数量\r\n\r\n\t\t\tfor (let i = 1; i <= maxPage; i++)\r\n\t\t\t\tawait this.getListWithPage(bt1, bt2, i, refresh);\r\n\r\n\t\t\tres = this.getCacheList(bt1, bt2);\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 分页获取类别下的英雄（带缓存）\r\n\t * 其中page从1开始\r\n\t */\r\n\tpublic async getListWithPage(bt1: number, bt2: number,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t page: number, refresh?: boolean) {\r\n\t\tlet res = this.getCacheListWithPage(bt1, bt2, page);\r\n\r\n\t\t// 如果没有缓存、页面数据为空或强制刷新\r\n\t\tif (!res || res.length <= 0 || refresh) {\r\n\t\t\tlet tmp = await nftMgr().getMyNFTList(page, bt1, bt2, PageSize);\r\n\t\t\ttmp.forEach(d => this.add(bt1, bt2, d));\r\n\t\t\tres = this.getCacheList(bt1, bt2);\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取英雄个数\r\n\t */\r\n\tpublic async getCount(bt1: number, bt2: number) {\r\n\t\treturn await nftMgr().getNFTCount(bt1, bt2);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取缓存单个英雄数据\r\n\t */\r\n\tpublic getCacheOne(bt1: number, bt2: number, id: string) {\r\n\t\tconst list = this.getCacheList(bt1, bt2);\r\n\t\treturn list?.find(d => d.nftId == id);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取缓存列表数据\r\n\t */\r\n\tpublic getCacheList(bt1: number, bt2: number): Hero[] {\r\n\t\treturn this.data[this.getKey(bt1, bt2)];\r\n\t}\r\n\tpublic getCacheListWithPage(bt1: number, bt2: number, page: number): Hero[] {\r\n\t\tlet res = this.getCacheList(bt1, bt2);\r\n\t\treturn res?.splice(page * PageSize, (page + 1) * PageSize);\r\n\t}\r\n\tpublic getOrCreateCacheList(bt1: number, bt2: number): Hero[] {\r\n\t\treturn this.data[this.getKey(bt1, bt2)] ||= [];\r\n\t}\r\n\r\n\t/**\r\n\t * 添加英雄\r\n\t */\r\n\tprivate add(bt1: number, bt2: number, data: Web3NFTData) {\r\n\t\tconst id = data.tokenId;\r\n\t\tconst list = this.getOrCreateCacheList(bt1, bt2);\r\n\r\n\t\t// 获取缓存中单个数据\r\n\t\tlet res = this.getCacheOne(bt1, bt2, id);\r\n\t\t// 如果不存在数据，加到列表里\r\n\t\tif (!res) list.push(res = new Hero());\r\n\t\t// 转换数据\r\n\t\treturn this.convert(data, res);\r\n\t}\r\n\r\n\tprivate getKey(bt1: number, bt2: number) {\r\n\t\treturn bt1 + \"_\" + bt2;\r\n\t}\r\n\r\n\tpublic convert(data: Web3NFTData, res?: Hero): Hero {\r\n\t\tres ||= new Hero()\r\n\t\tres.bt1 = Number(data.seriesId) || DefaultBt1;\r\n\t\tres.bt2 = Number(data.gameId) || DefaultBt2;\r\n\t\tres.chainId = Number(data.chainId) as ChainId || chainId();\r\n\t\tres.nftId = data.tokenId.toString();\r\n\t\tres.name = data.tokenName;\r\n\t\tres.avatarUrl = data.tokenUrl;\r\n\t\tres.quality = QualityType.UR - Number(data.quality) + 1;\r\n\t\tres.price = nftMgr().convertPrice(data.currentPrice);\r\n\t\tres.creatorAccount = data.createAddress.toLowerCase();\r\n\t\tres.ownerAccount = data.ownerAddress.toLowerCase();\r\n\t\tres.addedParams = this.convertParams(data);\r\n\t\tres.partSettings = this.convertComponentIds(data.componentIds);\r\n\t\tres.heroTypeId = res.bodyPart.heroTypeId;\r\n\t\tres.rawData = data;\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\tprivate convertParams(extra: Web3NFTData) {\r\n\t\tconst res = [];\r\n\t\tfor (let i = 1; i <= Web3NFTParamCount; i++)\r\n\t\t\t// 这里是从1开始，并没有转换为从0开始\r\n\t\t\tres[Number(extra[\"et\" + i])] = Number(extra[\"ef\" + i]) / 100;\r\n\t\treturn res;\r\n\t}\r\n\r\n\tprivate convertComponentIds(cidsStr: string) {\r\n\t\treturn cidsStr.split(\"-\").map(\r\n\t\t\tcid => PartSetting.create(nftMakeId2PartId(Number(cid))));\r\n\t}\r\n\r\n\t/**\r\n\t * 获取最新的NFT\r\n\t */\r\n\tpublic async getLastNFT(hash: string) {\r\n\t\tconst hero = await nftMgr().getLastestNFT(hash);\r\n\t\treturn this.convert(hero);\r\n\t}\r\n\r\n\tpublic async synchronizeAllHeroes(){\r\n\t\theroTypeRepo().list.forEach(t => {\r\n\t\t\tnftMgr().getMyNFTList(1, DefaultBt1, DefaultBt2, 9999).then(list => {\r\n\t\t\t\tlist.forEach(d => {\r\n\t\t\t\t\tlet hero = this.convert(d);\r\n\t\t\t\t\tHeroInterface.SyncHero({ hero }).then();\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t})\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 从服务器获取数据\r\n\r\n\tprivate serverKey: string = \"server\";\r\n\r\n\t/**\r\n\t * 获取指定英雄\r\n\t */\r\n\tpublic async getOneFromServer(nftId: string, refresh?: boolean) {\r\n\t\tlet res = this.getCacheOneFromServer(nftId);\r\n\t\tif (!res || refresh)\r\n\t\t\tres = this.addFromServer(await this._getOneFromServer(nftId));\r\n\t\treturn res;\r\n\t}\r\n\r\n\tprivate async _getOneFromServer(nftId: string): Promise<Hero>{\r\n\t\tconst res =  await HeroInterface.GetHero({nftId});\r\n\t\treturn DataLoader.load(Hero, res['hero']);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取类别下的所有英雄（带缓存），默认会刷新缓存\r\n\t */\r\n\tpublic async getListFromServer(refresh: boolean = true) {\r\n\t\tlet res = this.getCacheListFromServer();\r\n\r\n\t\t// 如果没有缓存或者强制刷新\r\n\t\tif (!res || refresh) {\r\n\t\t\tconst cnt = await this.getCountFromServer();\r\n\t\t\tconst maxPage = Math.ceil(cnt / PageSize);\r\n\t\t\t// TODO: 获取 我 创建的英雄数量\r\n\r\n\t\t\tfor (let i = 0; i < maxPage; ++i)\r\n\t\t\t\tawait this.getListWithPageFromServer(i, refresh);\r\n\r\n\t\t\tres = this.getCacheListFromServer();\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\tprivate async _getListFromServer(offset = 0, count = 1000): Promise<Hero[]>{\r\n\t\tconst res = await HeroInterface.GetHeroes({ offset, count });\r\n\t\tlet heroes: Hero[] = [];\r\n\t\tres['heroes'].forEach(hero => {\r\n\t\t\theroes.push(DataLoader.load(Hero, hero));\r\n\t\t})\r\n\t\treturn heroes;\r\n\t}\r\n\r\n\t/**\r\n\t * 分页获取类别下的英雄（带缓存）\r\n\t * 其中page从1开始\r\n\t */\r\n\tpublic async getListWithPageFromServer(page: number, refresh?: boolean) {\r\n\t\tlet res = this.getCacheListWithPageFromServer(page);\r\n\r\n\t\t// 如果没有缓存、页面数据为空或强制刷新\r\n\t\tif (!res || res.length <= 0 || refresh) {\r\n\t\t\tlet tmp = await this._getListFromServer(page * PageSize, PageSize);\r\n\t\t\ttmp.forEach(d => this.addFromServer(d));\r\n\t\t\tres = this.getCacheListFromServer();\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取英雄个数\r\n\t */\r\n\tpublic async getCountFromServer() {\r\n\t\treturn this._getCountFromServer();\r\n\t}\r\n\r\n\tprivate async _getCountFromServer(): Promise<number>{\r\n\t\tconst res =  await HeroInterface.GetHeroCount();\r\n\t\treturn res['count'];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 获取缓存单个英雄数据\r\n\t */\r\n\tpublic getCacheOneFromServer(nftId: string) {\r\n\t\tconst list = this.getCacheListFromServer();\r\n\t\treturn list?.find(d => d.nftId == nftId);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取缓存列表数据\r\n\t */\r\n\tpublic getCacheListFromServer(): Hero[] {\r\n\t\treturn this.data[this.serverKey];\r\n\t}\r\n\tpublic getCacheListWithPageFromServer(page: number): Hero[] {\r\n\t\tlet res = this.getCacheListFromServer();\r\n\t\t// return res?.splice(page * PageSize, (page + 1) * PageSize);\r\n\t\treturn res?.slice(page * PageSize, (page + 1) * PageSize);\r\n\t}\r\n\tpublic getOrCreateCacheListFromServer(): Hero[] {\r\n\t\treturn this.data[this.serverKey] ||= [];\r\n\t}\r\n\r\n\t/**\r\n\t * 添加英雄\r\n\t */\r\n\tprivate addFromServer(data: Hero) {\r\n\t\tconst list = this.getOrCreateCacheListFromServer();\r\n\t\t// 获取缓存中单个数据\r\n\t\tlet res = this.getCacheOneFromServer(data.nftId);\r\n\t\t// 如果不存在数据，加到列表里\r\n\t\tif (!res) list.push((res = data));\r\n\t\t// 转换数据\r\n\t\treturn res;\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 游戏内英雄数据操作\r\n\r\n\t@handleError\r\n\tpublic async upgrade(hero: Hero) {\r\n\t\tawait HeroInterface.UpgradeLevel({nftId: hero.nftId});\r\n\t\thero.level.conditions().process();\r\n\t\thero.level.upgrade();\r\n\t}\r\n\r\n\t@handleError\r\n\tpublic async break(hero: Hero) {\r\n\t\tawait HeroInterface.BreakLevel({nftId: hero.nftId});\r\n\t\thero.break.conditions().process();\r\n\t\thero.break.upgrade();\r\n\t}\r\n\r\n\t@handleError\r\n \tpublic async strengthen(hero: Hero) {\r\n\t\tawait HeroInterface.UpgradeStrengthen({nftId: hero.nftId});\r\n\t\thero.strengthen.conditions().process();\r\n\t\thero.strengthen.upgrade();\r\n\t}\r\n\r\n\t@handleError\r\n\tpublic async starUp(hero: Hero) {\r\n\t\tawait HeroInterface.UpgradeStar({nftId: hero.nftId});\r\n\t\thero.star.conditions().process();\r\n\t\thero.star.upgrade();\r\n\t}\r\n\r\n\t// endregion\r\n\r\n}\r\n\r\n","import Node = cc.Node;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HeroPageController extends cc.Component {\r\n\r\n    @property([Node])\r\n    pages: Node[] = [];\r\n    @property([Node])\r\n    titles: Node[] = [];\r\n\r\n    protected onEnable() {\r\n        this.onStateChange();\r\n    }\r\n\r\n    backBtn() {\r\n        this.state = 0;\r\n        this.onStateChange();\r\n    }\r\n\r\n    teamBtn() {\r\n        this.state = 1;\r\n        this.onStateChange();\r\n    }\r\n\r\n    bagBtn() {\r\n        this.state = 2;\r\n        this.onStateChange();\r\n    }\r\n\r\n    private state: number = 0;\r\n\r\n    onStateChange() {\r\n        this.pages.forEach((n, i) => { n.active = i == this.state; });\r\n        this.titles.forEach((n, i) => { n.active = i == this.state; });\r\n    }\r\n\r\n}\r\n","import {SelectableGroup} from \"../../../../CoreModule/Components/SelectableGroup\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HeroQualitySiftSelectionGroup extends SelectableGroup {\r\n\r\n}\r\n","import {SelectableObject} from \"../../../../CoreModule/Components/SelectableObject\";\r\nimport HeroCompositingContainer from \"./HeroCompositingContainer\";\r\nimport Sprite = cc.Sprite;\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport LabelOutline = cc.LabelOutline;\r\nimport Color = cc.Color;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HeroQualitySiftSelection extends SelectableObject {\r\n\r\n    @property(Number)\r\n    quality: number = -1;\r\n    @property(Sprite)\r\n    picture: Sprite = null;\r\n    @property(LabelOutline)\r\n    outline: LabelOutline = null;\r\n    @property([SpriteFrame])\r\n    pictures: SpriteFrame[] = [];\r\n    public container: HeroCompositingContainer = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    // update (dt) {}\r\n\r\n    onDeselected(): void {\r\n        this.picture.spriteFrame = this.pictures[1];\r\n        this.outline.color = new Color(104, 104, 104);\r\n    }\r\n\r\n    onSelected(): void {\r\n        this.picture.spriteFrame = this.pictures[0];\r\n        this.outline.color = new Color(134, 118, 79);\r\n        this.container?.onSelectionChange();\r\n    }\r\n\r\n}\r\n","import {waitForDataLoad} from \"../../../CoreModule/Managers/DataManager\";\r\nimport {playerMgr, waitForLogin} from \"../../../PlayerModule/Managers/PlayerManager\";\r\nimport {Hero} from \"../../../HeroModule/Data/Hero\";\r\nimport {ScrollviewFilter} from \"../../../CoreModule/Utils/ScrollviewFilter\";\r\nimport {ItemContainer} from \"../../../CoreModule/Components/ItemContainer\";\r\nimport HeroSelectDisplay from \"./HeroSelectDisplay\";\r\nimport Node = cc.Node;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HeroSelectContainer extends ItemContainer<Hero, HeroSelectDisplay> {\r\n\r\n    start () {\r\n        this.setup().then();\r\n    }\r\n\r\n    @waitForDataLoad\r\n    @waitForLogin\r\n    private async setup() {\r\n        const acc = playerMgr().player.account;\r\n        let items: Hero[] = (await heroMgr().getListFromServer()).filter(h => h.ownerAccount == acc);\r\n        this.setItems(items);\r\n    }\r\n\r\n    update (dt) {\r\n    }\r\n\r\n    onItemsChanged() {\r\n        super.onItemsChanged();\r\n        let nodes : Node[] = [];\r\n        this.itemsComponents.forEach(item => { if(item.node.active == true) nodes.push(item.node) })\r\n        ScrollviewFilter.filter(\"vertical\", this.container, nodes, 5, this.node.height, 170);\r\n        battleScene().currentPVPSelect = this.items[0];\r\n        battleScene().heroSelected = true;\r\n    }\r\n}\r\n\r\nimport {heroMgr} from \"../../../HeroModule/Managers/HeroManager\";\r\nimport {battleScene} from \"../../../../Scenes/BattleScene\";\r\n","import Label = cc.Label;\r\nimport Sprite = cc.Sprite;\r\nimport Button = cc.Button;\r\nimport Node = cc.Node;\r\nimport Layout = cc.Layout;\r\nimport {autoUnitConvert} from \"../../../../Utils/NumberUtils\";\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport {battleScene} from \"../../../../Scenes/BattleScene\";\r\nimport HeroWithAvatar from \"../HeroWithAvatar\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HeroSelectDisplay extends HeroWithAvatar {\r\n\r\n    @property(Label)\r\n    nameLabel: Label = null;\r\n    @property(Label)\r\n    levelLabel: Label = null;\r\n    @property(Label)\r\n    qualityLabel: Label = null;\r\n\r\n    @property(Label)\r\n    attackLabel: Label = null;\r\n    @property(Label)\r\n    defenseLabel: Label = null;\r\n    @property(Label)\r\n    healthLabel: Label = null;\r\n\r\n    @property(Sprite)\r\n    qualityBackground: Sprite = null;\r\n    @property(Sprite)\r\n    scissorsIcon: Sprite = null;\r\n    @property(Node)\r\n    selectNode: Node = null;\r\n    private selectPicture: Sprite = null;\r\n    private selectButton: Button = null;\r\n    @property([Node])\r\n    starNodes: Node[] = [];\r\n    @property(Layout)\r\n    starLayout: Layout = null;\r\n    @property(Node)\r\n    selectFrame: Node = null;\r\n\r\n    start () {\r\n        this.setup();\r\n    }\r\n\r\n    private setup() {\r\n        this.selectPicture = this.selectNode.getComponent(Sprite);\r\n        this.selectButton = this.selectNode.getComponent(Button);\r\n    }\r\n\r\n    protected onItemChanged() {\r\n        super.onItemChanged();\r\n        this.nameLabel.string = this.item.name;\r\n        this.qualityLabel.string = this.item.qualityData.shortName;\r\n        this.qualityBackground.spriteFrame = this.qualityPictures[this.item.quality];\r\n        this.scissorsIcon.spriteFrame = this.scissorsPictures[this.item.restraint];\r\n    }\r\n\r\n    update (dt) {\r\n        if (!this.item) return;\r\n        this.updateLabels();\r\n        this.updatePictures();\r\n        this.updateNodes();\r\n    }\r\n\r\n    @autoUnitConvert\r\n    updateLabels() {\r\n        this.levelLabel.string = \"Lv.\" + this.item.level.level;\r\n        this.attackLabel.string = this.item.atk.toString();\r\n        this.defenseLabel.string = this.item.def.toString();\r\n        this.healthLabel.string = this.item.mhp.toString();\r\n    }\r\n\r\n    @property([SpriteFrame])\r\n    qualityPictures: SpriteFrame[] = [];\r\n    @property([SpriteFrame])\r\n    scissorsPictures: SpriteFrame[] = [];\r\n    @property([SpriteFrame])\r\n    buttonPictures: SpriteFrame[] = [];\r\n\r\n    private static spacingX: number[] = [0, 0, -8, -18, -23];\r\n    private static leftPending: number[] = [29, 12, 0, 0, 0];\r\n\r\n    updatePictures() {\r\n\r\n    }\r\n\r\n    updateNodes() {\r\n        if (this.item.level.level > battleScene().currentPVPRoomIndex * 20) {\r\n            this.selectPicture.spriteFrame = this.buttonPictures[0];\r\n            this.selectButton.interactable = true;\r\n        } else {\r\n            this.selectPicture.spriteFrame = this.buttonPictures[1];\r\n            this.selectButton.interactable = false;\r\n        }\r\n        this.starNodes.forEach((n, i) => { n.active = i < this.item.star.level; });\r\n        this.starLayout.paddingLeft = HeroSelectDisplay.leftPending[this.item.star.level - 1];\r\n        this.starLayout.spacingX = HeroSelectDisplay.spacingX[this.item.star.level - 1];\r\n        this.selectFrame.active = battleScene().currentPVPSelect == this.item;\r\n    }\r\n\r\n    selectBtn() {\r\n        battleScene().currentPVPSelect = this.item;\r\n        battleScene().heroSelected = true;\r\n    }\r\n\r\n    onAvatarClick() {\r\n        battleScene().cultivateWindow.open(this.item);\r\n    }\r\n}\r\n","import {BaseConfig, config} from \"../../CoreModule/Data/BaseConfig\";\r\nimport {field} from \"../../CoreModule/Data/BaseData\";\r\n\r\n@config(\"HeroSystemConfig\")\r\nexport class HeroSystemConfig extends BaseConfig {\r\n\r\n\t// 基本属性计算\r\n\t@field\r\n\tparamCalc: any = {};\r\n\r\n\t@field\r\n\tlevel: any = {};\r\n\t@field\r\n\tbreak: any = {};\r\n\t@field\r\n\tstrengthen: any = {};\r\n\t@field\r\n\tstar: any = {};\r\n\r\n}\r\n","import {Hero} from \"./Hero\";\r\nimport {BaseData, field} from \"../../CoreModule/Data/BaseData\";\r\nimport {cFun, cGte, ConditionGroup, ConditionType} from \"../../PlayerModule/Data/Condition\";\r\nimport {HeroSystemConfig} from \"../Configs/HeroSystemConfig\";\r\nimport {ParamType} from \"./Param\";\r\nimport {MathUtils} from \"../../../Utils/MathUtils\";\r\nimport {config} from \"../../CoreModule/Data/BaseConfig\";\r\nimport {configMgr} from \"../../CoreModule/Managers/ConfigManager\";\r\n\r\nexport abstract class HeroSystem extends BaseData {\r\n\r\n\t@field\r\n\tpublic level: number = 0;\r\n\r\n\thero: Hero\r\n\r\n\tconstructor(index, parent) {\r\n\t\tsuper(index);\r\n\t\tthis.hero = parent;\r\n\t}\r\n\r\n\tonCreated() {\r\n\t\tsuper.onCreated();\r\n\t\tthis.level = MathUtils.clamp(this.level, this.minLevel, this.maxLevel);\r\n\t}\r\n\r\n\t// region 基本配置\r\n\r\n\tpublic get minLevel(): number { return 0; }\r\n\tpublic abstract get maxLevel(): number\r\n\r\n\tprotected get affectParams(): ParamType[] { return []; }\r\n\r\n\t// endregion\r\n\r\n\t// region 条件\r\n\r\n\tpublic isMax() { return this.level >= this.maxLevel; }\r\n\tpublic isMin() { return this.level <= this.minLevel; }\r\n\r\n\t// endregion\r\n\r\n\t// region 升级\r\n\r\n\tpublic abstract costs();\r\n\r\n\tpublic conditions() {\r\n\t\treturn ConditionGroup.create(\r\n\t\t\tcFun(() => this.level < this.maxLevel),\r\n\t\t\tthis.costs()\r\n\t\t);\r\n\t}\r\n\r\n\tpublic upgrade() {\r\n\t\tthis.level = Math.min(this.level + 1, this.maxLevel);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 属性计算\r\n\r\n\tpublic calc(val, paramId: ParamType) {\r\n\t\t// 如果 this.affectParams 的长度为 0，对所有属性都生效\r\n\t\tif (this.affectParams.length == 0 ||\r\n\t\t\tthis.affectParams.includes(paramId))\r\n\t\t\treturn this.doCalc(val, paramId);\r\n\t\treturn val;\r\n\t}\r\n\r\n\tprotected abstract doCalc(val, paramId: ParamType);\r\n\r\n\t// endregion\r\n\r\n}\r\n\r\nexport abstract class ConfigurableHeroSystem extends HeroSystem {\r\n\r\n\tabstract get systemName();\r\n\tprotected get config() {\r\n\t\treturn configMgr().config(HeroSystemConfig)[this.systemName]\r\n\t}\r\n\r\n\tpublic get minLevel(): number { return this.config.min; }\r\n\tpublic get maxLevel(): number { return this.config.max; }\r\n\r\n\tprotected get affectParams(): ParamType[] {\r\n\t\treturn Object.keys(this.config.params).map(k => Number.parseInt(k));\r\n\t}\r\n\r\n\tpublic costs() {\r\n\t\tconst res = new ConditionGroup();\r\n\r\n\t\tfor (const key in this.config.cost) {\r\n\t\t\tconst formula = this.config.cost[key];\r\n\t\t\tconst val = this.eval(formula);\r\n\t\t\tval && res.add(cGte(key as ConditionType, val));\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\tprotected doCalc(val, paramId: ParamType) {\r\n\t\tconst formula = this.config.params[paramId];\r\n\t\tconst res = this.eval(formula, val);\r\n\t\treturn res === undefined ? val : res;\r\n\t}\r\n\r\n\tprotected eval(formula, val?) {\r\n\t\tconst i = this.level, c = this.config;\r\n\t\ttry {\r\n\t\t\treturn eval(formula);\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(\"属性计算错误！\", this, val, formula, e);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class LevelData extends ConfigurableHeroSystem {\r\n\r\n\t@field\r\n\tpublic curMaxLevel: number =\r\n\t\tconfigMgr().config(HeroSystemConfig).level.defaultMax;\r\n\r\n\tget systemName() { return \"level\"; }\r\n\r\n\tconditions(): ConditionGroup {\r\n\t\treturn ConditionGroup.create(\r\n\t\t\tcFun(() => this.level < this.curMaxLevel),\r\n\t\t\tsuper.conditions()\r\n\t\t)\r\n\t}\r\n\r\n\tpublic upgrade() {\r\n\t\tif (this.level >= this.curMaxLevel) return;\r\n\t\tsuper.upgrade();\r\n\t}\r\n\r\n\tpublic breakEnable() {\r\n\t\treturn this.level >= this.curMaxLevel && this.curMaxLevel <= this.maxLevel\r\n\t}\r\n\r\n\tpublic break() {\r\n\t\tthis.curMaxLevel = Math.min(this.maxLevel, this.curMaxLevel +\r\n\t\t\tconfigMgr().config(HeroSystemConfig).break.breakLevel);\r\n\t}\r\n\r\n}\r\nexport class BreakData extends ConfigurableHeroSystem {\r\n\r\n\tget systemName() { return \"break\" }\r\n\r\n\tprivate get heroLevel() { return this.hero.level; }\r\n\r\n\tconditions(): ConditionGroup {\r\n\t\treturn ConditionGroup.create(\r\n\t\t\tcFun(() => this.heroLevel.breakEnable()),\r\n\t\t\tsuper.conditions()\r\n\t\t);\r\n\t}\r\n\r\n\tupgrade() {\r\n\t\tsuper.upgrade();\r\n\t\tthis.hero.level.break();\r\n\t}\r\n\r\n}\r\nexport class StrengthenData extends ConfigurableHeroSystem {\r\n\r\n\tget systemName() { return \"strengthen\" }\r\n\r\n}\r\n\r\nexport class StarData extends ConfigurableHeroSystem {\r\n\r\n\tget systemName() { return \"star\" }\r\n\r\n\tprivate get costConfig() {\r\n\t\treturn this.config.costTable[this.hero.quality][this.level - 1];\r\n\t}\r\n\tprivate get paramConfig() {\r\n\t\treturn this.config.paramTable[this.hero.quality][this.level - 1];\r\n\t}\r\n\r\n\tprotected get affectParams(): ParamType[] {\r\n\t\treturn !this.paramConfig ? [] :\r\n\t\t\tObject.keys(this.paramConfig).map(k => Number.parseInt(k));\r\n\t}\r\n\r\n\tprotected doCalc(val, paramId: ParamType) {\r\n\t\treturn val + (this.paramConfig?.[paramId] || 0);\r\n\t}\r\n\r\n\tpublic costs() {\r\n\t\tconst res = new ConditionGroup();\r\n\r\n\t\tif (!this.costConfig) return res;\r\n\t\tfor (const key in this.costConfig)\r\n\t\t\tres.add(cGte(key as ConditionType, this.costConfig[key]));\r\n\r\n\t\treturn res;\r\n\t}\r\n}\r\n","import {ItemContainer} from \"../../../../Modules/CoreModule/Components/ItemContainer\";\r\nimport {HeroType, heroTypeRepo} from \"../../../../Modules/HeroModule/Data/HeroType\";\r\nimport HeroTypeDisplay from \"../ItemPrefabs/HeroTypeDisplay\";\r\nimport HeroTypeSelection from \"../ItemPrefabs/HeroTypeSelection\";\r\nimport HeroTypeSelectionGroup from \"./HeroTypeSelectionGroup\";\r\nimport PartsContainer from \"./PartsContainer\";\r\nimport {waitForLogin} from \"../../../../Modules/PlayerModule/Managers/PlayerManager\";\r\nimport {waitForDataLoad} from \"../../../../Modules/CoreModule/Managers/DataManager\";\r\nimport {ScrollviewFilter} from \"../../../../Modules/CoreModule/Utils/ScrollviewFilter\";\r\nimport Node = cc.Node;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HeroTypeContainer extends ItemContainer<HeroType, HeroTypeDisplay> {\r\n\r\n\t@property(PartsContainer)\r\n\tpartsContainer: PartsContainer = null;\r\n\r\n\tselectionGroup: HeroTypeSelectionGroup = null;\r\n\r\n\t//region 更新控制\r\n\r\n\t@waitForDataLoad\r\n\tprotected start() {\r\n\t\tthis.setItems(heroTypeRepo().list);\r\n\t}\r\n\r\n\tprotected update(dt: number) {\r\n\t\tthis.itemsComponents.forEach(i => i.node.active ? i.size = this.container.width / this.items.length : null);\r\n\t\t// let nodes : Node[] = [];\r\n\t\t// this.itemsComponents.forEach(item => { if(item.node.active == true) nodes.push(item.node) })\r\n\t\t// ScrollviewFilter.filter(\"horizontal\", this.container, nodes, 10, this.node.width);\r\n\t}\r\n\r\n\tprivate updateSelectionGroup(){\r\n\t\tthis.selectionGroup = new HeroTypeSelectionGroup(false)\r\n\t\tthis.itemsComponents.forEach(item => {\r\n\t\t\tlet selection = item.node.getComponent(HeroTypeSelection)\r\n\t\t\tselection.display = selection.getComponent(HeroTypeDisplay)\r\n\t\t\tselection.container = this;\r\n\t\t\tthis.selectionGroup.addElement(selection);\r\n\t\t})\r\n\t}\r\n\r\n\t//endregion\r\n\r\n\t//region 回调控制\r\n\r\n\tonItemsChanged() {\r\n\t\tsuper.onItemsChanged();\r\n\t\tthis.updateSelectionGroup();\r\n\t}\r\n\r\n\tasync onSelectChanged(item: HeroTypeDisplay){\r\n\t\tthis.partsContainer.currentHeroType = item.item;\r\n\t\tawait this.partsContainer.onHeroTypeChange();\r\n\t\tawait this.partsContainer.onTypeChange();\r\n\t}\r\n\r\n\t//endregion\r\n\r\n}\r\n","import {ItemDisplay} from \"../../../../Modules/CoreModule/Components/ItemDisplay\";\r\nimport Label = cc.Label;\r\nimport Node = cc.Node;\r\nimport {HeroType} from \"../../../../Modules/HeroModule/Data/HeroType\";\r\nimport Color = cc.Color;\r\nimport {selectorScene} from \"../../SelectorScene\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HeroTypeDisplay extends ItemDisplay<HeroType> {\r\n\r\n\t@property(Label)\r\n\tlabel: Label = null;\r\n\t@property(Node)\r\n\tbackground: Node = null;\r\n\r\n\tpublic size: number = 0;\r\n\r\n\tprivate isSelected: boolean = false;\r\n\r\n\tstart () { }\r\n\r\n\t//region 更新控制\r\n\r\n\trefresh() {\r\n\t\tsuper.refresh();\r\n\t\tif(this.item == null) return;\r\n\t\tthis.isSelected = false;\r\n\t\tthis.label.string = this.item.getDisplayName();\r\n\t\tif (selectorScene().editorMode)\r\n\t\t\tthis.label.string = `${this.item.id} ${this.label.string}`;\r\n\t}\r\n\r\n\tprotected update(dt: number) {\r\n\t\tthis.node.width = Math.max(this.size, 50);\r\n\t\tthis.label.node.color = this.isSelected ? new Color(255, 255, 255) : new Color(159, 157, 180);\r\n\t\tthis.background.opacity = this.isSelected ? 255 : 0;\r\n\t}\r\n\r\n\t//endregion\r\n\r\n\t//region 回调控制\r\n\r\n\tpublic onSelectChanged(select: boolean){\r\n\t\tthis.isSelected = select;\r\n\t}\r\n\r\n\t//endregion\r\n\r\n}\r\n","import {SelectableGroup} from \"../../../../Modules/CoreModule/Components/SelectableGroup\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HeroTypeSelectionGroup extends SelectableGroup {\r\n\r\n}\r\n","import {SelectableObject} from \"../../../../Modules/CoreModule/Components/SelectableObject\";\r\nimport HeroTypeDisplay from \"./HeroTypeDisplay\";\r\nimport HeroTypeContainer from \"../ItemContainers/HeroTypeContainer\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HeroTypeSelection extends SelectableObject {\r\n\r\n    display: HeroTypeDisplay = null;\r\n    container: HeroTypeContainer = null;\r\n\r\n    //region 回调控制\r\n\r\n    onDeselected(): void {\r\n        this.display.onSelectChanged(false);\r\n    }\r\n\r\n    onSelected(): void {\r\n        this.display.onSelectChanged(true);\r\n        this.container.onSelectChanged(this.display).then();\r\n    }\r\n\r\n    //endregion\r\n\r\n}\r\n","import {BundleName} from \"../../CoreModule/Managers/AssetBundleManager\";\r\nimport {assetField, field} from \"../../CoreModule/Data/BaseData\";\r\nimport {DefaultBt1, DefaultBt2} from \"../../NFTModule/Managers/NFTManager\";\r\nimport {BaseRepository, getRepository, repository} from \"../../CoreModule/Data/BaseRepository\";\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\nimport {partRepo} from \"./Part\";\r\nimport {data, StaticData} from \"../../CoreModule/Data/StaticData\";\r\nimport SkeletonData = sp.SkeletonData;\r\n\r\nexport enum HeroRace {\r\n\tRace0, Race1, Race2, Race3, None\r\n}\r\n\r\n@data(\"HeroType\")\r\nexport class HeroType extends StaticData {\r\n\r\n\t@field\r\n\tpublic bt1: number = DefaultBt1;\r\n\t@field\r\n\tpublic bt2: number = DefaultBt2;\r\n\r\n\t// @field\r\n\t// public name: string = \"\";\r\n\r\n\t@field\r\n\tpublic race: HeroRace = HeroRace.Race0;\r\n\r\n\t@field\r\n\tpublic scale: number = 1;\r\n\r\n\t@field([Number])\r\n\tpublic defaultParts: number[] = [];\r\n\t@field(String)\r\n\tpublic defaultSkeletonName: string = null;\r\n\r\n\t@field\r\n\tpublic createEnable: boolean = true;\r\n\r\n\t@assetField(SkeletonData, BundleName.Sprites,\r\n\t\t\"parts/${defaultSkeletonName}\")\r\n\tpublic defaultSkeleton: SkeletonData;\r\n\r\n\tpublic getDefaultParts() {\r\n\t\treturn partRepo().list.filter( p => this.defaultParts.indexOf(p.id) >= 0);\r\n\t\t// const types = partTypeRepo().list; // DataUtils.partTypes();\r\n\t\t// return types.filter(t => this.defaultParts.indexOf(t.id) >= 0);\r\n\t}\r\n\r\n}\r\n\r\nexport function heroTypeRepo() {\r\n\treturn getRepository(HeroTypeRepo);\r\n}\r\n\r\n@repository\r\nexport class HeroTypeRepo extends BaseRepository<HeroType> {\r\n\r\n\tget clazz(): Constructor<HeroType> { return HeroType; }\r\n\r\n}\r\n","import {ItemDisplay} from \"../../CoreModule/Components/ItemDisplay\";\r\nimport {Hero} from \"../../HeroModule/Data/Hero\";\r\nimport {HeroSkeleton} from \"../../../Utils/SpineUtils\";\r\nimport ccclass = cc._decorator.ccclass;\r\nimport property = cc._decorator.property;\r\nimport Skeleton = sp.Skeleton;\r\nimport Node = cc.Node;\r\nimport Bone = sp.spine.Bone;\r\nimport Slot = sp.spine.Slot;\r\nimport instantiate = cc.instantiate;\r\nimport BattleScene, {battleScene} from \"../../../Scenes/BattleScene\";\r\n\r\n@ccclass\r\nexport default class HeroWithAvatar extends ItemDisplay<Hero> {\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    protected onItemChanged() {\r\n        super.onItemChanged();\r\n        this.drawAvatar();\r\n    }\r\n\r\n    // region 头像绘制\r\n\r\n    @property(Skeleton)\r\n    avatar: Skeleton = null;\r\n\r\n    @property(Number)\r\n    size: number = 100;\r\n\r\n    private avatarHeight: number = 0;\r\n    private avatarWidth: number = 0;\r\n    private avatarOffsetX: number = 0;\r\n    private avatarOffsetY: number = 0;\r\n\r\n    private drawAvatar(){\r\n        this.avatar.node.scale = 0;\r\n        let loading = instantiate(battleScene().loading);\r\n        loading.parent = this.avatar.node.parent;\r\n        loading.scale = this.size / loading.width * 0.7;\r\n        let node = new Node('node');\r\n        let temp = node.addComponent(Skeleton);\r\n        let hero = new HeroSkeleton(this.avatar, temp, this.item.heroTypeId);\r\n        this.item.parts.forEach(part => { hero.addPart(part); });\r\n        hero.refresh().then(res => {\r\n            node.destroy();\r\n            let bone: Bone = hero.findBone(\"head_1\");\r\n\r\n            hero.skeleton.updateWorldTransform();\r\n            let offsetX = bone.worldX, offsetY = bone.worldY;\r\n            while (bone.parent) bone = bone.parent;\r\n            bone.x -= offsetX;\r\n            bone.y -= offsetY;\r\n\r\n            let slot: Slot = hero.findSlot(\"head_1\");\r\n            if (!slot.getAttachment()) return;\r\n            this.avatarHeight = slot.getAttachment()[\"height\"];\r\n            this.avatarWidth = slot.getAttachment()[\"width\"];\r\n            this.avatarOffsetY = slot.getAttachment()[\"x\"];\r\n            this.avatarOffsetX = slot.getAttachment()[\"y\"];\r\n            this.sizeFilter();\r\n            loading.destroy();\r\n        });\r\n    }\r\n\r\n    private sizeFilter() {\r\n        let k = Math.min(this.avatarWidth / this.size, this.avatarHeight / this.size);\r\n        k *= 1.2;\r\n        // this.avatar.node.x = - this.avatarOffsetX / k;\r\n        this.avatar.node.y = - this.avatarOffsetY / k;\r\n        if (k > 1) this.avatar.node.scale = 1 / k;\r\n        else this.avatar.node.scale = 1;\r\n    }\r\n\r\n    // endregion\r\n\r\n}\r\n","import {DynamicData} from \"../../CoreModule/Data/DynamicData\";\r\nimport {Web3NFTData} from \"../../NFTModule/Utils/Web3\";\r\nimport {ChainId, DefaultBt1, DefaultBt2, DefaultChainId} from \"../../NFTModule/Managers/NFTManager\";\r\nimport {qualityRepo, QualityType} from \"./Quality\";\r\nimport {Part, partRepo} from \"./Part\";\r\nimport {heroTypeRepo} from \"./HeroType\";\r\nimport {BreakData, LevelData, StarData, StrengthenData} from \"./HeroSystem\";\r\nimport {BaseData, dataPK, field} from \"../../CoreModule/Data/BaseData\";\r\nimport {paramRepo, ParamType} from \"./Param\";\r\nimport {MathUtils} from \"../../../Utils/MathUtils\";\r\nimport {IEntity} from \"../../BattleModule/Data/Battler\";\r\nimport {configMgr} from \"../../CoreModule/Managers/ConfigManager\";\r\nimport {HeroSystemConfig} from \"../Configs/HeroSystemConfig\";\r\nimport {SpecialPartType} from \"./PartType\";\r\n\r\nexport enum HeroState {\r\n\tNotCreated, Created, Destroyed\r\n}\r\n\r\nexport enum RestraintType {\r\n\t// Red: 布, Green: 石头，Blue: 剪刀\r\n\t// 0 克制 1, 1 克制 2, 2 克制 0\r\n\t// 判断克制方式：(x + 1) % 3 == y => x 克制 y\r\n\t// 判断被克制方式：(x + 2) % 3 == y => x 被 y 克制\r\n\tRed, Green, Blue\r\n}\r\n\r\nexport const SuitPattern = [\r\n\t[[1,1,1,1,1]],[[2,1,1,1]],[[2,2,1],[3,1,1]],[[4,1],[3,2]],[[5]]\r\n]\r\n\r\nexport class PartSetting extends BaseData {\r\n\r\n\t@field(Number)\r\n\tpublic partId: number;\r\n\t@field\r\n\tpublic scale: number = 1;\r\n\r\n\tprivate _part;\r\n\tpublic part() {\r\n\t\treturn this._part ||= partRepo().getById(this.partId);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建\r\n\t */\r\n\tpublic static create(partId: number, scale: number = 1) {\r\n\t\tconst res = new PartSetting();\r\n\t\tres.partId = partId;\r\n\t\tres.scale = scale;\r\n\t\treturn res;\r\n\t}\r\n}\r\n\r\nexport class Hero extends DynamicData implements IEntity {\r\n\r\n\t@field @dataPK\r\n\tpublic nftId: string = \"\";\r\n\r\n\t@field\r\n\tpublic bt1: number = DefaultBt1;\r\n\t@field\r\n\tpublic bt2: number = DefaultBt2;\r\n\t@field\r\n\tpublic chainId: ChainId = DefaultChainId; // 链ID\r\n\t@field(Number)\r\n\tpublic heroTypeId: number;\r\n\r\n\t@field(String)\r\n\tpublic creatorAccount: string;\r\n\t@field(String)\r\n\tpublic ownerAccount: string;\r\n\t@field(String)\r\n\tpublic name: string;\r\n\t@field(String)\r\n\tpublic avatarUrl: string;\r\n\t@field(String)\r\n\tpublic description: string;\r\n\r\n\t@field(LevelData)\r\n\tpublic level: LevelData;\r\n\t@field(BreakData)\r\n\tpublic break: BreakData;\r\n\t@field(StrengthenData)\r\n\tpublic strengthen: StrengthenData;\r\n\t@field(StarData)\r\n\tpublic star: StarData;\r\n\r\n\t@field(Number)\r\n\tpublic quality: QualityType;\r\n\t@field\r\n\tpublic restraint: RestraintType = RestraintType.Red;\r\n\t@field\r\n\tpublic variation: boolean = false;\r\n\t@field(Number)\r\n\tpublic rank: number;\r\n\r\n\t@field([Number])\r\n\tpublic params: number[] = [];\r\n\t@field([Number])\r\n\tpublic addedParams: number[] = [];\r\n\r\n\t@field([Number])\r\n\tpublic skillIds: number[] = [];\r\n\t// @field([Trait])\r\n\t// public traits: Trait[] = [];\r\n\r\n\t@field([Number])\r\n\tpublic suitPattern: number[] = [];\r\n\t@field([PartSetting])\r\n\tpublic partSettings: PartSetting[] = [];\r\n\t@field(Number)\r\n\tpublic createdAt: number;\r\n\r\n\t@field\r\n\tpublic price: number = 0;\r\n\r\n\t@field\r\n\tpublic state: HeroState = HeroState.NotCreated;\r\n\r\n\t@field(Object)\r\n\tpublic rawData: Web3NFTData;\r\n\r\n\tonCreated() {\r\n\t\tsuper.onCreated();\r\n\t\tthis.initHeroSystems();\r\n\t}\r\n\r\n\t// region 组件数据\r\n\r\n\t/**\r\n\t * 英雄类型\r\n\t */\r\n\tpublic get heroType() {\r\n\t\treturn heroTypeRepo().getById(this.heroTypeId);\r\n\t}\r\n\r\n\t/**\r\n\t * 骨骼\r\n\t */\r\n\tpublic get skeleton() {\r\n\t\treturn this.heroType?.defaultSkeleton;\r\n\t}\r\n\r\n\t/**\r\n\t * 部件列表\r\n\t */\r\n\tprivate _parts: Part[];\r\n\tpublic get parts() {\r\n\t\treturn this._parts ||= this.partSettings.map(\r\n\t\t\tps => partRepo().getById(ps.partId)) // DataUtils.part(pid, \"id\"));\r\n\t}\r\n\r\n\t/**\r\n\t * 特殊部件\r\n\t */\r\n\tpublic get bodyPart() {\r\n\t\treturn this.parts.find(p => p.partType.special === SpecialPartType.Body)\r\n\t}\r\n\tpublic get weaponPart() {\r\n\t\treturn this.parts.find(p => p.partType.special === SpecialPartType.Weapon)\r\n\t}\r\n\r\n\t/**\r\n\t * 种族\r\n\t */\r\n\tpublic get race() {return this.heroType.race; }\r\n\r\n\t// endregion\r\n\r\n\t// region 其他数据\r\n\r\n\t/**\r\n\t * 获取品质数据\r\n\t */\r\n\tpublic get qualityData() {\r\n\t\treturn qualityRepo().getById(this.quality);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 属性控制\r\n\r\n\t/**\r\n\t * 初始化英雄系统\r\n\t */\r\n\tprivate initHeroSystems() {\r\n\t\tthis.level ||= new LevelData(null, this);\r\n\t\tthis.break ||= new BreakData(null, this);\r\n\t\tthis.strengthen ||= new StrengthenData(null, this);\r\n\t\tthis.star ||= new StarData(null, this);\r\n\t}\r\n\r\n\t/**\r\n\t * 战斗力\r\n\t */\r\n\tpublic get battlePoint() {\r\n\t\treturn paramRepo().find().reduce((res, p) =>\r\n\t\t\tres + this.param(p.id) * p.battlePoint, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * 英雄系统\r\n\t */\r\n\tprivate _heroSystems;\r\n\tprotected get heroSystems() {\r\n\t\treturn this._heroSystems ||= [\r\n\t\t\tthis.break, this.strengthen, this.star\r\n\t\t]\r\n\t}\r\n\r\n\t/**\r\n\t * 获取属性\r\n\t */\r\n\tpublic param(index: ParamType): number {\r\n\t\tconst params = paramRepo().find();\r\n\t\tconst param = paramRepo().getById(index);\r\n\t\tconst bonusParams = params.filter(p => p.bonus.includes(index));\r\n\r\n\t\tconst val = this.heroSystems.reduce(\r\n\t\t\t(res, p) => p.calc(res, index),\r\n\t\t\tthis.baseParam(index)\r\n\t\t);\r\n\t\tconst bonus = bonusParams.reduce((sum, p) =>\r\n\t\t\tsum * this.param(p.id), 1);\r\n\r\n\t\tlet res = val * bonus;\r\n\t\tif (!param.isPercent) res = Math.round(res);\r\n\t\treturn MathUtils.clamp(res, param.min, param.max);\r\n\t}\r\n\r\n\t/**\r\n\t * 战斗等级\r\n\t */\r\n\tget battleLevel(): number {\r\n\t\treturn this.level.level\r\n\t}\r\n\r\n\t/**\r\n\t * 战斗属性\r\n\t */\r\n\tget battleParams(): number[] {\r\n\t\tconst params = paramRepo().find();\r\n\t\treturn params.map(p => this.param(p.id));\r\n\t}\r\n\r\n\t/**\r\n\t * 基础属性值\r\n\t */\r\n\tpublic baseParam(index: ParamType) {\r\n\t\tconst param = paramRepo().getById(index);\r\n\t\tlet base = this.params[index] || param.default_;\r\n\r\n\t\tconst config = configMgr().config(HeroSystemConfig).paramCalc;\r\n\r\n\t\tif (index in config) {\r\n\t\t\tconst level = this.level.calc(0, index);\r\n\t\t\tconst pow = this.pow, agi = this.agi, int = this.int;\r\n\t\t\ttry {\r\n\t\t\t\tbase += eval(config[index]);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.error(\"计算公式有误！\", index, config, {\r\n\t\t\t\t\tlevel, pow, agi, int\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// TODO: 暂时不对接平台数据\r\n\t\t// let add = this.addedParams[index + 1] || (param.isPercent ? 100 : 0);\r\n\t\t// if (param.isPercent) add = base * (add / 100 - 1);\r\n\r\n\t\treturn base //+ add;\r\n\t}\r\n\r\n\t/**\r\n\t * 属性快速访问\r\n\t */\r\n\tpublic get cp() { return this.param(ParamType.CP) }\r\n\tpublic get cpb() { return this.param(ParamType.CPB) }\r\n\tpublic get hid() { return this.param(ParamType.HID) }\r\n\tpublic get pow() { return this.param(ParamType.POW) }\r\n\tpublic get agi() { return this.param(ParamType.AGI) }\r\n\tpublic get int() { return this.param(ParamType.INT) }\r\n\tpublic get powb() { return this.param(ParamType.POWB) }\r\n\tpublic get agib() { return this.param(ParamType.AGIB) }\r\n\tpublic get intb() { return this.param(ParamType.INTB) }\r\n\tpublic get atk() { return this.param(ParamType.ATK) }\r\n\tpublic get cri() { return this.param(ParamType.CRI) }\r\n\tpublic get dmg() { return this.param(ParamType.DMG) }\r\n\tpublic get atkb() { return this.param(ParamType.ATKB) }\r\n\tpublic get crib() { return this.param(ParamType.CRIB) }\r\n\tpublic get dmgb() { return this.param(ParamType.DMGB) }\r\n\tpublic get def() { return this.param(ParamType.DEF) }\r\n\tpublic get avo() { return this.param(ParamType.AVO) }\r\n\tpublic get eva() { return this.param(ParamType.EVA) }\r\n\tpublic get defb() { return this.param(ParamType.DEFB) }\r\n\tpublic get avob() { return this.param(ParamType.AVOB) }\r\n\tpublic get evab() { return this.param(ParamType.EVAB) }\r\n\tpublic get mhp() { return this.param(ParamType.MHP) }\r\n\tpublic get spd() { return this.param(ParamType.SPD) }\r\n\tpublic get hit() { return this.param(ParamType.HIT) }\r\n\tpublic get mhpb() { return this.param(ParamType.MHPB) }\r\n\tpublic get spdb() { return this.param(ParamType.SPDB) }\r\n\tpublic get hitb() { return this.param(ParamType.HITB) }\r\n\tpublic get ab1() { return this.param(ParamType.AB1) }\r\n\tpublic get ab2() { return this.param(ParamType.AB2) }\r\n\tpublic get ab3() { return this.param(ParamType.AB3) }\r\n\tpublic get ab4() { return this.param(ParamType.AB4) }\r\n\tpublic get bp() { return this.param(ParamType.BP) }\r\n\tpublic get bpb() { return this.param(ParamType.BPB) }\r\n\r\n\t// endregion\r\n\r\n\t// region 创建\r\n\r\n\t/**\r\n\t * 创建\r\n\t */\r\n\tpublic static create(account: string, heroTypeId: number,\r\n\t\t\t\t\t\t\t\t\t\t\t partInfos: PartSetting[], name: string) {\r\n\t\tconst res = new Hero();\r\n\t\tres.nftId = \"LOC_\" + MathUtils.randomString();\r\n\t\tres.creatorAccount = res.ownerAccount = account;\r\n\t\tres.heroTypeId = heroTypeId;\r\n\t\tres.partSettings = partInfos;\r\n\t\tres.name = name;\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\tpublic static createRandomQuality() {\r\n\r\n\t}\r\n\r\n\t// endregion\r\n\r\n}\r\n","import Node = cc.Node;\r\nimport Label = cc.Label;\r\nimport Font = cc.Font;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HitDamage extends cc.Component {\r\n\r\n    @property(Number)\r\n    public speedX: number = 0; // 水平初速度，默认为0\r\n    @property(Number)\r\n    public speedY: number = 0; // 竖直初速度，默认为0\r\n    @property(Number)\r\n    public accelerationY: number = 200; // 竖直加速度，默认为200\r\n    @property(Number)\r\n    public timer: number = 0.5; // 存活计时器，该计时器归零后飘字开始渐隐\r\n    @property(Number)\r\n    public scaleSpeed: number = 2; // 飘字逐渐变大的速度，默认为2，即1/2秒完成缩放\r\n    @property(Number)\r\n    public disappearSpeed: number = 1000; // 计时器归零后渐隐速度，默认为1000，即0.255秒完成消失\r\n    @property(Number)\r\n    public maxScale: number = 1;\r\n    @property([Font])\r\n    atlas: Font[] = [];\r\n    @property(Node)\r\n    miss: Node = null;\r\n\r\n    start () {\r\n        this.node.scaleX = 0;\r\n        this.node.scaleY = 0;\r\n    }\r\n\r\n    protected update(dt: number) {\r\n        if (this.timer <= 0 ) {\r\n            this.node.opacity -= this.disappearSpeed * dt;\r\n            if(this.node.opacity <= 0) this.node.destroy();\r\n        }\r\n        this.updateScale(dt);\r\n        this.updatePosition(dt);\r\n        this.timer -= dt;\r\n    }\r\n\r\n    private updateScale(dt: number) {\r\n        this.node.scaleX = Math.min(this.maxScale, this.node.scaleX + 3 * dt * this.maxScale);\r\n        this.node.scaleY = Math.min(this.maxScale, this.node.scaleY + 3 * dt * this.maxScale);\r\n    }\r\n\r\n    private updatePosition(dt: number) {\r\n        this.node.x += this.speedX * dt;\r\n        this.node.y += this.speedY * dt;\r\n        this.speedY += this.accelerationY * dt;\r\n    }\r\n\r\n    public setValue(val: number) {\r\n        this.getComponent(Label).string = \"\" + val;\r\n    }\r\n\r\n    public setPosition(x: number, y: number) {\r\n        this.node.x = x;\r\n        this.node.y = y;\r\n    }\r\n\r\n    public setRange(x: number, y: number) {\r\n        let rx = Math.random() * x - x / 2, ry = Math.random() * y - y / 2;\r\n        this.node.x += rx;\r\n        this.node.y += ry;\r\n        this.speedX = Math.min(150, Math.max(-150, rx));\r\n    }\r\n\r\n    public setType(type: number) {\r\n        if (type == HitType.Miss) {\r\n            this.miss.active = true;\r\n            this.getComponent(Label).string = \"\";\r\n            return;\r\n        }\r\n        this.miss.active = false;\r\n        this.getComponent(Label).font = this.atlas[type];\r\n    }\r\n\r\n}\r\n\r\nexport enum HitType {\r\n    Normal, Critical, Recover , Miss\r\n}\r\n","import {BaseManager, getManager, manager} from \"./BaseManager\";\r\nimport {LocalizedLabel} from \"../Components/LocalizedLabel\";\r\nimport {LocalizedSprite} from \"../Components/LocalizedSprite\";\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport JsonAsset = cc.JsonAsset;\r\nimport {PromiseUtils} from \"../../../Utils/PromiseUtils\";\r\nimport {assetMgr, BundleName} from \"./AssetBundleManager\";\r\n\r\nexport function i18nMgr(): I18nManager {\r\n\treturn getManager(I18nManager);\r\n}\r\n\r\nexport type LanguageType = 'zh' | 'ko' | 'ja' | 'en';\r\nexport const Languages: LanguageType[] = [\r\n\t'zh','ko', 'ja', 'en'\r\n];\r\nexport function getLanguage(type: LanguageType) {\r\n\treturn Languages.indexOf(type);\r\n}\r\n\r\nconst TranFileName = \"translation\";\r\n\r\n@manager\r\nclass I18nManager extends BaseManager {\r\n\r\n\tprivate curLanguage: LanguageType = 'zh';\r\n\r\n\tprivate registeredLabels: LocalizedLabel[] = [];\r\n\tprivate registeredSprites: LocalizedSprite[] = [];\r\n\tprivate translation: any;\r\n\tprivate spriteTranslation: any;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.loadTranslation().then();\r\n\t}\r\n\r\n\tasync loadTranslation() {\r\n\t\tawait PromiseUtils.waitFor(() => assetMgr && !!assetMgr());\r\n\t\tthis.translation ||= (await assetMgr().loadAsset(\r\n\t\t\tJsonAsset, BundleName.Data, TranFileName))?.json;\r\n\t}\r\n\r\n\tpublic getKey(key: string) {\r\n\t\treturn this.translation && this.translation[key];\r\n\t}\r\n\r\n\tpublic makeStr(key: string, default_: string = \"\") {\r\n\t\treturn this.getKey(key) ? `\\\\L[${key}]` : default_;\r\n\t}\r\n\r\n\t/**\r\n\t * 翻译文字\r\n\t * @param string\r\n\t */\r\n\tpublic t(string: string): string {\r\n\t\tconst index = getLanguage(this.curLanguage);\r\n\t\tlet result: string = \"\";\r\n\t\t// 应该可以改成用正则表达式来简化\r\n\t\tfor (let i = 0; i < string.length; i++) {\r\n\t\t\tif (string.startsWith(\"\\\\L[\", i)) {\r\n\t\t\t\ti += 3;\r\n\t\t\t\tlet tag = \"\";\r\n\t\t\t\twhile (string.charAt(i) != ']') {\r\n\t\t\t\t\ttag += string.charAt(i);\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.translation == undefined) {\r\n\t\t\t\t\tresult += \"{!\" + tag + \"!}\";\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tlet tr = this.translation[tag];\r\n\t\t\t\tif (tr == undefined || tr[index] == undefined) {\r\n\t\t\t\t\tresult += \"{!\" + tag + \"!}\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult += tr[index];\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tresult += string.charAt(i);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * 翻译图片\r\n\t * @param spriteName\r\n\t */\r\n\tasync ts(spriteName: string) {\r\n\t\tconst index = getLanguage(this.curLanguage);\r\n\t\treturn await this.loadSpriteFrame(BundleName.Sprites,\r\n\t\t\tspriteName + \"$\" + index) ||\r\n\t\t\tawait this.loadSpriteFrame(\r\n\t\t\t\tBundleName.Sprites, spriteName);\r\n\t}\r\n\r\n\tprivate loadSpriteFrame(bundleName: string, assetPath: string) {\r\n\t\t/* if(object==null) {\r\n\r\n\t\t} else {\r\n\t\t\t\tconst reg = /\\${(.+?)}/g;\r\n\t\t\t\tconst regRes = reg.exec(assetPath)\r\n\t\t\t\t// const replaceReg = new RegExp(regRes[0], 'g');\r\n\t\t\t\tconst name = object[regRes[1]];\r\n\t\t\t\tif (name) assetPath = assetPath.replace(reg, name);\r\n\t\t} */\r\n\t\treturn assetMgr().loadAsset<SpriteFrame>(SpriteFrame, bundleName, assetPath);\r\n\t}\r\n\r\n\tpublic registerLabel(label: LocalizedLabel): void {\r\n\t\tthis.unregisterLabel(label);\r\n\t\tthis.registeredLabels.push(label);\r\n\t}\r\n\r\n\tpublic unregisterLabel(label: LocalizedLabel): void {\r\n\t\tlet idx = this.registeredLabels.indexOf(label);\r\n\t\tif (idx == -1) return;\r\n\t\tthis.registeredLabels.splice(idx, 1);\r\n\t}\r\n\r\n\tpublic registerSprite(sprite: LocalizedSprite): void {\r\n\t\tthis.unregisterSprite(sprite);\r\n\t\tthis.registeredSprites.push(sprite);\r\n\t}\r\n\r\n\tpublic unregisterSprite(sprite: LocalizedSprite): void {\r\n\t\tlet idx = this.registeredSprites.indexOf(sprite);\r\n\t\tif (idx == -1) return;\r\n\t\tthis.registeredSprites.splice(idx, 1);\r\n\t}\r\n\r\n\tpublic setLanguage(language: LanguageType): void {\r\n\t\tif (this.curLanguage == language) return;\r\n\t\tthis.curLanguage = language;\r\n\t\tthis.updateUIs();\r\n\t}\r\n\r\n\tpublic getCurrentLanguage(): LanguageType {\r\n\t\treturn this.curLanguage;\r\n\t}\r\n\r\n\tprivate updateUIs(): void {\r\n\t\tthis.registeredLabels.forEach(l => l.updateText());\r\n\t\tthis.registeredSprites.forEach(l => l.updateSprite());\r\n\t}\r\n}\r\n","import {ItemDisplay} from \"../../../../Modules/CoreModule/Components/ItemDisplay\";\r\nimport Label = cc.Label;\r\nimport Node = cc.Node;\r\nimport {PartInfo} from \"../../../../Modules/HeroModule/Data/PartInfo\";\r\nimport {selectorScene} from \"../../SelectorScene\";\r\nimport PartsDisplay from \"../ItemPrefabs/PartsDisplay\";\r\nimport PreviewPictureDisplay from \"../ItemPrefabs/PreviewPictureDisplay\";\r\nimport {configMgr} from \"../../../../Modules/CoreModule/Managers/ConfigManager\";\r\nimport PartConfig from \"../../../../Modules/HeroModule/Configs/PartConfig\";\r\nimport Slider = cc.Slider;\r\nimport PartsContainer from \"../ItemContainers/PartsContainer\";\r\nimport EditBox = cc.EditBox;\r\nimport Component = cc.Component;\r\nimport {DataLoader} from \"../../../../Modules/CoreModule/Utils/DataLoader\";\r\nimport {AlertDialogType, alertMgr} from \"../../../../Modules/CoreModule/Managers/AlertManager\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class ImportWindow extends Component {\r\n\r\n\t@property(EditBox)\r\n\timportInput: EditBox = null;\r\n\r\n\t// region 操作\r\n\r\n\tpublic show() {\r\n\t\tthis.node.active = true\r\n\t}\r\n\r\n\tpublic close() {\r\n\t\tthis.node.active = false\r\n\t}\r\n\r\n\tpublic import() {\r\n\t\tconst text = this.importInput.string;\r\n\t\ttry {\r\n\t\t\tconst json = JSON.parse(text);\r\n\t\t\tconst config = configMgr().config(PartConfig);\r\n\t\t\tObject.assign(config, json);\r\n\t\t\tconsole.log(json, \" -> \", config);\r\n\t\t\talertMgr().alert('导入成功！',\r\n\t\t\t\t\"\", AlertDialogType.OK).then();\r\n\t\t\tselectorScene().globalEditor.refresh();\r\n\t\t\tselectorScene().singleEditor.refresh();\r\n\t\t\tthis.close();\r\n\t\t} catch (e) {\r\n\t\t\talertMgr().alert('导入数据格式不正确！',\r\n\t\t\t\t\"\", AlertDialogType.OK).then();\r\n\t\t}\r\n\t}\r\n\r\n\t// endregion\r\n\r\n}\r\n","\r\nimport {ItemDisplay} from \"./ItemDisplay\";\r\nimport {BaseData} from \"../Data/BaseData\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class ItemContainer<T extends BaseData, D extends ItemDisplay<T>> extends cc.Component {\r\n\r\n\t@property(cc.Node)\r\n\tcontainer: cc.Node = null;\r\n\t@property(cc.Prefab)\r\n\tprefab: cc.Prefab = null;\r\n\r\n\tpublic items: T[] = [];\r\n\tprotected itemsComponents: D[] = [];\r\n\tprotected itemCount: number = 0;\r\n\r\n\tpublic isInclude(item: T) { return true; }\r\n\r\n\tpublic setItems(items: T[]){\r\n\t\tthis.items = items.filter(item => this.isInclude(item));\r\n\t\tthis.onItemsChanged();\r\n\t}\r\n\r\n\tprotected onItemsChanged(){\r\n\t\tthis.refresh();\r\n\t}\r\n\r\n\tpublic refresh() {\r\n\t\tthis.refreshComponents();\r\n\t}\r\n\tprivate refreshComponents() {\r\n\t\tfor (let i = 0; i < this.items.length; i++) {\r\n\t\t\tif (i >= this.itemsComponents.length)\r\n\t\t\t\tthis.createItemDisplay();\r\n\t\t\telse\r\n\t\t\t\tthis.itemsComponents[i].node.active = true;\r\n\t\t\tthis.itemsComponents[i].setItem(this.items[i]);\r\n\t\t}\r\n\t\tfor (let i = this.items.length; i < this.itemsComponents.length; i++) {\r\n\t\t\tthis.itemsComponents[i].node.active = false;\r\n\t\t\t//this.itemsComponents[i].setItem(null);\r\n\t\t}\r\n\t\tthis.itemCount = this.items.length;\r\n\t}\r\n\r\n\tprivate createItemDisplay() {\r\n\t\tconst node = cc.instantiate(this.prefab);\r\n\t\tnode.parent = this.container;\r\n\r\n\t\tconst res = node.getComponent(ItemDisplay) as D;\r\n\t\tthis.onItemDisplayCreated(res);\r\n\t\tthis.itemsComponents.push(res);\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\tprotected onItemDisplayCreated(display: D) {\r\n\r\n\t}\r\n}\r\n","import {BaseData} from \"../Data/BaseData\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport abstract class ItemDisplay<T extends BaseData> extends cc.Component {\r\n\r\n\titem: T = null;\r\n\r\n\t// isStarted = false;\r\n\r\n\tprotected start() {\r\n\t\t// this.isStarted = true;\r\n\t}\r\n\r\n\tpublic setItem(item: T) {\r\n\t\t// if (!this.isStarted) this.start();\r\n\t\tthis.item = item;\r\n\t\tthis.onItemChanged();\r\n\t}\r\n\r\n\tprotected onItemChanged() {\r\n\t\tthis.refresh();\r\n\t}\r\n\r\n\tpublic refresh() {}\r\n\r\n}\r\n","import {ItemContainer} from \"../../../CoreModule/Components/ItemContainer\";\r\nimport JobDisplay from \"./JobDisplay\";\r\nimport {Job, jobRepo} from \"../../../EconomicModule/Data/Job\";\r\nimport {ScrollviewFilter} from \"../../../CoreModule/Utils/ScrollviewFilter\";\r\nimport Node = cc.Node;\r\nimport {PlayerJob, PlayerJobItem} from \"../../../EconomicModule/Data/PlayerJob\";\r\nimport {playerMgr, waitForLogin} from \"../../../PlayerModule/Managers/PlayerManager\";\r\nimport {waitForDataLoad} from \"../../../CoreModule/Managers/DataManager\";\r\nimport {economicMgr} from \"../../../EconomicModule/Manager/EconomicManager\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n// @ccclass\r\n// export default class JobContainer extends ItemContainer<Job, JobDisplay> {\r\n//\r\n//     private isLoad: boolean = false;\r\n//\r\n//     start () {\r\n//         this.setup();\r\n//     }\r\n//\r\n//     update (dt) {\r\n//         if (!this.isLoad) {\r\n//             this.setup();\r\n//             if (!this.isLoad) return;\r\n//         }\r\n//     }\r\n//\r\n//     private setup() {\r\n//         this.setItems(jobRepo().list);\r\n//         this.isLoad = true;\r\n//     }\r\n//\r\n//     onItemsChanged() {\r\n//         super.onItemsChanged();\r\n//         let nodes : Node[] = [];\r\n//         this.itemsComponents.forEach(item => { if(item.node.active == true) nodes.push(item.node) })\r\n//         ScrollviewFilter.filter(\"vertical\", this.container, nodes, 5, this.node.height, 10);\r\n//     }\r\n//\r\n// }\r\n\r\n@ccclass\r\nexport default class JobContainer extends ItemContainer<PlayerJobItem, JobDisplay> {\r\n\r\n\t// private isLoad: boolean = false;\r\n\r\n\tstart () {\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t// update (dt) {\r\n\t// \tif (!this.isLoad) {\r\n\t// \t\tthis.setup();\r\n\t// \t\tif (!this.isLoad) return;\r\n\t// \t}\r\n\t// }\r\n\r\n\t@waitForDataLoad\r\n\t@waitForLogin\r\n\tprivate setup() {\r\n\t\tconst playerJob = playerMgr().getPlayerData(PlayerJob);\r\n\t\tconst jobs = jobRepo().list;\r\n\r\n\t\tthis.setItems(jobs.map(j => playerJob.job(j.id)));\r\n\t\teconomicMgr().playerJob = playerJob;\r\n\t\teconomicMgr().jobItems = jobs.map(j => playerJob.job(j.id));\r\n\t\t// this.isLoad = true;\r\n\t}\r\n\r\n\tonItemsChanged() {\r\n\t\tsuper.onItemsChanged();\r\n\t\tconst nodes = [];\r\n\t\tthis.itemsComponents.forEach(item =>\r\n\t\t\titem.node.active && nodes.push(item.node)\r\n\t\t)\r\n\t\tScrollviewFilter.filter(\"vertical\", this.container,\r\n\t\t\tnodes, 5, this.node.height, 170);\r\n\t}\r\n\r\n}\r\n","import {ItemDisplay} from \"../../../CoreModule/Components/ItemDisplay\";\r\nimport Label = cc.Label;\r\nimport Node = cc.Node;\r\nimport Button = cc.Button;\r\nimport Sprite = cc.Sprite;\r\nimport ProgressBar = cc.ProgressBar;\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport {PlayerJobItem} from \"../../../EconomicModule/Data/PlayerJob\";\r\nimport {EconomicInterface} from \"../../../EconomicModule/Common/EconomicCommon\";\r\nimport {autoUnitConvert} from \"../../../../Utils/NumberUtils\";\r\nimport {handleError} from \"../../../CoreModule/Managers/AlertManager\";\r\nimport {DateUtils} from \"../../../../Utils/DateUtils\";\r\nimport {economicMgr} from \"../../../EconomicModule/Manager/EconomicManager\";\r\nimport Animation = cc.Animation;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n// @ccclass\r\n// export default class JobDisplay extends ItemDisplay<Job> {\r\n//\r\n// \t@property(Label)\r\n// \tprofitLabel: Label = null;\r\n// \t@property(Label)\r\n// \tprofitLabel2: Label = null;\r\n// \t@property(Label)\r\n// \tupgradeLabel: Label = null;\r\n// \t@property(Label)\r\n// \tupgradeTips: Label = null;\r\n// \t@property(Label)\r\n// \ttitleLabel: Label = null;\r\n// \t@property(Label)\r\n// \ttimerLabel: Label = null;\r\n// \t@property(Label)\r\n// \tlevelLabel: Label = null;\r\n// \t@property(Label)\r\n// \tnumberLabel: Label = null;\r\n//\r\n// \t@property(Node)\r\n// \tinfoNode: Node = null;\r\n// \t@property(Node)\r\n// \tprofitNode: Node = null;\r\n// \t@property(Node)\r\n// \ticonNode: Node = null;\r\n// \t@property(Node)\r\n// \tautoIconNode: Node = null;\r\n//\r\n// \t@property(Node)\r\n// \tupgradeNode: Node = null;\r\n// \tprivate upgradePicture: Sprite = null;\r\n// \tprivate upgradeButton: Button = null;\r\n//\r\n// \t@property(ProgressBar)\r\n// \tprogressBar: ProgressBar = null;\r\n// \t@property(SpriteFrame)\r\n// \tcanUpgrade: SpriteFrame = null;\r\n// \t@property(SpriteFrame)\r\n// \tcannotUpgrade: SpriteFrame = null;\r\n// \t@property(ProgressBar)\r\n// \tlevelProgress: ProgressBar = null;\r\n//\r\n// \ttimer: number = 0;\r\n//\r\n// \t// onLoad () {}\r\n//\r\n// \tstart () {\r\n// \t\tthis.setup();\r\n// \t}\r\n//\r\n// \tprotected onItemChanged() {\r\n// \t\tsuper.onItemChanged();\r\n// \t\tthis.titleLabel.string = \"\" + this.item.id;\r\n// \t\tthis.numberLabel.string = \"\" + this.item.id;\r\n// \t\tif (this.getPlayerJobItem().curLevel == 0)\r\n// \t\t\tthis.timer = 0;\r\n// \t\telse\r\n// \t\t\tthis.timer = (Date.now() - this.getPlayerJobItem().lastProfitTime) / 1000;\r\n// \t}\r\n//\r\n// \tprivate isLoad: boolean = false;\r\n// \tprivate setup() {\r\n// \t\tthis.upgradePicture = this.upgradeNode.getComponent(Sprite);\r\n// \t\tthis.upgradeButton = this.upgradeNode.getComponent(Button);\r\n// \t\tthis.isLoad = true;\r\n// \t}\r\n//\r\n// \t// region 更新控制\r\n//\r\n// \tupdate (dt) {\r\n// \t\tif (!this.isLoad) {\r\n// \t\t\tthis.setup();\r\n// \t\t\tif (!this.isLoad) return;\r\n// \t\t}\r\n// \t\tif (!this.item) return;\r\n// \t\tif(this.getPlayerJobItem().curLevel != 0) this.timer += dt;\r\n// \t\tthis.updateNodes();\r\n// \t\tthis.updateLabels();\r\n// \t\tthis.updatePictures();\r\n// \t}\r\n//\r\n// \tprivate updateNodes() {\r\n// \t\tif (this.getPlayerJobItem().curLevel > 0 && Date.now() <= playerMgr().getPlayerData(PlayerJob).autoProfitTime) {\r\n// \t\t\tthis.autoIconNode.active = true;\r\n// \t\t\tthis.iconNode.active = false;\r\n// \t\t}\r\n// \t\telse {\r\n// \t\t\tthis.autoIconNode.active = false;\r\n// \t\t\tthis.iconNode.active = true;\r\n// \t\t}\r\n// \t\tif (this.timer >= this.item.time) {\r\n// \t\t\tif (Date.now() <= playerMgr().getPlayerData(PlayerJob).autoProfitTime) {\r\n// \t\t\t\tplayerMgr().getPlayerData(PlayerMoney).gold += this.item.getRealProfit(this.getPlayerJobItem().curLevel);\r\n// \t\t\t\tthis.timer = 0;\r\n// \t\t\t\treturn;\r\n// \t\t\t}\r\n// \t\t\tthis.profitNode.active = true;\r\n// \t\t\tthis.infoNode.active = false;\r\n// \t\t}\r\n// \t\telse {\r\n// \t\t\tthis.profitNode.active = false;\r\n// \t\t\tthis.infoNode.active = true;\r\n// \t\t}\r\n// \t}\r\n//\r\n// \tprivate updateLabels() {\r\n// \t\tthis.profitLabel.string = NumberUtils.toString(this.item.getRealProfit(Math.max(1, this.getPlayerJobItem().curLevel)));\r\n// \t\tthis.profitLabel2.string = this.profitLabel.string;\r\n// \t\tthis.upgradeLabel.string = this.getPlayerJobItem().curLevel == this.item.maxLevel ? \"0\" : NumberUtils.toString(this.item.getRealUpgrade(this.getPlayerJobItem().curLevel));\r\n// \t\tthis.timerLabel.string = this.getTime(this.item.time - Math.floor(this.timer));\r\n// \t\tthis.upgradeTips.string = this.getPlayerJobItem().curLevel == 0 ? \"\\\\L[SJob7]\" : (this.getPlayerJobItem().curLevel == this.item.maxLevel ? \"\\\\L[SJob10]\" : \"\\\\L[SJob3]\");\r\n// \t\tthis.levelLabel.string = \"Lv.\" + this.getPlayerJobItem().curLevel;\r\n// \t}\r\n//\r\n// \tprivate updatePictures() {\r\n// \t\tif (this.item.getRealUpgrade(this.getPlayerJobItem().curLevel) <= playerMgr().getPlayerData(PlayerMoney).gold\r\n// \t\t\t&& this.getPlayerJobItem().curLevel < this.item.maxLevel) {\r\n// \t\t\tthis.upgradePicture.spriteFrame = this.canUpgrade;\r\n// \t\t\tthis.upgradeButton.interactable = true;\r\n// \t\t}\r\n// \t\telse {\r\n// \t\t\tthis.upgradePicture.spriteFrame = this.cannotUpgrade;\r\n// \t\t\tthis.upgradeButton.interactable = false;\r\n// \t\t}\r\n// \t\tthis.progressBar.progress = 1 - Math.min(0.98, this.timer / this.item.time);\r\n// \t\tthis.levelProgress.progress = this.getPlayerJobItem().curLevel / this.item.maxLevel;\r\n// \t}\r\n//\r\n// \t// endregion\r\n//\r\n// \t// region 按钮点击事件\r\n//\r\n// \tprofitBtn() {\r\n// \t\tlet id = this.item.id;\r\n// \t\tEconomicInterface.ProfitJob({id}).then(res => {\r\n// \t\t\tplayerMgr().getPlayerData(PlayerMoney).gold += this.item.getRealProfit(this.getPlayerJobItem().curLevel);\r\n// \t\t\tthis.timer = 0;\r\n// \t\t}, rej => {\r\n// \t\t\tconsole.log(rej);\r\n// \t\t});\r\n// \t}\r\n//\r\n// \tupgradeBtn() {\r\n// \t\tif (this.getPlayerJobItem().curLevel == 0) {\r\n// \t\t\tthis.unlock();\r\n// \t\t\treturn;\r\n// \t\t}\r\n// \t\tlet id = this.item.id;\r\n// \t\tEconomicInterface.UpgradeJob({id}).then(res => {\r\n// \t\t\tplayerMgr().getPlayerData(PlayerMoney).gold -= this.item.getRealUpgrade(this.getPlayerJobItem().curLevel);\r\n// \t\t\tthis.getPlayerJobItem().curLevel++;\r\n// \t\t}, rej => {\r\n// \t\t\tconsole.log(rej);\r\n// \t\t});\r\n// \t}\r\n//\r\n// \tprivate unlock() {\r\n// \t\tlet id = this.item.id;\r\n// \t\tEconomicInterface.UnlockJob({id}).then(res => {\r\n// \t\t\tplayerMgr().getPlayerData(PlayerMoney).gold -= this.item.getRealUpgrade(this.getPlayerJobItem().curLevel);\r\n// \t\t\tthis.getPlayerJobItem().curLevel++;\r\n// \t\t}, rej => {\r\n// \t\t\tconsole.log(rej);\r\n// \t\t});\r\n// \t}\r\n//\r\n// \t// endregion\r\n//\r\n// \t// region 数据获取\r\n//\r\n// \tprivate getPlayerJobItem(): PlayerJobItem {\r\n// \t\treturn playerMgr().getPlayerData(PlayerJob).jobs.find(j => j.jobId == this.item.id);\r\n// \t}\r\n//\r\n// \tprivate getTime(val: number): string {\r\n// \t\tif (val < 60) return \"\" + val;\r\n// \t\treturn Math.floor(val / 60) + ((val % 60) < 10 ? \":0\" : \":\") + val % 60;\r\n// \t}\r\n//\r\n// }\r\n\r\n@ccclass\r\nexport default class JobDisplay extends ItemDisplay<PlayerJobItem> {\r\n\r\n\t@property(Label)\r\n\tprofitLabel: Label = null;\r\n\t@property(Label)\r\n\tprofitLabel2: Label = null;\r\n\t@property(Label)\r\n\tupgradeLabel: Label = null;\r\n\t@property(Label)\r\n\tupgradeTips: Label = null;\r\n\t@property(Label)\r\n\ttitleLabel: Label = null;\r\n\t@property(Label)\r\n\ttimerLabel: Label = null;\r\n\t@property(Label)\r\n\tlevelLabel: Label = null;\r\n\t@property(Label)\r\n\tnumberLabel: Label = null;\r\n\r\n\t@property(Node)\r\n\tinfoNode: Node = null;\r\n\t@property(Node)\r\n\tprofitNode: Node = null;\r\n\t@property(Node)\r\n\ticonNode: Node = null;\r\n\t@property(Node)\r\n\tautoIconNode: Node = null;\r\n\t@property(Node)\r\n\ticonFrameNode: Node = null;\r\n\r\n\t@property(Node)\r\n\tupgradeNode: Node = null;\r\n\tprivate upgradeButton: Button = null;\r\n\r\n\t@property(ProgressBar)\r\n\tprogressBar: ProgressBar = null;\r\n\t@property(ProgressBar)\r\n\tlevelProgress: ProgressBar = null;\r\n\r\n\t@property(Animation)\r\n\tlevelUpAnimation: Animation = null;\r\n\t@property(Sprite)\r\n\ticonSprite: Sprite = null;\r\n\r\n\t// onLoad () {}\r\n\r\n\tstart () {\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t// private isLoad: boolean = false;\r\n\tprivate setup() {\r\n\t\tthis.upgradeButton = this.upgradeNode.getComponent(Button);\r\n\t\t// this.isLoad = true;\r\n\t}\r\n\r\n\t// region 界面绘制\r\n\r\n\tprivate get restSecond() {\r\n\t\tconst sec = this.item.curLevel == 0 ? 0 : Math.floor((Date.now() - this.item.lastProfitTime) / 1000);\r\n\t\treturn this.item.job.time - sec;\r\n\t}\r\n\r\n\tprivate get restSecondRate() {\r\n\t\tconst sec = this.item.curLevel == 0 ? 0 : (Date.now() - this.item.lastProfitTime) / 1000;\r\n\t\treturn 1 - Math.min(0.98, sec / this.item.job.time);\r\n\t}\r\n\r\n\tpublic refresh() {\r\n\t\tsuper.refresh();\r\n\r\n\t\tthis.drawTitle();\r\n\t\tthis.drawNodes();\r\n\t\tthis.drawLabels();\r\n\t\tthis.drawPictures();\r\n\t\tthis.drawIcon();\r\n\t}\r\n\r\n\tprivate drawTitle() {\r\n\t\tthis.titleLabel.string = this.item.job.getDisplayName();\r\n\t\tthis.numberLabel.string = this.item.jobId.toString();\r\n\t}\r\n\r\n\tprivate drawNodes() {\r\n\t\tconst auto = this.item.isAutoProfit;\r\n\t\tconst enable = this.item.profitConditions().judge();\r\n\r\n\t\tthis.autoIconNode.active = auto && this.item.curLevel > 0;\r\n\t\tthis.profitNode.active = !auto && enable;\r\n\t\tthis.infoNode.active = !enable;\r\n\t\tthis.iconNode.active = !auto || this.item.curLevel <= 0;\r\n\t\tthis.iconFrameNode.active = this.iconNode.active;\r\n\t}\r\n\r\n\t@autoUnitConvert\r\n\tprivate drawLabels() {\r\n\t\tconst costs = this.item.upgradeCosts();\r\n\t\tconst rewards = this.item.profitRewards();\r\n\r\n\t\tconst isLocked = this.item.curLevel == 0;\r\n\t\tconst isMax = this.item.curLevel >= this.item.job.maxLevel;\r\n\r\n\t\tthis.levelLabel.string = \"Lv.\" + this.item.curLevel;\r\n\t\tthis.profitLabel.string = this.profitLabel2.string = rewards.gold.value.toString();\r\n\t\tthis.upgradeLabel.string = (isMax ? 0 : costs.gold.value).toString();\r\n\t\t// TODO: [多语言系统]\r\n\t\tthis.upgradeTips.string = isLocked ? \"\\\\L[SJob7]\" : (isMax ? \"\\\\L[SJob10]\" : \"\\\\L[SJob3]\");\r\n\t\tthis.timerLabel.string = DateUtils.sec2Str(this.restSecond);\r\n\t}\r\n\r\n\tprivate drawPictures() {\r\n\t\tconst enable = this.item.curLevel <= 0 ?\r\n\t\t\tthis.item.unlockConditions().judge() : this.item.upgradeConditions().judge();\r\n\t\tif (this.upgradeButton)\r\n\t\t\tthis.upgradeButton.interactable = enable;\r\n\r\n\t\tthis.progressBar.progress = this.restSecondRate;\r\n\t\tthis.levelProgress.progress = this.item.curLevel / this.item.job.maxLevel;\r\n\t}\r\n\r\n\tprivate drawIcon() {\r\n\t\tthis.item.icon().then(res => this.iconSprite.spriteFrame = res);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 操作控制\r\n\r\n\tpublic profitBtn() {\r\n\t\teconomicMgr().profit(this.item.jobId).then();\r\n\t}\r\n\r\n\tpublic upgradeBtn() {\r\n\t\teconomicMgr().upgrade(this.item.jobId).then(() => this.levelUpAnimation.play());\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 更新控制\r\n\r\n\tupdate(dt) {\r\n\t\tif (!this.item) return;\r\n\r\n\t\tthis.updateDraw();\r\n\t}\r\n\r\n\tprivate updateDraw() {\r\n\t\tthis.drawNodes();\r\n\t\tthis.drawLabels();\r\n\t\tthis.drawPictures();\r\n\t}\r\n\r\n\t// endregion\r\n\r\n}\r\n","import {BaseData, field, GameData} from \"../../CoreModule/Data/BaseData\";\r\nimport {BaseRepository, getRepository, repository} from \"../../CoreModule/Data/BaseRepository\";\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\nimport {data, StaticData} from \"../../CoreModule/Data/StaticData\";\r\n\r\n@data(\"Job\")\r\nexport class Job extends StaticData {\r\n\r\n\t@field(Number)\r\n\tpublic time: number = -1; // 打工时间\r\n\t@field(Number)\r\n\tpublic maxLevel: number = 100; // 最大等级\r\n\t@field([Number])\r\n\tpublic unlockParams: number[] = []; // 解锁需求参数\r\n\t@field([Number])\r\n\tpublic profitParams: number[] = []; // 收益参数\r\n\t@field([Number])\r\n\tpublic upgradeParams: number[] = []; // 升级消耗参数\r\n\r\n\t/**\r\n\t * 解锁金币需求\r\n\t */\r\n\tpublic get unlockGold() { return this.unlockParams[1]; }\r\n\r\n\t/**\r\n\t * 回城次数需求\r\n\t */\r\n\tpublic get unlockReturnTime() { return this.unlockParams[0] || 0; }\r\n\r\n\t/**\r\n\t * 获取实际收益\r\n\t */\r\n\tpublic profit(level: number): number {\r\n\t\t// TODO: 完善收益算法\r\n\t\treturn this.profitParams[0] + this.profitParams[1] * level;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取实际升级金币需求\r\n\t */\r\n\tpublic upgradeGold(level: number): number {\r\n\t\t// TODO: 完善升级花费算法\r\n\t\treturn this.upgradeParams[0] + this.upgradeParams[1] * level;\r\n\t}\r\n\r\n}\r\n\r\nexport function jobRepo() {\r\n\treturn getRepository(JobRepo);\r\n}\r\n\r\n@repository\r\nexport class JobRepo extends BaseRepository<Job> {\r\n\r\n\tget clazz(): Constructor<Job> { return Job; }\r\n\r\n}\r\n","import ccclass = cc._decorator.ccclass;\r\nimport Button = cc.Button;\r\nimport property = cc._decorator.property;\r\nimport {getLanguage, i18nMgr, Languages} from \"../Managers/I18nManager\";\r\nimport Toggle = cc.Toggle;\r\nimport Node = cc.Node;\r\nimport ToggleGroup = cc.ToggleGroup;\r\nimport {gameMgr} from \"../Managers/GameManager\";\r\nimport Label = cc.Label;\r\n\r\n\r\n@ccclass\r\nexport default class LanguageSwitch extends cc.Component {\r\n\r\n    @property(Node)\r\n    langSwitchWindow: Node;\r\n\r\n    @property([Toggle])\r\n    toggles: Toggle[] = [];// 约定第i个Toggle对应Languages的第i个语言\r\n\r\n    @property(Label)\r\n    languageLabel: Label;// 显示当前语言的label\r\n\r\n    protected onEnable() {\r\n        let langIdx = getLanguage(i18nMgr().getCurrentLanguage());\r\n        this.toggles[langIdx].check();\r\n        this.onClick(this.toggles[langIdx]);\r\n    }\r\n\r\n    /**\r\n     * Toggle按钮回调，\r\n     * @param e 发生回调的Toggle\r\n     */\r\n    public onClick(e: Toggle) {\r\n        if (!e.isChecked) return; // 因为被取消选择的toggle也会回调这个函数，要过滤掉\r\n        let idx=this.toggles.indexOf(e);\r\n        i18nMgr().setLanguage(Languages[idx]);\r\n        this.languageLabel.string = e.getComponentInChildren(Label).string;\r\n    }\r\n\r\n    public setWindowVisible(e: any, visible: string) {\r\n        console.log(visible)\r\n        this.langSwitchWindow.active = visible == 'true';\r\n    }\r\n}","import {BaseManager, getManager, manager} from \"./BaseManager\";\r\n\r\nimport director = cc.director;\r\n\r\nexport type LoadingOptions = {\r\n\tenable?: boolean,\r\n\tcode?: number,\r\n\ttitle?: string,\r\n\tdetail?: string,\r\n\tmaxValue?: number,\r\n\tshowImmediately?: boolean\r\n}\r\n\r\nexport class GameLoading implements LoadingOptions {\r\n\r\n\tpublic code: number;\r\n\tpublic title: string\r\n\tpublic detail: string\r\n\tpublic maxValue: number\r\n\tpublic showImmediately: boolean\r\n\r\n\tconstructor(code: number, title?: string,\r\n\t\t\t\t\t\t\tdetail?: string, maxValue: number = 1,\r\n\t\t\t\t\t\t\tshowImmediately: boolean = false) {\r\n\t\tthis.code = code;\r\n\t\tthis.title = title;\r\n\t\tthis.detail = detail;\r\n\t\tthis.maxValue = maxValue;\r\n\t\tthis.showImmediately = showImmediately;\r\n\t}\r\n}\r\n\r\nexport function showLoading(settingOrObj?: LoadingParam | object,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdetailOrKey?: string, desc?: any): any {\r\n\r\n\t// 不能加默认值，默认值在startLoading内加\r\n\t// let setting: LoadingSetting; // = CoreLoading.Default();\r\n\tconst hasSetting = !detailOrKey && !desc;\r\n\r\n\tconst process = (obj, key, desc) => {\r\n\t\tconst oriFunc = desc.value;\r\n\r\n\t\tdesc.value = async function(...p) {\r\n\t\t\tconst setting = hasSetting ?\r\n\t\t\t\t(typeof settingOrObj == 'function' ?\r\n\t\t\t\t\tsettingOrObj(detailOrKey) : settingOrObj) :\r\n\t\t\t\tundefined;\r\n\r\n\t\t\tconst info = loadingMgr().startLoading(setting);\r\n\t\t\treturn await oriFunc.apply(this, p)\r\n\t\t\t\t.finally(() => info?.finish());\r\n\t\t}\r\n\t}\r\n\r\n\tif (hasSetting) return process;\r\n\r\n\tprocess(settingOrObj, detailOrKey, desc);\r\n}\r\n\r\nexport function blockLoading(obj, key, desc) {\r\n\tconst oriFunc = desc.value;\r\n\tconst mgr = loadingMgr();\r\n\r\n\tdesc.value = async function(...p) {\r\n\t\t// return PromiseUtils.funcWrapper(\r\n\t\t// \toriFunc.bind(this, p),\r\n\t\t// \t() => mgr.isBlocked = true,\r\n\t\t// \t() => mgr.isBlocked = false);\r\n\t\tmgr.isBlocked++;\r\n\t\ttry {\r\n\t\t\treturn await oriFunc.apply(this, p);\r\n\t\t} finally {\r\n\t\t\tmgr.isBlocked--;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function loadingMgr(): LoadingManager {\r\n\treturn getManager(LoadingManager);\r\n}\r\n\r\nexport function peekLoadingInfo() {\r\n\treturn loadingMgr().peekLatestLoadingInfo();\r\n}\r\n\r\nexport type LoadingParam = LoadingOptions |\r\n\t((...any) => LoadingOptions);\r\n\r\n@manager\r\nclass LoadingManager extends BaseManager {\r\n\r\n\tprivate loadingInfo: LoadingInfo[] = [];\r\n\r\n\tpublic isBlocked: number = 0;\r\n\r\n\t/**\r\n\t * @param setting Loading配置\r\n\t * @return LoadingProgressSetter 可以在里面动态修改加载进度\r\n\t */\r\n\tpublic startLoading(setting?: LoadingParam): LoadingProgressSetter {\r\n\t\tsetting ||= CoreLoading.Default;\r\n\r\n\t\tif (typeof setting == 'function') setting = setting();\r\n\r\n\t\tif (this.isBlocked || setting?.enable === false) return null;\r\n\r\n\t\tlet title = setting.title, detail = setting.detail;\r\n\r\n\t\tif (setting.code) { // 带有code属性\r\n\t\t\tconst key = \"LOAD\" + setting.code;\r\n\t\t\tconst exist = !!i18nMgr().getKey(key);\r\n\r\n\t\t\t// Title约定：默认使用翻译的文本，无翻译文本才用setting的title字段\r\n\t\t\ttitle = exist ? `\\\\L[${key}]` : title;\r\n\r\n\t\t\t// Detail约定：优先使用setting的detail，再看是否有翻译文本，如果没有就用空值\r\n\t\t\tif (!detail) { // 如果setting没有detail\r\n\t\t\t\tconst dKey = key + \"_DETAIL\";\r\n\t\t\t\tconst dExist = !!i18nMgr().getKey(dKey);\r\n\r\n\t\t\t\tdetail = dExist ? `\\\\L[${dKey}]` : \"\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.pushLoadingInfo(title, detail,\r\n\t\t\tsetting.maxValue, setting.showImmediately);\r\n\t}\r\n\r\n\tprivate pushLoadingInfo(title, detail, maxValue, showImmediately) {\r\n\t\tlet res = new LoadingInfo(title, detail,\r\n\t\t\tmaxValue, showImmediately);\r\n\t\tthis.loadingInfo.push(res);\r\n\t\treturn res;\r\n\t}\r\n\r\n\tpublic peekLatestLoadingInfo(): LoadingInfo {\r\n\t\treturn this.loadingInfo[this.loadingInfo.length - 1];\r\n\t}\r\n\r\n\tpublic popLatestLoadingInfo():void {\r\n\t\tthis.loadingInfo.pop();\r\n\t}\r\n\r\n}\r\n\r\ninterface LoadingProgressSetter {\r\n\t/**\r\n\t * 更新当前进度和最大值\r\n\t * @param currentValue 当前进度\r\n\t * @param maxValue 进度最大值，如果不传参数或传undefined则表示不更新最大值\r\n\t */\r\n\tupdateProgress(currentValue: number, maxValue: number): void;\r\n\r\n\t/**\r\n\t * 更新当前进度\r\n\t * @param currentValue\r\n\t */\r\n\tupdateProgress(currentValue: number): void;\r\n\r\n\t/**\r\n\t * 更新进度条上方的文字\r\n\t * @param text 新的文字\r\n\t */\r\n\tupdateLoadingText(text: string): void;\r\n\r\n\t/**\r\n\t * 更新二级字幕\r\n\t * @param text 新的文字\r\n\t */\r\n\tupdateReminder(text: string): void;\r\n\r\n\t/**\r\n\t * 设置为完成\r\n\t */\r\n\tfinish(): void;\r\n}\r\n\r\nenum LoadingState {\r\n\tNOT_STARTED,\r\n\tLOADING,\r\n\tFINISHED\r\n}\r\n\r\nclass LoadingInfo implements LoadingProgressSetter, LoadingOptions {\r\n\r\n\tpublic title: string;\r\n\tpublic detail: string;\r\n\tpublic currentValue: number;\r\n\tpublic maxValue: number;\r\n\r\n\tpublic startTime: number;\r\n\r\n\tprivate state: LoadingState;\r\n\r\n\tconstructor(title: string, detail: string, maxValue: number, showImmediately: boolean) {\r\n\t\tthis.title = title;\r\n\t\tthis.detail = detail;\r\n\t\tthis.currentValue = 0;\r\n\t\tthis.maxValue = maxValue;\r\n\t\tthis.startTime = director.getTotalTime() - (showImmediately ? 1e9 : 0);\r\n\t\tthis.state = LoadingState.NOT_STARTED;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置当前进度，如果需要，还可以更新最大值\r\n\t * @param currentValue 当前进度\r\n\t * @param maxValue 进度最大值\r\n\t */\r\n\tpublic updateProgress(currentValue: number, maxValue: number = undefined): void {\r\n\t\tthis.currentValue = currentValue;\r\n\t\tif (maxValue != undefined) this.maxValue = maxValue;\r\n\t\tif (this.currentValue >= this.maxValue) {\r\n\t\t\tthis.markFinished();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 更新进度条上方的文字\r\n\t * @param text 新的文字\r\n\t */\r\n\tpublic updateLoadingText(text: string) {\r\n\t\tthis.title = text;\r\n\t}\r\n\r\n\tpublic updateReminder(text: string): void {\r\n\t\tthis.detail = text;\r\n\t}\r\n\r\n\tget isNotStarted() {\r\n\t\treturn this.state == LoadingState.NOT_STARTED;\r\n\t}\r\n\r\n\tget isLoading() {\r\n\t\treturn this.state == LoadingState.LOADING;\r\n\t}\r\n\r\n\tget isFinished() {\r\n\t\treturn this.state == LoadingState.FINISHED;\r\n\t}\r\n\r\n\tpublic markStarted() {\r\n\t\tthis.state = LoadingState.LOADING;\r\n\t}\r\n\r\n\tpublic markFinished() {\r\n\t\tthis.state = LoadingState.FINISHED;\r\n\t}\r\n\r\n\tpublic finish(): void {\r\n\t\tthis.updateProgress(this.maxValue);\r\n\t}\r\n\r\n}\r\n\r\nimport {CoreLoading} from \"../Common/CoreCommon\";\r\nimport {i18nMgr} from \"./I18nManager\";\r\nimport {InterfaceOptions} from \"./NetworkManager\";\r\nimport {PromiseUtils} from \"../../../Utils/PromiseUtils\";\r\n","import ProgressBar = cc.ProgressBar;\r\nimport Label = cc.Label;\r\nimport {loadingMgr, peekLoadingInfo} from \"../Managers/LoadingManager\";\r\nimport BlockInputEvents = cc.BlockInputEvents;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n/**\r\n * 加载开始后多久才真正显示遮罩\r\n */\r\nconst WaitDuration: number = 100;\r\nconst MaskOpacity = 255;\r\n\r\n@ccclass\r\nexport default class LoadingMask extends cc.Component {\r\n\r\n\t@property(ProgressBar)\r\n\tprogressBar: ProgressBar = null;\r\n\r\n\t@property(Label)\r\n\tloadingLabel: Label;\r\n\t@property(Label)\r\n\tdetailLabel: Label;\r\n\r\n\t@property(BlockInputEvents)\r\n\tinputBlocker: BlockInputEvents;\r\n\r\n\tstart() {\r\n\t\tthis.node.opacity = 0;\r\n\t}\r\n\r\n\tupdate(dt) {\r\n\t\tlet info = peekLoadingInfo();\r\n\t\tif (!info) return;\r\n\r\n\t\tif (info.isNotStarted) {\r\n\t\t\tinfo.markStarted();\r\n\t\t\tthis.loadingLabel.string = info.title;\r\n\t\t\tthis.node.opacity = 0;\r\n\t\t\tthis.blockInput();\r\n\t\t}\r\n\r\n\t\tif (info.isFinished) {\r\n\t\t\tloadingMgr().popLatestLoadingInfo();\r\n\t\t\tthis.node.opacity = 0;\r\n\t\t\tthis.unblockInput();\r\n\t\t\t// 还有正在进行的任务就直接显示\r\n\t\t\tlet tmp = peekLoadingInfo();\r\n\t\t\tif (tmp != null) tmp.startTime -= 1e9;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst now = cc.director.getTotalTime();\r\n\t\tif (now - info.startTime > WaitDuration && !info.isFinished)\r\n\t\t\tthis.node.opacity = MaskOpacity;\r\n\t\tif (this.progressBar) this.progressBar.progress = info.currentValue / info.maxValue;\r\n\t\tif (this.loadingLabel) this.loadingLabel.string = info.title;\r\n\t\tif (this.detailLabel) this.detailLabel.string = info.detail;\r\n\t}\r\n\r\n\tprivate blockInput() {\r\n\t\tthis.inputBlocker.enabled = true;\r\n\t}\r\n\r\n\tprivate unblockInput() {\r\n\t\tthis.inputBlocker.enabled = false;\r\n\t}\r\n}\r\n","import Label = cc.Label;\r\nimport {i18nMgr} from \"../Managers/I18nManager\";\r\nimport menu = cc._decorator.menu;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n/**\r\n * 用法：在结点上添加cc.Label后，再添加cc.LocalizedLabel\r\n */\r\n@ccclass\r\n@menu(\"其他组件/多语言\")\r\nexport class LocalizedLabel extends cc.Component {\r\n    /**\r\n     * 绑定的Label\r\n     */\r\n    public label: Label;\r\n\r\n    /**\r\n     * 当前显示的文字的未翻译版本\r\n     */\r\n    public prevRawText: string;\r\n\r\n    /**\r\n     * 当前显示的文字的翻译版本\r\n     */\r\n    public prevLocalizedText: string;\r\n\r\n    /**\r\n     * 未翻译的字符串\r\n     */\r\n    get string() {\r\n        return this.prevRawText;\r\n    }\r\n\r\n    /**\r\n     * 设置翻译前的字符串\r\n     * @param value\r\n     */\r\n    set string(value: string) {\r\n        this.prevRawText = value;\r\n        this.prevLocalizedText = this.label.string = i18nMgr().t(value);\r\n    }\r\n\r\n    protected start() {\r\n        i18nMgr().registerLabel(this);\r\n    }\r\n\r\n    protected onEnable() {\r\n        this.label = this.getComponent(Label);\r\n        if (!this.label) {\r\n            console.log(\"i18nLabel没有对应的Label\");\r\n            return;\r\n        }\r\n        this.string = this.label.string;\r\n    }\r\n\r\n    protected onDisable() {\r\n        //i18nMgr().unregisterLabel(this);\r\n    }\r\n\r\n    /**\r\n     * 根据最新的语言设置刷新一次当前的文字\r\n     */\r\n    public updateText() {\r\n        this.string = this.prevRawText;\r\n    }\r\n\r\n    protected update(dt: number) {\r\n        if (this.label.string != this.prevLocalizedText) {\r\n            this.string = this.label.string;\r\n        }\r\n    }\r\n\r\n    protected lateUpdate(dt: number) {\r\n        this.update(dt);\r\n    }\r\n}\r\n","import Sprite = cc.Sprite;\r\nimport {i18nMgr} from \"../Managers/I18nManager\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n/**\r\n * 用法：在结点上添加cc.Sprite后，再添加cc.i18nSprite\r\n */\r\n@ccclass\r\nexport class LocalizedSprite extends cc.Component {\r\n    /**\r\n     * 绑定的Sprite\r\n     */\r\n    public sprite: Sprite;\r\n\r\n    /**\r\n     * 图片名称，仅用于初始化，动态改变请用小写开头的spriteName\r\n     */\r\n    @property\r\n    private SpriteName: string = \"\";\r\n\r\n    /**\r\n     * 未翻译的字符串\r\n     */\r\n    get spriteName() {\r\n        return this.SpriteName;\r\n    }\r\n\r\n    /**\r\n     * 设置翻译前的字符串\r\n     * @param value\r\n     */\r\n    set spriteName(value: string) {\r\n        this.SpriteName = value;\r\n        i18nMgr().ts(value).then((val) => {\r\n            this.sprite.spriteFrame = val;\r\n        });\r\n    }\r\n\r\n    protected onEnable() {\r\n        this.sprite = this.getComponent(Sprite);\r\n        if (this.sprite == null) {\r\n            console.log(\"i18nSprite没有对应的Sprite\");\r\n            return;\r\n        }\r\n        i18nMgr().registerSprite(this);\r\n        this.spriteName = this.SpriteName;\r\n    }\r\n\r\n    protected onDisable() {\r\n        super.onDisable();\r\n        i18nMgr().unregisterSprite(this);\r\n    }\r\n\r\n    /**\r\n     * 根据最新的语言设置刷新一次当前的文字\r\n     */\r\n    public updateSprite() {\r\n        this.spriteName = this.spriteName;\r\n    }\r\n\r\n    public test33() {\r\n        this.spriteName = this.spriteName == \"loc/test\" ? \"loc/tt\" : \"loc/test\";\r\n    }\r\n}\r\n","import BattleDisplay from \"../BattleDisplay\";\r\nimport StageProgressController from \"../StageProgressController\";\r\nimport {waitForLogin} from \"../../../PlayerModule/Managers/PlayerManager\";\r\nimport {waitForDataLoad} from \"../../../CoreModule/Managers/DataManager\";\r\nimport {copyMgr} from \"../../../CopyModule/Managers/CopyManager\";\r\nimport {copyRepo} from \"../../../CopyModule/Data/Copy\";\r\nimport Label = cc.Label;\r\nimport Prefab = cc.Prefab;\r\nimport Sprite = cc.Sprite;\r\nimport Node = cc.Node;\r\nimport instantiate = cc.instantiate;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class MainBattleDisplay extends BattleDisplay {\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n        super.start();\r\n        this.initProgress();\r\n    }\r\n\r\n    // region 界面绘制\r\n\r\n    refresh() {\r\n        super.refresh();\r\n        let index = (this.item.level - 1) % 15 + 1;\r\n        const level = copyRepo().main().level(this.item.level - 1);\r\n        this.mapName.string = level.displayName + (index < 10 ? \"0\" : \"\") + index;\r\n        this.setMap();\r\n    }\r\n\r\n    // endregion\r\n\r\n    // region 更新控制\r\n\r\n    protected update(dt: number) {\r\n        if (!this.item) return;\r\n        super.update(dt);\r\n        this.updateStageProgress();\r\n    }\r\n\r\n    updateStageProgress() {\r\n        let level = copyMgr().getMainPlayerCopy().curLevel;\r\n        if (level > this.currentLevel)\r\n            this.nextStage();\r\n        if (level < this.currentLevel)\r\n            this.lastStage();\r\n        this.enemies.forEach(e => e.enemyIndex = e.stageIndex < level ? 5 :\r\n            e.stageIndex > level ? 0 : this.enemyIndex());\r\n    }\r\n\r\n    // endregion\r\n\r\n    // region 关卡进度控制\r\n\r\n    @property(Label)\r\n    mapName: Label = null;\r\n    @property(Node)\r\n    progressContainer: Node = null;\r\n    @property(Prefab)\r\n    progressPrefab: Prefab = null;\r\n    @property(Sprite)\r\n    backgroundSprite: Sprite = null;\r\n\r\n    enemies: StageProgressController[] = [];\r\n    enemyIndex() {\r\n        return this.item && this.item.state < 5 ? 1 + this.item?.battlers\r\n            .filter(b => (b.camp == 1) && b.isDead).length : 0;\r\n    }\r\n    currentLevel: number = 1;\r\n\r\n    @waitForLogin\r\n    @waitForDataLoad\r\n    initProgress() {\r\n        this.currentLevel = Math.max(1, copyMgr().getMainPlayerCopy().curLevel - 1);\r\n        this.enemies = [];\r\n        for (let i = 0; i < 2; i++) {\r\n            let node = instantiate(this.progressPrefab);\r\n            node.parent = this.progressContainer;\r\n            let controller = node.getComponent(StageProgressController);\r\n            controller.init(i + this.currentLevel, i);\r\n            this.enemies.push(controller);\r\n        }\r\n    }\r\n\r\n    nextStage() {\r\n        this.currentLevel++;\r\n        let node = instantiate(this.progressPrefab);\r\n        node.parent = this.progressContainer;\r\n        node.opacity = 0;\r\n        let controller = node.getComponent(StageProgressController);\r\n        controller.init(this.currentLevel + 1, 2);\r\n        this.enemies.push(controller);\r\n        this.enemies.forEach((e, i) => {\r\n            if (e.node) e.nextStage();\r\n            else this.enemies.splice(i, 1);\r\n        });\r\n    }\r\n\r\n    lastStage() {\r\n        if (this.currentLevel == 1) return;\r\n        this.currentLevel--;\r\n        if (this.currentLevel > 1) {\r\n            let node = instantiate(this.progressPrefab);\r\n            node.parent = this.progressContainer;\r\n            node.opacity = 0;\r\n            let controller = node.getComponent(StageProgressController);\r\n            controller.init(this.currentLevel - 1, -2);\r\n            this.enemies.push(controller);\r\n        }\r\n        this.enemies.forEach((e, i) => {\r\n            if (e.node) e.lastStage();\r\n            else this.enemies.splice(i, 1);\r\n        });\r\n    }\r\n\r\n    setMap() {\r\n        this.backgroundSprite.spriteFrame = copyRepo().main().level(this.item.level - 1).mapPicture;\r\n    }\r\n\r\n    // endregion\r\n\r\n}\r\n","import Component = cc.Component;\r\nimport Sprite = cc.Sprite;\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport MainMenuItemSelectionGroup from \"./MainMenuItemSelectionGroup\";\r\nimport MainMenuItemSelection from \"./MainMenuItemSelection\";\r\nimport Node = cc.Node;\r\nimport Color = cc.Color;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class MainMenuController extends Component {\r\n\r\n    @property([Sprite])\r\n    backgroundSprites: Sprite[] = [];\r\n    @property([Sprite])\r\n    iconSprites: Sprite[] = [];\r\n    @property([Node])\r\n    textNodes: Node[] = [];\r\n    @property([Node])\r\n    playerWindows: Node[] = [];\r\n\r\n    @property(SpriteFrame)\r\n    backgroundSelect: SpriteFrame = null;\r\n    @property([SpriteFrame])\r\n    iconSelect: SpriteFrame[] = [];\r\n    @property(SpriteFrame)\r\n    backgroundUnselect: SpriteFrame = null;\r\n    @property([SpriteFrame])\r\n    iconUnselect: SpriteFrame[] = [];\r\n\r\n    @property([Node])\r\n    redPointTips: Node[] = [];\r\n\r\n\r\n    // onLoad () {}\r\n\r\n    isLoad: boolean = false;\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    setup () {\r\n        this.selectionGroup = new MainMenuItemSelectionGroup(false);\r\n        this.selections.forEach(s => {\r\n            this.selectionGroup.addElement(s);\r\n            s.menu = this;\r\n        });\r\n        this.selectionGroup.select(this.selections[1]);\r\n        this.selectionGroup.select(this.selections[0]);\r\n        this.isLoad = true;\r\n    }\r\n\r\n    update (dt) {\r\n        if (!this.isLoad) {\r\n            this.setup();\r\n            if (!this.isLoad) return;\r\n        }\r\n        this.updateTips();\r\n    }\r\n\r\n    updateTips () {\r\n        // 更新红点提示\r\n        this.redPointTips[2].active = Date.now() % 10000 >= 5000;\r\n    }\r\n\r\n    selectionGroup: MainMenuItemSelectionGroup = null;\r\n    @property([MainMenuItemSelection])\r\n    selections: MainMenuItemSelection[] = [];\r\n\r\n    onSelectChanged (index: number) {\r\n        this.backgroundSprites.forEach((bg, i) => {\r\n            bg.spriteFrame = i == index ? this.backgroundSelect : this.backgroundUnselect;\r\n        });\r\n        this.iconSprites.forEach((ic, i) => {\r\n            ic.spriteFrame = i == index ? this.iconSelect[i] : this.iconUnselect[i];\r\n        });\r\n        this.textNodes.forEach((n, i) => {\r\n            n.color = i == index ? new Color(250, 235, 204) : new  Color(68, 58, 46);\r\n        });\r\n        this.playerWindows.forEach((n, i) => {\r\n            n.active = i == index;\r\n        })\r\n    }\r\n\r\n}\r\n","import {SelectableGroup} from \"../../../CoreModule/Components/SelectableGroup\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class MainMenuItemSelectionGroup extends SelectableGroup {\r\n\r\n}\r\n","import {SelectableObject} from \"../../../CoreModule/Components/SelectableObject\";\r\nimport MainMenuController from \"./MainMenuController\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class MainMenuItemSelection extends SelectableObject {\r\n\r\n    menu: MainMenuController = null;\r\n\r\n    //region 回调控制\r\n\r\n    onDeselected (): void {\r\n\r\n    }\r\n\r\n    onSelected (): void {\r\n        this.menu?.onSelectChanged(this.selectableGroup.indexOf(this));\r\n    }\r\n\r\n    //endregion\r\n\r\n}\r\n","\r\nexport class MathUtils {\r\n\r\n\t/**\r\n\t * CLAMP\r\n\t */\r\n\tpublic static clamp(val: number, min: number, max: number) {\r\n\t\treturn Math.max(Math.min(val, max), min);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取随机范围数\r\n\t */\r\n\tpublic static random(min = 0, max = 1) {\r\n\t\treturn Math.random() * (max - min) + min;\r\n\t}\r\n\r\n\t/**\r\n\t * 生成随机字符串\r\n\t * @param len\r\n\t */\r\n\tpublic static randomString(len = 32) {\r\n\t\tconst chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678';    /****默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1****/\r\n\t\tconst maxPos = chars.length;\r\n\r\n\t\tlet res = '';\r\n\t\tfor (let i = 0; i < len; i++)\r\n\t\t \tres += chars.charAt(Math.floor(Math.random() * maxPos));\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 随机选择\r\n\t * @param array\r\n\t */\r\n\tpublic static randomPick(array: any[]) {\r\n\t\treturn array[Math.floor(Math.random() * array.length)];\r\n\t}\r\n\r\n\t/**\r\n\t * 随机选择多个\r\n\t * @param array 选择的数组\r\n\t * @param count 选择个数（传了该参数，返回值将变为数组）\r\n\t * @param repeat 能否重复\r\n\t */\r\n\tpublic static randomPickMany<T>(array: T[], count: number, repeat = false): T[] {\r\n\t\tconst res = [];\r\n\t\tif (repeat) // 如果可以重复\r\n\t\t\tfor (let i = 0; i < count; i++)\r\n\t\t\t\tres.push(this.randomPick(array))\r\n\t\telse {\r\n\t\t\tconst tmp = array.slice(0);\r\n\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\tconst idx = Math.floor(Math.random() * tmp.length);\r\n\t\t\t\tres.push(tmp[idx]); // 如果tmp为空，添加的都是空值\r\n\t\t\t\ttmp.splice(idx, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 根据概率随机抽取\r\n\t */\r\n\tpublic static randomByRate(rate: number): boolean {\r\n\t\treturn Math.random() <= rate;\r\n\t}\r\n}\r\n","export class MessageQueue {\r\n\r\n\tstatic queue = [];\r\n\r\n\tpublic static registerListener() {\r\n\t\tthis.queue = window[\"queue\"] || [];\r\n\t\twindow.addEventListener('message', (e) => {\r\n\t\t\tconsole.log(\"message\", e, e.data);\r\n\t\t\tthis.queue.push(e);\r\n\t\t}, false);\r\n\t}\r\n\r\n\tpublic static message() {\r\n\t\treturn this.queue.shift();\r\n\t}\r\n}\r\n\r\nMessageQueue.registerListener();\r\n","import {conditionProcessor, ConditionProcessor} from \"../../PlayerModule/Utils/ConditionProcessor\";\r\nimport {MoneyType, PlayerMoney} from \"../Data/PlayerMoney\";\r\nimport {EconomicThrow} from \"../Common/EconomicCommon\";\r\nimport {playerMgr} from \"../../PlayerModule/Managers/PlayerManager\";\r\nimport {ConditionType} from \"../../PlayerModule/Data/Condition\";\r\nimport {PlayerJob} from \"../Data/PlayerJob\";\r\n\r\nabstract class MoneyConditionProcessor extends ConditionProcessor {\r\n\r\n\tprotected pMoney: PlayerMoney;\r\n\r\n\tprotected abstract get type(): MoneyType;\r\n\r\n\tprotected get playerValue() { return this.pMoney[this.type] }\r\n\tprotected get throwFunc(): Function { return EconomicThrow.NotEnoughMoney; }\r\n\r\n\tprotected preprocess() {\r\n\t\tsuper.preprocess();\r\n\t\tthis.pMoney = playerMgr().getPlayerData(PlayerMoney);\r\n\t}\r\n\r\n\tprotected async doConsume() {\r\n\t\tthis.pMoney.gain(this.type, -this.value);\r\n\t}\r\n\r\n}\r\n\r\n@conditionProcessor(ConditionType.Gold)\r\nexport class GoldConditionProcessor extends MoneyConditionProcessor {\r\n\r\n\tprotected get type(): MoneyType { return \"gold\"; }\r\n\r\n}\r\n\r\n@conditionProcessor(ConditionType.Diamond)\r\nexport class DiamondConditionProcessor extends MoneyConditionProcessor {\r\n\r\n\tprotected get type(): MoneyType { return \"diamond\"; }\r\n\r\n}\r\n\r\n@conditionProcessor(ConditionType.Medal)\r\nexport class MedalConditionProcessor extends  MoneyConditionProcessor {\r\n\r\n\tprotected get type(): MoneyType { return \"medal\" }\r\n\r\n}\r\n\r\n@conditionProcessor(ConditionType.Fragment)\r\nexport class FragmentConditionProcessor extends MoneyConditionProcessor {\r\n\r\n\tprotected get type(): MoneyType { return \"fragment\"; }\r\n\tprotected get throwFunc(): Function { return EconomicThrow.NotEnoughFragment; }\r\n\r\n}\r\n\r\n@conditionProcessor(ConditionType.ReturnTime)\r\nexport class ReturnTimeConditionProcessor extends ConditionProcessor {\r\n\r\n\tprotected pJob: PlayerJob;\r\n\r\n\tprotected preprocess() {\r\n\t\tsuper.preprocess();\r\n\t\tthis.pJob = playerMgr().getPlayerData(PlayerJob);\r\n\t}\r\n\r\n\tget consumable(): boolean { return false; }\r\n\r\n\tget playerValue() { return this.pJob.returnTimes }\r\n\tget throwFunc(): Function { return EconomicThrow.NotEnoughReturn; }\r\n\r\n}\r\n","import {rewardProcessor, RewardProcessor} from \"../../PlayerModule/Utils/RewardProcessor\";\r\nimport {MoneyType, PlayerMoney} from \"../Data/PlayerMoney\";\r\nimport {RewardType} from \"../../PlayerModule/Data/Reward\";\r\nimport {playerMgr} from \"../../PlayerModule/Managers/PlayerManager\";\r\n\r\nabstract class MoneyRewardProcessor extends RewardProcessor {\r\n\r\n\tprotected abstract get type(): MoneyType;\r\n\r\n\tpublic invoke(rate = 1) {\r\n\t\tconst pMoney = playerMgr().getPlayerData(PlayerMoney);\r\n\t\tpMoney.gain(this.type, this.value * rate);\r\n\t}\r\n\r\n}\r\n\r\n@rewardProcessor(RewardType.Gold)\r\nexport class GoldRewardProcessor extends MoneyRewardProcessor {\r\n\r\n\tprotected get type(): MoneyType { return \"gold\"; }\r\n\r\n}\r\n\r\n@rewardProcessor(RewardType.Diamond)\r\nexport class DiamondRewardProcessor extends MoneyRewardProcessor {\r\n\r\n\tprotected get type(): MoneyType { return \"diamond\"; }\r\n\r\n}\r\n\r\n@rewardProcessor(RewardType.Medal)\r\nexport class MedalRewardProcessor extends MoneyRewardProcessor {\r\n\r\n\tprotected get type(): MoneyType { return \"medal\"; }\r\n\r\n}\r\n\r\n@rewardProcessor(RewardType.Fragment)\r\nexport class FragmentRewardProcessor extends MoneyRewardProcessor {\r\n\r\n\tprotected get type(): MoneyType { return \"fragment\"; }\r\n\r\n}\r\n","import {field} from \"../../CoreModule/Data/BaseData\";\r\nimport {Motion} from \"./Motion\";\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\nimport {BaseRepository, getRepository, repository} from \"../../CoreModule/Data/BaseRepository\";\r\nimport {data, StaticData} from \"../../CoreModule/Data/StaticData\";\r\n\r\nexport const AttackMotionGroupId = 0;\r\nexport const HurtMotionGroupId = 1;\r\nexport const EnterMotionGroupId = 2;\r\nexport const DieMotionGroupId = 3;\r\nexport const BossEnterMotionGroupId = 5;\r\nexport const SkillMotionGroupId = 6;\r\nexport const RecoverMotionGroupId = 7;\r\n\r\n@data(\"MotionGroup\")\r\nexport class MotionGroup extends StaticData {\r\n\r\n\t@field([Motion])\r\n\tpublic motions: Motion[] = []\r\n}\r\n\r\nexport function motionGroupRepo() {\r\n\treturn getRepository(MotionGroupRepo);\r\n}\r\n\r\n@repository\r\nexport class MotionGroupRepo extends BaseRepository<MotionGroup> {\r\n\r\n\tget clazz(): Constructor<MotionGroup> { return MotionGroup; }\r\n\r\n\tpublic attack() {\r\n\t\treturn this.getById(AttackMotionGroupId);\r\n\t}\r\n\tpublic hurt() {\r\n\t\treturn this.getById(HurtMotionGroupId);\r\n\t}\r\n\tpublic enter() {\r\n\t\treturn this.getById(EnterMotionGroupId);\r\n\t}\r\n\tpublic die() {\r\n\t\treturn this.getById(DieMotionGroupId);\r\n\t}\r\n\tpublic skill() {\r\n\t\treturn this.getById(SkillMotionGroupId);\r\n\t}\r\n\tpublic recover() {\r\n\t\treturn this.getById(RecoverMotionGroupId);\r\n\t}\r\n\r\n}\r\n\r\n","import {Motion, MotionType, TargetType, TranslateType} from \"../Data/Motion\";\r\nimport {Vec1} from \"./Vec1\";\r\nimport {Battler} from \"../Data/Battler\";\r\nimport {Action} from \"../Data/Action\";\r\nimport {cache} from \"../../../Utils/DecoratorUtils\";\r\nimport Vec2 = cc.Vec2;\r\nimport v2 = cc.v2;\r\nimport Color = cc.Color;\r\n\r\nexport type MotionState = 'not_started' | 'playing' | 'ended' | 'finished';\r\n\r\nexport function motionProcessor(type: MotionType) {\r\n\treturn (clazz) => {\r\n\t\tMotionProcessor.processorSettings[type] = clazz;\r\n\t}\r\n}\r\n\r\nexport function createProcessor(\r\n\tbattler: Battler, motion: Motion,\r\n\taction?: Action, isResult: boolean = false) {\r\n\tconst clazz = MotionProcessor.processorSettings[motion.type];\r\n\treturn clazz ? new clazz(battler, motion, action, isResult) : null;\r\n}\r\n\r\nexport abstract class MotionProcessor {\r\n\r\n\tpublic static processorSettings = {};\r\n\r\n\tpublic motion: Motion;\r\n\tpublic action: Action;\r\n\tpublic battler: Battler;\r\n\r\n\tpublic isResult: boolean;\r\n\r\n\tpublic startTime: number = -1;\r\n\tpublic elapsedTime: number = -1;\r\n\r\n\tprotected state: MotionState = 'not_started';\r\n\r\n\tprotected constructor(battler: Battler, motion: Motion,\r\n\t\t\t\t\t\t\t\t\t\t\t\taction?: Action, isResult: boolean = false) {\r\n\t\tthis.battler = battler; this.action = action;\r\n\t\tthis.motion = motion; this.isResult = isResult;\r\n\t}\r\n\r\n\t/**\r\n\t * 数据属性定义\r\n\t */\r\n\tpublic get battle() { return this.action.battle; }\r\n\r\n\tpublic get subject() { return this.action.subject; }\r\n\tpublic get subjectBattler() { return this.subject.battler; }\r\n\r\n\tpublic get target() { return this.action.target; }\r\n\tpublic get targetBattler() { return this.target.battler; }\r\n\r\n\tpublic get isSubject() { return this.battler == this.subjectBattler }\r\n\tpublic get isTarget() { return this.battler == this.targetBattler }\r\n\r\n\t/**\r\n\t * 状态属性定义\r\n\t */\r\n\tpublic get isStarted() { return this.state != 'not_started'; }\r\n\t// public get isPlaying() { return this.state == 'playing'; }\r\n\tpublic get isEnded() { return this.state == 'ended' || this.isFinished; }\r\n\tpublic get isFinished() { return this.state == 'finished'; }\r\n\tpublic get isElapsedStarted() { return this.progress > 0; }\r\n\t// public get isElapsedPlaying() { return this.progress > 0 && this.progress < 1; }\r\n\tpublic get isElapsedEnded() { return this.progress >= 1; }\r\n\tpublic get isElapsedFinished() { return this.totalProgress >= 1; }\r\n\r\n\tpublic get duration() { return this.motion.duration; }\r\n\tpublic get endTime() { return this.startTime + this.duration; }\r\n\tpublic get totalEndTime() { return this.endTime + this.motion.wait; }\r\n\tpublic get totalDuration() { return this.totalEndTime - this.startTime; }\r\n\tpublic get progress() { return this.elapsedTime / this.duration; }\r\n\tpublic get totalProgress() { return this.elapsedTime / this.totalDuration; }\r\n\r\n\tpublic motionTarget(tType: TargetType) {\r\n\t\tswitch (tType){\r\n\t\t\tcase TargetType.Self:\r\n\t\t\t\treturn this.battler;\r\n\t\t\tcase TargetType.Subject:\r\n\t\t\t\treturn this.subjectBattler;\r\n\t\t\tcase TargetType.Target:\r\n\t\t\t\treturn this.targetBattler;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 更新\r\n\t */\r\n\tpublic update() {\r\n\t\t// console.log(\"[Motion.Update]\", this.motion.type);\r\n\r\n\t\tthis.elapsedTime = this.battler.elapsedTime - this.startTime;\r\n\r\n\t\tif (!this.isStarted && this.isElapsedStarted) this.start();\r\n\t\tif (!this.isEnded && !this.isFinished &&\r\n\t\t\tthis.isElapsedEnded) this.end();\r\n\t\tif (!this.isFinished && this.isElapsedFinished) this.finish();\r\n\r\n\t\tif (this.isStarted && !this.isEnded)\r\n\t\t\tthis.onProgress(this.progress);\r\n\t}\r\n\r\n\tprotected start() {\r\n\t\tthis.state = 'playing';\r\n\t\tthis.onStart();\r\n\t\tthis.onProgress(0);\r\n\t}\r\n\r\n\tprotected end() {\r\n\t\tthis.state = 'ended';\r\n\t\tthis.onProgress(1);\r\n\t\tthis.onEnd();\r\n\t}\r\n\r\n\tprotected finish() {\r\n\t\tthis.state = 'finished';\r\n\t\t// this.onProgress(1);\r\n\t\tthis.onFinish();\r\n\t}\r\n\r\n\tprotected onProgress(p: number) { }\r\n\r\n\tprotected onStart() {\r\n\t\t// console.log(\"[Motion.OnStart]\", this.elapsedTime, this.motion.type);\r\n\t}\r\n\r\n\tprotected onEnd() {\r\n\t\t// console.log(\"[Motion.OnEnd]\", this.elapsedTime, this.motion.type);\r\n\t}\r\n\r\n\tprotected onFinish() {\r\n\t\t// console.log(\"[Motion.OnFinish]\", this.elapsedTime, this.motion.type);\r\n\t}\r\n}\r\n\r\ntype TranslateProp = 'posRate' | 'angle' | 'scale';\r\n\r\nabstract class TranslateProcessor extends MotionProcessor {\r\n\r\n\tpublic targetVal: Vec1 | Vec2;\r\n\tpublic startVal: Vec1 | Vec2;\r\n\r\n\tprotected abstract get propKey(): TranslateProp;\r\n\tprotected abstract get oriVal();\r\n\tprotected get val() {\r\n\t\treturn this.battler[this.propKey].clone();\r\n\t}\r\n\r\n\t/**\r\n\t * 获取参数\r\n\t */\r\n\tprotected get tType(): TranslateType { return this.motion.params[0] }\r\n\tprotected get delta(): number[] | number { return this.motion.params[1] }\r\n\r\n\tprotected onStart() {\r\n\t\tsuper.onStart();\r\n\t\tthis.setupStartVal();\r\n\t\tthis.setupTargetVal();\r\n\t}\r\n\r\n\tprotected setupStartVal() {\r\n\t\tthis.startVal = this.val;\r\n\t}\r\n\r\n\tprotected setupTargetVal() {\r\n\t\tthis.targetVal = new Vec2();\r\n\r\n\t\tconst dt = v2(this.delta[0] || this.delta, this.delta[1] || 0);\r\n\r\n\t\tswitch (this.tType) {\r\n\t\t\tcase TranslateType.Delta:\r\n\t\t\t\tVec2.add(this.targetVal, this.val, dt); break;\r\n\t\t\tcase TranslateType.Value:\r\n\t\t\t\tthis.targetVal = dt; break;\r\n\t\t\tcase TranslateType.Origin:\r\n\t\t\t\tVec2.add(this.targetVal, this.oriVal, dt); break;\r\n\t\t\tdefault:\r\n\t\t\t\tthis.targetVal = this.val; break;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected onProgress(p: number) {\r\n\t\tsuper.onProgress(p);\r\n\t\tconst val = new Vec2();\r\n\t\tVec2.lerp(val, this.startVal, this.targetVal, p);\r\n\t\tthis.battler[this.propKey] = val;\r\n\t}\r\n}\r\n\r\n@motionProcessor(MotionType.Move)\r\nclass MoveProcessor extends TranslateProcessor {\r\n\r\n\tprotected get propKey(): TranslateProp { return \"posRate\"; }\r\n\r\n\tprotected get sPos() { return this.battler.startPos; }\r\n\tprotected get tPos() { return this.battler.targetPos; }\r\n\r\n\tprotected setupStartVal() {\r\n\t\tthis.startVal = Vec1.ZERO;\r\n\t}\r\n\r\n\tprotected setupTargetVal() {\r\n\t\tconst dt = v2(this.delta[0] || 0, this.delta[1] || 0);\r\n\r\n\t\tswitch (this.tType) {\r\n\t\t\tcase TranslateType.Delta:\r\n\t\t\t\tthis.tPos.origin = this.sPos.origin;\r\n\t\t\t\tVec2.add(this.tPos.offset, this.sPos.offset, dt);\r\n\t\t\t\tbreak;\r\n\t\t\tcase TranslateType.Value:\r\n\t\t\t\tthis.tPos.origin = this.sPos.origin;\r\n\t\t\t\tthis.tPos.offset = dt;\r\n\t\t\t\tbreak;\r\n\t\t\tcase TranslateType.Origin:\r\n\t\t\t\tthis.tPos.origin = \"self\";\r\n\t\t\t\tthis.tPos.offset = dt;\r\n\t\t\t\tbreak;\r\n\t\t\tcase TranslateType.Target:\r\n\t\t\t\tthis.tPos.origin = \"target\";\r\n\t\t\t\tthis.tPos.offset = dt;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tthis.targetVal = Vec1.ONE;\r\n\t}\r\n\r\n\tprotected onFinish() {\r\n\t\tsuper.onFinish();\r\n\t\tthis.sPos.origin = this.tPos.origin;\r\n\t\tthis.sPos.offset = this.tPos.offset.clone();\r\n\t}\r\n\r\n\t// 不需要该值\r\n\tprotected get oriVal() { return null; }\r\n}\r\n\r\n@motionProcessor(MotionType.Scale)\r\nclass ScaleProcessor extends TranslateProcessor {\r\n\tprotected get propKey(): TranslateProp { return \"scale\"; }\r\n\tprotected get oriVal() { return Vec2.ONE; }\r\n}\r\n\r\n@motionProcessor(MotionType.Rotate)\r\nclass RotateProcessor extends TranslateProcessor {\r\n\tprotected get propKey(): TranslateProp { return \"angle\"; }\r\n\tprotected get oriVal() { return Vec1.ZERO; }\r\n}\r\n\r\n@motionProcessor(MotionType.Jump)\r\nclass JumpProcessor extends MotionProcessor {\r\n\r\n}\r\n\r\n@motionProcessor(MotionType.ApplyResult)\r\nclass ApplyResultProcessor extends MotionProcessor {\r\n\r\n\tprotected onStart() {\r\n\t\tsuper.onStart();\r\n\t\tif (this.isResult)\r\n\t\t\tconsole.error(\"结果动作中无法使用ApplyResult动作！\");\r\n\t\telse\r\n\t\t\tthis.targetBattler.applyResult(this.action);\r\n\t}\r\n}\r\n\r\n@motionProcessor(MotionType.ShowResult)\r\nclass ShowResultProcessor extends MotionProcessor {\r\n\r\n\tprotected onStart() {\r\n\t\tsuper.onStart();\r\n\t\tif (!this.isResult)\r\n\t\t\tconsole.error(\"非结果动作中无法使用ShowResult动作！\");\r\n\t\telse\r\n\t\t\tthis.battler.showResult(this.action.result);\r\n\t}\r\n}\r\n\r\n@motionProcessor(MotionType.PlayCharAni)\r\nclass CharAniProcessor extends  MotionProcessor {\r\n\t/**\r\n\t * 获取参数\r\n\t */\r\n\tprotected get name(): string { return this.motion.params[0] }\r\n\r\n\tprotected onStart() {\r\n\t\tsuper.onStart();\r\n\t\tthis.battler.animation = this.name;\r\n\t}\r\n\r\n\tpublic get duration(): number {\r\n\t\treturn this.realDuration();\r\n\t}\r\n\r\n\t@cache\r\n\tprivate realDuration() {\r\n\t\treturn this.battler.entity.skeleton.getRuntimeData()\r\n\t\t\t.animations.find(a => a.name == this.name)\r\n\t\t\t?.duration || this.motion.duration;\r\n\t}\r\n\r\n\tprotected onEnd() {\r\n\t\tsuper.onEnd();\r\n\t}\r\n}\r\n\r\n@motionProcessor(MotionType.Shake)\r\nclass ShakeProcessor extends  MotionProcessor {\r\n\r\n\tprotected get tt(): TargetType { return this.motion.params[0] }\r\n\tprotected get range(): number { return this.motion.params[1] }\r\n\r\n\tprotected onProgress(p: number) {\r\n\t\tsuper.onProgress(p);\r\n\t\tthis.motionTarget(this.tt).shakePos.x = this.range * Math.sin(Math.PI * 4 * p);\r\n\t}\r\n\r\n\tprotected onEnd() {\r\n\t\tsuper.onEnd();\r\n\t\tthis.motionTarget(this.tt).shakePos = Vec2.ZERO;\r\n\t}\r\n\r\n}\r\n\r\n@motionProcessor(MotionType.Shine)\r\nclass ShineProcessor extends  MotionProcessor {\r\n\r\n\tprotected get tt(): TargetType { return this.motion.params[0] }\r\n\tprotected get colorCode(): string { return this.motion.params[1] }\r\n\r\n\tprivate realColor: Color = Color.WHITE;\r\n\r\n\tprotected onStart() {\r\n\t\tsuper.onStart();\r\n\t\tthis.realColor = new Color().fromHEX(this.colorCode);\r\n\t}\r\n\r\n\tprotected onProgress(p: number) {\r\n\t\tsuper.onProgress(p);\r\n\t\tColor.lerp(this.motionTarget(this.tt).color, Color.WHITE, this.realColor, Math.sin(Math.PI * p));\r\n\t}\r\n\r\n\tprotected onEnd() {\r\n\t\tsuper.onEnd();\r\n\t\tthis.motionTarget(this.tt).color = Color.WHITE;\r\n\t}\r\n\r\n}\r\n\r\n@motionProcessor(MotionType.FadeOut)\r\nclass FadeOutProcessor extends MotionProcessor {\r\n\r\n\tprotected get tt(): TargetType { return this.motion.params[0] }\r\n\r\n\tprotected onStart() {\r\n\t\tsuper.onStart();\r\n\t}\r\n\r\n\tprotected onProgress(p: number) {\r\n\t\tsuper.onProgress(p);\r\n\t\tthis.motionTarget(this.tt).opacity = (1 - p) * 255;\r\n\t}\r\n\r\n\tprotected onEnd() {\r\n\t\tsuper.onEnd();\r\n\t}\r\n\r\n}\r\n\r\n@motionProcessor(MotionType.PlayBattleAni)\r\nclass PlayBattleAniProcessor extends MotionProcessor {\r\n\r\n\tprotected onStart() {\r\n\t\tthis.motion.params.forEach(p => {\r\n\t\t\tthis.battler.battle.battleAnimations.push(p[0]);\r\n\t\t\tthis.battler.battle.battleAnimationTimes.push(p[1]);\r\n\t\t})\r\n\t\tsuper.onStart();\r\n\t}\r\n\r\n\tprotected onProgress(p: number) {\r\n\t\tsuper.onProgress(p);\r\n\t}\r\n\r\n\tprotected onEnd() {\r\n\t\tsuper.onEnd();\r\n\t}\r\n\r\n}\r\n\r\n@motionProcessor(MotionType.PlayNormalAni)\r\nclass PlayNormalAniProcessor extends MotionProcessor {\r\n\r\n\tprotected onStart() {\r\n\t\tthis.motion.params.forEach(p => {\r\n\t\t\tthis.battler.normalAnimations = p[0];\r\n\t\t\tthis.battler.normalAnimationTimes = p[1];\r\n\t\t})\r\n\t\tsuper.onStart();\r\n\t}\r\n\r\n\tprotected onProgress(p: number) {\r\n\t\tsuper.onProgress(p);\r\n\t}\r\n\r\n\tprotected onEnd() {\r\n\t\tsuper.onEnd();\r\n\t}\r\n\r\n}\r\n","import {BaseData, field} from \"../../CoreModule/Data/BaseData\";\r\n\r\nexport enum MotionType {\r\n\tNone = \"none\",\r\n\tMove = \"move\",\r\n\tRotate = \"rotate\",\r\n\tScale = \"scale\",\r\n\tJump = \"jump\",\r\n\tShake = \"shake\",\r\n\tShine = \"shine\",\r\n\tReset = \"reset\",\r\n\tPlayCharAni = \"playCharAni\",\r\n\tPlayBattleAni = \"playBattleAni\",\r\n\tPlayNormalAni = \"playNormalAni\",\r\n\tPlaySE = \"playSE\",\r\n\tApplyResult = \"applyResult\",\r\n\tShowResult = \"showResult\",\r\n\tWait = \"ended\",\r\n\tFadeOut = \"fadeOut\"\r\n}\r\n\r\nexport enum TranslateType {\r\n\tDelta = 'delta',\r\n\tValue = 'value',\r\n\tOrigin = 'origin',\r\n\tTarget = 'target'\r\n}\r\n\r\nexport enum TargetType {\r\n\tSelf = 'self',\r\n\tSubject = 'subject',\r\n\tTarget = 'target',\r\n\tBackground = 'background',\r\n\tScreen = 'screen'\r\n}\r\n\r\nexport enum AniOrigin {\r\n\tSubject = 'subject',\r\n\tScreen = 'screen',\r\n\tTarget = 'target',\r\n}\r\n\r\nexport class Motion extends BaseData {\r\n\r\n\t@field\r\n\tpublic duration: number = 0; // 持续时间\r\n\t@field\r\n\tpublic offset: number = 0; // 时间偏移量\r\n\t@field\r\n\tpublic wait: number = 0; // 等待时间\r\n\t@field\r\n\tpublic playType: 'before' | 'after' = 'after'; // 播放类型\r\n\r\n\t@field(String)\r\n\tpublic type: MotionType = MotionType.None;\r\n\t@field([Object])\r\n\tpublic params: any[] = [];\r\n\r\n}\r\n","import HeroInTeamContainer from \"../../../Modules/BattleModule/Components/Hero/HeroInTeamContainer\";\r\nimport HeroGroupContainer from \"../../../Modules/BattleModule/Components/Hero/HeroGroupContainer\";\r\nimport {CopyType} from \"../../../Modules/CopyModule/Data/Copy\";\r\nimport {PlayerCopy} from \"../../../Modules/CopyModule/Data/PlayerCopy\";\r\nimport {CopyInterface} from \"../../../Modules/CopyModule/CopyCommon\";\r\nimport {Hero} from \"../../../Modules/HeroModule/Data/Hero\";\r\nimport {playerMgr, waitForLogin} from \"../../../Modules/PlayerModule/Managers/PlayerManager\";\r\nimport {waitForDataLoad} from \"../../../Modules/CoreModule/Managers/DataManager\";\r\nimport {heroMgr} from \"../../../Modules/HeroModule/Managers/HeroManager\";\r\nimport {copyMgr} from \"../../../Modules/CopyModule/Managers/CopyManager\";\r\nimport {battleScene} from \"../../BattleScene\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class MyTeamFrame extends cc.Component {\r\n\r\n    totalHeroes: Hero[] = [];\r\n\r\n    @property(HeroInTeamContainer)\r\n    heroesInTeamContainer: HeroInTeamContainer = null;\r\n\r\n    @property(HeroGroupContainer)\r\n    heroGroupContainer: HeroGroupContainer = null;\r\n\r\n    start() {\r\n        this.setup().then(res => {\r\n            this.refreshTeam();\r\n        });\r\n    }\r\n\r\n    @waitForDataLoad\r\n    @waitForLogin\r\n    private async setup() {\r\n        const acc = playerMgr().player.account;\r\n        this.totalHeroes = (await heroMgr().getListFromServer())\r\n          .filter(h => h.ownerAccount == acc);\r\n    }\r\n\r\n    private refreshTeam() {\r\n        battleScene().heroesInTeam = this.getHeroesInTeam();\r\n        this.heroesInTeamContainer?.setItems(battleScene().heroesInTeam);\r\n    }\r\n\r\n    /**\r\n     * 获取当前出场的英雄列表\r\n     */\r\n    private getHeroesInTeam() {\r\n        let cfg = copyMgr().getMainPlayerCopySettings();\r\n        return this.totalHeroes.filter(h => cfg.nftIds.find(c => c == h.nftId));\r\n    }\r\n\r\n    addTeamMember(nftId: string) {\r\n        let cfg: PlayerCopy = copyMgr().getPlayerCopy();\r\n        let teamHeroNftIds = cfg.mainSetting().nftIds;\r\n        if (teamHeroNftIds.indexOf(nftId) >= 0) return this.removeTeamMember(nftId);\r\n        if (teamHeroNftIds.length >= 3) return;\r\n        teamHeroNftIds.push(nftId);\r\n        this.refreshTeam();\r\n    }\r\n\r\n    removeTeamMember(nftId: string) {\r\n        let cfg = copyMgr().getPlayerCopy();\r\n        let teamHeroNftIds = cfg.mainSetting().nftIds;\r\n        let idx = teamHeroNftIds.indexOf(nftId);\r\n        if (idx != -1) {\r\n            teamHeroNftIds.splice(idx, 1);\r\n        }\r\n        this.refreshTeam();\r\n    }\r\n\r\n    makeNewTeam(){\r\n        let cfg = copyMgr().getPlayerCopy();\r\n        let teamHeroNftIds = cfg.mainSetting().nftIds;\r\n        CopyInterface.AdjustHeroes({copyType: CopyType.Main, nftIds: teamHeroNftIds});\r\n    }\r\n}\r\n","import {error, get, loading, post} from \"../../CoreModule/Common/CoreCommon\";\r\n\r\nexport class NFTThrow {\r\n\r\n\t@error(500000, \"Web3初始化錯誤\") static Web3InitError(...p) {}\r\n\t@error(500001, \"暱稱輸入不正確\") static NicknameError(...p) {}\r\n\t@error(500002, \"部件庫存不足\") static PartStockError(...p) {}\r\n\t@error(500003, \"NFT已售罄\") static NFTStockError(...p) {}\r\n\t@error(500004, \"相同的NFT已存在\") static NFTExistError(...p) {}\r\n\t@error(500005, \"交易錯誤\") static TransactionError(...p) {}\r\n\t@error(500010, \"NFT創建錯誤\") static NFTCreateError(...p) {}\r\n\r\n}\r\n\r\nexport class NFTLoading {\r\n\r\n\t@loading(500000, \"錢包初始化\") static Web3Init(...p): any {};\r\n\t@loading(500001, \"創建NFT\") static CreateNFT(...p): any {};\r\n\r\n}\r\n\r\nconst APITestServerPath: string = \"https://test-hkaws-20220318-9927311a69be.nftmake.io/platform\";\r\nconst APIServerPath: string = \"https://www.nftmake.com/platform\";\r\n\r\nimport {Testing} from \"../Managers/NFTManager\";\r\n\r\nexport class NFTInterface {\r\n\r\n\t@post(Testing ? APITestServerPath : APIServerPath,\r\n\t\t\"/api/createimg\") static UploadImgInterface(d?): any {}\r\n\t// @post(APIServerPath, \"/api/createos\") static CreateOSInterface(d?): any {}\r\n\r\n}\r\n","import {chainId, defaultAccount, DefaultBt1, DefaultBt2, DefaultChainId, nftMgr} from \"../Managers/NFTManager\";\r\nimport {NFTLoading, NFTThrow} from \"../Common/NFTCommon\";\r\nimport {catchAsError, handleError} from \"../../CoreModule/Managers/AlertManager\";\r\nimport {blockLoading, showLoading} from \"../../CoreModule/Managers/LoadingManager\";\r\nimport {heroMgr} from \"../../HeroModule/Managers/HeroManager\";\r\n\r\nexport class NFTCreator {\r\n\r\n\tpublic bt1: number = DefaultBt1;\r\n\tpublic bt2: number = DefaultBt2;\r\n\tpublic name: string;\r\n\tpublic picture: string;\r\n\tpublic gif: string;\r\n\tprivate _partIds: number[];\r\n\r\n\tset partIds(value: number[]) {\r\n\t\tthis._partIds = value;\r\n\t\tthis.calcPrice().then();\r\n\t}\r\n\tget partIds() {\r\n\t\treturn this._partIds;\r\n\t}\r\n\r\n\tpublic price: number;\r\n\r\n\tpublic async getPrice() {\r\n\t\treturn this.price || await this.calcPrice();\r\n\t}\r\n\r\n\tpublic async calcPrice() {\r\n\t\tthis.price = null;\r\n\t\treturn this.price = await nftMgr().getNFTPrice(\r\n\t\t\tthis.bt1, this.bt2, this.partIds);\r\n\t}\r\n\r\n\tprivate async checkNFT() {\r\n\t\t// 检查名称合法性\r\n\t\tlet regular = /[a-zA-Z0-9]+\\s?[a-zA-Z0-9]+|[a-zA-Z0-9]+/; //正则表达式，只允许英文、数字且中间最多含一个空格\r\n\t\tif (this.name.length > 20 || regular.exec(this.name) ?\r\n\t\t\tregular.exec(this.name)[0] != this.name : true)\r\n\t\t\tNFTThrow.NicknameError();\r\n\r\n\t\t// let stock = await nftMgr().getPartsStock(\r\n\t\t// \tthis.bt1, this.bt2, this.partIds);\r\n\t\t//\r\n\t\t// console.log(\"getPartsStock: \", stock);\r\n\t\t//\r\n\t\t// if (stock.length > 0) NFTThrow.PartStockError();\r\n\t\t// // 检查是否下架该系列\r\n\t\t// if (stock.indexOf(\"0\") !== -1) NFTThrow.PartStockError(); // throw \"\\\\L[SCreate43]\";\r\n\t\t// // if (stock !== -1) NFTThrow.PartStockError(); // throw \"\\\\L[SCreate43]\";\r\n\t\t//\r\n\t\t// // 检查部件组合是否重复\r\n\t\t// let exist = await nftMgr().notUniqueParts(this.partIds);\r\n\t\t// if (exist) NFTThrow.NFTExistError();\r\n\t}\r\n\r\n\t// 拉起授权让用户设置授权代币数量？\r\n\t@catchAsError(NFTThrow.TransactionError)\r\n\tprivate async payForGameToken() {\r\n\t\tlet totalSupply = await nftMgr().getTotalSupply();\r\n\r\n\t\tconst hash = await nftMgr().payForIt(totalSupply);\r\n\t\tconst res = await nftMgr().searchHash(hash);\r\n\r\n\t\tif (!res) throw \"\\\\L[ERR500010_DETAIL4]\";\r\n\t}\r\n\r\n\tprivate async checkAccount() {\r\n\t\t// 检查钱包地址\r\n\t\tif(!defaultAccount())\r\n\t\t\tNFTThrow.NFTCreateError(\"\\\\L[ERR500010_DETAIL1]\");\r\n\r\n\t\t// // 判断bsc余额是否足够支付gas\r\n\t\t// let gasPrice = await nftMgr().getGasPrice();\r\n\t\t// let balance = await nftMgr().getBNBBalance();\r\n\t\t// if (gasPrice >= balance)\r\n\t\t// \tNFTThrow.TransactionError();\r\n\t\t//\r\n\t\t// // TODO: 测试\r\n\t\t// // 判断游戏代币是否足够支付\r\n\t\t// let nftPrice = await this.getPrice();\r\n\t\t// let gameBalance = await nftMgr().getUSTDBalance();\r\n\t\t// if (nftPrice > gameBalance)\r\n\t\t// \tNFTThrow.NFTCreateError(\"\\\\L[ERR500010_DETAIL2]\");\r\n\t\t//\r\n\t\t// // 判断获取授权合约扣除代币是否足够支付\r\n\t\t// let allowancePrice = await nftMgr().getAllowance();\r\n\t\t// // return this.payForGameToken()\r\n\t\t// if (nftPrice > allowancePrice)\r\n\t\t// \treturn this.payForGameToken()\r\n\t}\r\n\r\n\tprivate async check() {\r\n\t\treturn Promise.all([this.checkAccount(), this.checkNFT()])\r\n\t}\r\n\r\n\t@catchAsError(NFTThrow.NFTCreateError, \"\\\\L[ERR500010_DETAIL3]\")\r\n\tprivate async uploadImage() {\r\n\t\tconst gif = this.getGIFFormData();\r\n\t\tconst res = await nftMgr().uploadImage(this.picture, gif);\r\n\t\tconsole.log(\"uploadImage: \", res);\r\n\t\treturn res[\"data\"].toString();\r\n\t}\r\n\r\n\tprivate getGIFFormData(): FormData {\r\n\t\tlet binary = atob(this.gif.split(',')[1]);\r\n\t\tlet bits = new Uint8Array(new ArrayBuffer(binary.length));\r\n\t\tfor (let i = 0;i < binary.length;i++) bits[i] = binary.charCodeAt(i);\r\n\t\tlet file = new File([bits], this.name + \".gif\", {type: \"image/gif\"});\r\n\t\tlet res = new FormData();\r\n\t\tres.append(\"chainId\", nftMgr().chainId.toString());\r\n\t\tres.append(\"chainType\", nftMgr().chainType.toString());\r\n\t\tres.append(\"walletAddress\", nftMgr().defaultAccount.toString());\r\n\t\tres.append(\"file\", file);\r\n\t\treturn res;\r\n\t}\r\n\r\n\t@showLoading(NFTLoading.CreateNFT)\r\n\t@handleError(true)\r\n\t@catchAsError(NFTThrow.NFTCreateError)\r\n\t@blockLoading\r\n\tpublic async create() {\r\n\t\tawait nftMgr().connect();\r\n\t\tawait this.check();\r\n\t\tconst url = await this.uploadImage();\r\n\t\tconst data = await nftMgr().createNFT(this.name,\r\n\t\t\turl, this.bt1, this.bt2, this.partIds);\r\n\t\t// const res = await nftMgr().searchHash(hash);\r\n\t\tconst hero = heroMgr().convert(data);\r\n\r\n\t\tif (hero) {\r\n\t\t\t// const hero = await heroMgr().getLastNFT();\r\n\t\t\tconsole.log(\"NFT Result: \", hero);\r\n\t\t\t// const osRes = await nftMgr().createOS(hero.nftId);\r\n\t\t\t// console.log(\"Create OS: \", osRes);\r\n\t\t\tawait HeroInterface.CreateHero({ hero });\r\n\t\t\treturn hero;\r\n\t\t} else NFTThrow.NFTCreateError();\r\n\t\t\t// throw \"\\\\L[SCreate49]\";\r\n\t}\r\n}\r\n\r\nimport {HeroInterface} from \"../../HeroModule/Common/HeroCommon\";\r\n\r\n","import {MessageQueue} from \"../../CoreModule/Utils/MessageQueue\";\r\n\r\nexport const Web3Enable = false;\r\nexport const Testing = true;\r\n\r\nimport {BaseManager, getManager, manager} from \"../../CoreModule/Managers/BaseManager\";\r\nimport {Web3} from \"../Utils/Web3\";\r\nimport {PartType} from \"../../HeroModule/Data/PartType\";\r\nimport {showLoading} from \"../../CoreModule/Managers/LoadingManager\";\r\nimport {i18nMgr, LanguageType} from \"../../CoreModule/Managers/I18nManager\";\r\nimport {PromiseUtils} from \"../../../Utils/PromiseUtils\";\r\nimport {catchAsError, handleError} from \"../../CoreModule/Managers/AlertManager\";\r\nimport {NFTInterface, NFTLoading, NFTThrow} from \"../Common/NFTCommon\";\r\nimport {playerMgr} from \"../../PlayerModule/Managers/PlayerManager\";\r\nimport {partRepo} from \"../../HeroModule/Data/Part\";\r\n\r\nexport type ChainId = 1 | 4 | 56 | 97;\r\nexport type ChainType = \"BSC\" | \"ETH\";\r\nexport type WalletType = 'Metamask' | 'WalletConnect';\r\nexport type TokenType = 'BUSD' | 'ETH' | 'USDC';\r\n\r\nexport const DefaultChainId: ChainId = Testing ? 97 : 56;\r\nexport const DefaultChainType: ChainType = \"BSC\";\r\nexport const DefaultWalletType: WalletType = 'Metamask';\r\nexport const DefaultTokenType: TokenType = 'BUSD';\r\n\r\nexport const DefaultBt1: number = 2;\r\nexport const DefaultBt2: number = 6;\r\n\r\nexport const NFTTestServerPath: string = \"http://static.nftmake.io\"; // \"https://test-hkaws-20220318-9927311a69be.nftmake.io/platform/\";\r\nexport const NFTServerPath: string = \"https://static.nftmake.com\"; // \"https://www.nftmake.com/platform/\";\r\n\r\n// export const PartIdOffset: number = 6896;\r\n// export function PartIdOffset(id: number): number {\r\n// \tlet keys = Object.keys(PartIdOffsetDic).map(Number).sort((a, b) => b - a);\r\n// \tfor (let i = 0;i < keys.length;i++)\r\n// \t\tif (id >= keys[i]) return PartIdOffsetDic[keys[i]] - keys[i];\r\n// \treturn 0;\r\n// }\r\n// const PartIdOffsetDic: { [key: number]: number; } = {0: 6896, 4380: 13608};\r\nexport function nftMakeId2PartId(nftMakeId: number): number {\r\n\treturn partRepo().getByNftMakeId(nftMakeId).id;\r\n}\r\nexport function partId2NftMakeId(partId: number): number {\r\n\treturn partRepo().getById(partId).nftMakeId;\r\n}\r\n\r\nexport const PartTypeIdOffset: number = 331;\r\n\r\nconst HashSearchInterval = 1000;\r\nconst MaxHashSearchTimes = 60;\r\n\r\nconst PriceZeroCount = 18; // 价格后加0数\r\n\r\nexport function nftMgr() : NFTManager {\r\n\treturn getManager(NFTManager);\r\n}\r\n\r\nexport function data() {\r\n\treturn nftMgr().data;\r\n}\r\nexport function chainId() {\r\n\treturn nftMgr().chainId;\r\n}\r\nexport function walletType() {\r\n\treturn nftMgr().walletType;\r\n}\r\nexport function defaultAccount() {\r\n\treturn nftMgr().defaultAccount;\r\n}\r\n\r\nconst scripts = Testing ? [\r\n\t// \"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\",\r\n\t// \"https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js\",\r\n\t// \"https://unpkg.com/@walletconnect/qrcode-modal@1.6.6/dist/umd/index.min.js\",\r\n\t// \"https://unpkg.com/@walletconnect/client@1.6.6/dist/umd/index.min.js\",\r\n\t// // \"https://static.nftmake.com/static/getWeb3.js\"\r\n\t// \"https://static.nftmake.io/static/getWeb3.2.0.0.js\",\r\n\t\"https://cdn.jsdelivr.net/npm/web3@1.2.7/dist/web3.min.js\",\r\n\t\"https://unpkg.com/@walletconnect/qrcode-modal@1.6.6/dist/umd/index.min.js\",\r\n\t\"https://unpkg.com/@walletconnect/client@1.6.6/dist/umd/index.min.js\",\r\n\t\"https://unpkg.com/axios/dist/axios.min.js\",\r\n\t// \"https://static.nftmake.io/static/getWeb3.2.0.0.js\",\r\n\t\"https://static.nftmake.io/static/CREATELIB.js\",\r\n] : [\r\n\t\"https://cdn.jsdelivr.net/npm/web3@1.2.7/dist/web3.min.js\",\r\n\t\"https://unpkg.com/@walletconnect/qrcode-modal@1.6.6/dist/umd/index.min.js\",\r\n\t\"https://unpkg.com/@walletconnect/client@1.6.6/dist/umd/index.min.js\",\r\n\t\"https://unpkg.com/axios/dist/axios.min.js\",\r\n\t// \"https://static.nftmake.io/static/getWeb3.2.0.0.js\",\r\n\t\"https://static.nftmake.com/static/CREATELIB.js\",\r\n];\r\n\r\nclass NFTMakeData {\r\n\tlang?: LanguageType;\r\n\twindowSize?: number[];\r\n\tinviteAddress?: string;\r\n\taddress?: string;\r\n}\r\n\r\nfunction waitForInit(objOrDefault: any, key?, desc?): any {\r\n\tlet default_ = null;\r\n\tconst process = (obj, key, desc) => {\r\n\t\tconst oriFunc = desc.value;\r\n\t\tdesc.value = function () {\r\n\t\t\tconst args = arguments;\r\n\t\t\treturn new Promise(async (resolve, reject) => {\r\n\t\t\t\tif (!Web3Enable) resolve(default_);\r\n\t\t\t\telse {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tconst cond = await PromiseUtils.waitFor(() => this.initialized);\r\n\t\t\t\t\t\tif (cond) resolve(await oriFunc.apply(this, args));\r\n\t\t\t\t\t\telse reject(\"初始化失败！\");\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\treject(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tif (key === undefined && desc === undefined) { // 只有一个参数\r\n\t\tdefault_ = objOrDefault;\r\n\t\treturn process;\r\n\t}\r\n\tprocess(objOrDefault, key, desc);\r\n}\r\n\r\n@manager\r\nclass NFTManager extends BaseManager {\r\n\r\n\tpublic w3: Web3;\r\n\tpublic data: NFTMakeData = {};\r\n\r\n\tpublic chainId: ChainId = DefaultChainId;\r\n\tpublic chainType: ChainType = DefaultChainType;\r\n\tpublic walletType: WalletType = DefaultWalletType;\r\n\tpublic tokenType: TokenType = DefaultTokenType;\r\n\tpublic defaultAccount: string;\r\n\r\n\tprivate initialized = false;\r\n\tprivate dataRes: any;\r\n\tprivate dataRej: any;\r\n\r\n\t// region 初始化\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tif (Web3Enable) this.initialize().then();\r\n\t}\r\n\r\n\tprivate async initialize() {\r\n\t\tawait this.loadScripts();\r\n\t\tthis.setupLanguage();\r\n\t\tthis.createWeb3();\r\n\r\n\t\tconsole.log(\"NFT Managers\", this);\r\n\t}\r\n\r\n\tprivate async loadScripts() {\r\n\t\tconsole.log(\"loadScripts\");\r\n\t\tfor (const script of scripts)\r\n\t\t\tawait this.loadScript(script);\r\n\t}\r\n\r\n\tprivate loadScript(src): Promise<any> {\r\n\t\tconst head = document.children[0].children[0];\r\n\t\tconsole.log({head});\r\n\t\treturn new Promise(res => {\r\n\t\t\tlet script = document.createElement('script');\r\n\t\t\tscript.src = src;\r\n\t\t\thead.appendChild(script);\r\n\t\t\tscript.onload = () => res(true);\r\n\t\t\tscript.onerror = () => res(false);\r\n\t\t})\r\n\t}\r\n\r\n\tprivate setupLanguage() {\r\n\t\tPromiseUtils.waitFor(() => !!this.data.lang, 100, 100)\r\n\t\t\t.then(res => res && i18nMgr().setLanguage(this.data.lang));\r\n\t}\r\n\r\n\tprivate createWeb3() {\r\n\t\t// @ts-ignore\r\n\t\tthis.w3 = new getWeb3Lib() as Web3;\r\n\t\t// this.init().then();\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 更新\r\n\r\n\tupdate(dt: number) {\r\n\t\tsuper.update(dt);\r\n\t\tthis.updateMessage();\r\n\t}\r\n\r\n\tprivate updateMessage() {\r\n\t\tconst e = MessageQueue.message();\r\n\t\te && this.processMessage(e);\r\n\t}\r\n\r\n\tprivate processMessage(e) {\r\n\t\tconsole.log(\"processMessage: \", e, e.data);\r\n\t\tif ((e.data.target as string)?.includes(\"metamask\")) return;\r\n\t\tif (e.data.key == \"createNFTProgressCallBack\") return;\r\n\t\tif (e.data.nftData) this.dataRes(e.data.nftData);\r\n\t\tif (e.data.lang || e.data.windowSize ||\r\n\t\t\te.data.inviteAddress || e.data.address) {\r\n\t\t\tthis.data = Object.assign(this.data, e.data);\r\n\t\t\twindow['defaultAccount'] = this.defaultAccount = this.data.address;\r\n\t\t}\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region Web3函数简单封装\r\n\r\n\t// region 游戏内容部分\r\n\r\n\t/**\r\n\t * 获取组件数量是否足够（点击组件列表时调用）\r\n\t */\r\n\t// @showLoading\r\n\t@waitForInit(true)\r\n\tpublic async getEnoughStock(bt1, bt2, componentId: number | number[]) {\r\n\t\tconst componentIds = typeof componentId == 'number' ?\r\n\t\t\t[componentId] : componentId;\r\n\r\n\t\treturn await this.w3.getEnoughStock(\r\n\t\t\tbt1, bt2, componentIds, this.chainId\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取当前组件搭配所需库存是否足够\r\n\t */\r\n\t// @showLoading\r\n\t@waitForInit([])\r\n\tpublic async getPartsStock(bt1, bt2, partIds) {\r\n\t\treturn await this.w3.getFilterComponentStock(\r\n\t\t\tbt1, bt2, partIds, this.chainId\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * 判断当前组件搭配是否唯一\r\n\t */\r\n\t// @showLoading\r\n\t@waitForInit(false)\r\n\tpublic async notUniqueParts(partIds) {\r\n\t\treturn await this.w3.filterUniqueComponent(partIds, this.chainId, this.chainType);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取全局NFT列表\r\n\t */\r\n\t// @showLoading\r\n\t@waitForInit([])\r\n\tpublic async getAllNFTList(pageNum, bt1, bt2, pageSize) {\r\n\t\treturn await this.w3.getALLNFTList(pageNum, bt1, bt2, pageSize, this.chainId, this.chainType);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取我的NFT列表\r\n\t */\r\n\t// @showLoading\r\n\t@waitForInit([])\r\n\tpublic async getMyNFTList(pageNum, bt1, bt2, pageSize) {\r\n\t\treturn await this.w3.getMyNFTList(pageNum, bt1, bt2, pageSize, this.chainId, this.chainType);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取单个NFT详情\r\n\t */\r\n\t@showLoading\r\n\t@waitForInit({})\r\n\tpublic async getNFTDetail(nftId) {\r\n\t\treturn await this.w3.getTokenExtraView(nftId, this.chainId, this.chainType);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建NFT\r\n\t */\r\n\t@showLoading\r\n\t@waitForInit\r\n\tpublic createNFT(name, imgUrl, bt1, bt2, componentIds) {\r\n\t\treturn new Promise<any>(async (resolve, reject) => {\r\n\t\t\tthis.dataRes = resolve; this.dataRej = reject;\r\n\t\t\t// const imgUrl_ = (Testing ? NFTTestServerPath : NFTServerPath) + \"/\" + imgUrl;\r\n\t\t\tconst price = await this.getNFTPrice(bt1, bt2, componentIds);\r\n\t\t\tconst symbolInfo = await this.checkPaySymbol(this.chainType, this.chainId)\r\n\t\t\tthis.tokenType = symbolInfo[0].symbolName;\r\n\r\n\t\t\tdebugger;\r\n\r\n\t\t\tthis.NFTMAKECreateNFTProgress(this.data.inviteAddress,\r\n\t\t\t\tthis.tokenType, name, imgUrl, bt1, bt2, componentIds,\r\n\t\t\t\tthis.chainId, this.chainType, this.walletType,\r\n\t\t\t\tprice, null);\r\n\t\t})\r\n\t\t// return this.w3.createNFT(this.data.inviteAddress,\r\n\t\t// \t\"\", name, Testing ? NFTTestServerPath : NFTServerPath + \"/\" + imgUrl,\r\n\t\t// \tbt1, bt2, componentIds, this.chainId, this.walletType, await this.getNFTPrice(bt1, bt2, componentIds), null, null);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取指定分类下组件列表\r\n\t */\r\n\t// @showLoading\r\n\t@waitForInit([])\r\n\tpublic async getPartList(bt1, bt2, partType: PartType) {\r\n\t\tconst ct = PartTypeIdOffset + partType.id;\r\n\t\treturn await this.w3.getNFTComponent(bt1, bt2, ct, this.chainId);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取用户创建NFT个数\r\n\t */\r\n\t// @showLoading\r\n\t@waitForInit(0)\r\n\tpublic async getUserNFTCount() {\r\n\t\treturn Number(await this.w3.getNFTBalance(this.chainId));\r\n\t}\r\n\r\n\t// /**\r\n\t//  * 查询用户make数量\r\n\t//  */\r\n\t// public async getUserMakeCount() {\r\n\t// \treturn Number(await this.w3.getMakeBalance(this.chainId));\r\n\t// }\r\n\r\n\t/**\r\n\t * 获取当前系列制作数和总量\r\n\t */\r\n\t// @showLoading\r\n\t@waitForInit({\r\n\t\tcreateCount: 0,\r\n\t\tlimitCreateCount: 99999,\r\n\t\trestCount: 99999\r\n\t})\r\n\tpublic async getNFTCount(bt1, bt2) {\r\n\t\tconst cnt = await this.w3.getNftCount(bt1, bt2, this.chainId);\r\n\t\treturn {\r\n\t\t\tcreateCount: Number(cnt.createCount),\r\n\t\t\tlimitCreateCount: Number(cnt.limitCreateCount),\r\n\t\t\trestCount: Number(cnt.limitCreateCount) - Number(cnt.createCount)\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * 获取NFT组合价格\r\n\t */\r\n\t// @showLoading\r\n\t@waitForInit(0)\r\n\tpublic async getNFTPrice(bt1, bt2, componentIds) {\r\n\t\treturn Number(await this.w3.getNFTPrice(bt1, bt2,\r\n\t\t\tcomponentIds, this.chainId, this.chainType, this.tokenType));\r\n\t}\r\n\r\n\t/**\r\n\t * 获取最新（刚刚创建）的NFT\r\n\t * @param hash\r\n\t */\r\n\t// @showLoading\r\n\t@waitForInit({})\r\n\tpublic async getLastestNFT(hash: string) {\r\n\t\treturn await this.w3.getLastestCreateNFT(this.chainId, this.chainType, hash);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 手动请求\r\n\r\n\t/**\r\n\t * 上传图片\r\n\t */\r\n\t@showLoading\r\n\t@waitForInit({imgurl: \"\"})\r\n\tpublic async uploadImage(baseimgurl: string, basegiffile: FormData) {\r\n\t\treturn await this.NFTMAKECreateimg(this.chainType, this.chainId, this.defaultAccount, baseimgurl, basegiffile);\r\n\t\t// return await NFTInterface.UploadImgInterface({\r\n\t\t// \tbaseimgurl, imgName, ac: this.defaultAccount, ci: this.chainId, gifUrl: \"\"\r\n\t\t// });\r\n\t}\r\n\r\n\t// /**\r\n\t//  * createOS\r\n\t//  */\r\n\t// @showLoading\r\n\t// @waitForInit\r\n\t// public async createOS(ti) {\r\n\t// \treturn await NFTInterface.CreateOSInterface({\r\n\t// \t\tti, ac: this.defaultAccount, ci: this.chainId\r\n\t// \t})\r\n\t// }\r\n\r\n\t// endregion\r\n\r\n\t// region 交易部分\r\n\r\n\t/**\r\n\t * 获取Gas费用\r\n\t */\r\n\t// @showLoading\r\n\t@waitForInit(0)\r\n\tpublic async getGasPrice() {\r\n\t\treturn Number(await this.w3.getGasPrice(this.chainId));\r\n\t}\r\n\r\n\t/**\r\n\t * 获取用户USTD余额\r\n\t */\r\n\t// @showLoading\r\n\t@waitForInit(0)\r\n\tpublic async getUSTDBalance() {\r\n\t\tawait PromiseUtils.waitFor(() => this.initialized);\r\n\r\n\t\treturn Number(await this.w3.getBalanceOf(this.chainId));\r\n\t}\r\n\r\n\t/**\r\n\t * 获取用户BNB余额\r\n\t */\r\n\t// @showLoading\r\n\t@waitForInit(0)\r\n\tpublic async getBNBBalance() {\r\n\t\treturn Number(await this.w3.getBalance(this.chainId));\r\n\t}\r\n\r\n\t/**\r\n\t * 获取用户授权代币数量\r\n\t */\r\n\t// @showLoading\r\n\t@waitForInit(0)\r\n\tpublic async getAllowance() {\r\n\t\treturn Number(await this.w3.getAllowance(this.chainId));\r\n\t}\r\n\r\n\t// /**\r\n\t//  * 获取Make币价\r\n\t//  */\r\n\t// public async getPrice() {\r\n\t// \treturn Number(await this.w3.getPrice(this.chainId));\r\n\t// }\r\n\r\n\t/**\r\n\t * 查询代币总量\r\n\t */\r\n\t// @showLoading\r\n\t@waitForInit(0)\r\n\tpublic async getTotalSupply() {\r\n\t\treturn Number(await this.w3.searchTotalSupply(this.chainId));\r\n\t}\r\n\r\n\t/**\r\n\t * 用户授权合约扣除代币\r\n\t */\r\n\t// @showLoading\r\n\t@waitForInit\r\n\tpublic async payForIt(price) {\r\n\t\treturn await this.w3.payForIt(price, this.chainId, this.walletType);\r\n\t}\r\n\r\n\t/**\r\n\t * 查询哈希值\r\n\t */\r\n\t@showLoading\r\n\t@waitForInit\r\n\tpublic searchHash(hash): Promise<boolean> {\r\n\t\treturn PromiseUtils.waitFor(() =>\r\n\t\t\tthis.w3.searchHash(hash, this.chainId),\r\n\t\t\tHashSearchInterval, MaxHashSearchTimes,\r\n\t\t\t\"interval\", \"SearchHash\");\r\n\t}\r\n\t// private searchHashPromise(hash): Promise<boolean> {\r\n\t// \tlet cnt = 0;\r\n\t// \treturn new Promise<boolean>((resolve) => {\r\n\t// \t\tlet interval = setInterval(async () => {\r\n\t// \t\t\tconst res = await this.w3.searchHash(hash, this.chainId);\r\n\t// \t\t\t// 如果已经成功了，或者超出最大次数\r\n\t// \t\t\tif (res || ++cnt >= MaxHashSearchTimes) {\r\n\t// \t\t\t\tclearInterval(interval);\r\n\t// \t\t\t\tresolve(res)\r\n\t// \t\t\t}\r\n\t// \t\t}, HashSearchInterval)\r\n\t// \t})\r\n\t// }\r\n\r\n\t// endregion\r\n\r\n\t// endregion\r\n\r\n\t// region 数据转化\r\n\r\n\tpublic convertPrice(data: string | number): number {\r\n\t\tif (!data) return 0;\r\n\t\tif (typeof data == 'number') return data;\r\n\r\n\t\tconst len = data.length;\r\n\t\treturn Number(len < PriceZeroCount ? data :\r\n\t\t\tdata.substr(0, len - PriceZeroCount));\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 具体业务操作封装\r\n\r\n\t/**\r\n\t * 链接钱包\r\n\t */\r\n\t@showLoading(NFTLoading.Web3Init)\r\n\t@handleError(true)\r\n\t@catchAsError(NFTThrow.Web3InitError)\r\n\tpublic async connect() {\r\n\t\t// let res = await PromiseUtils.waitForResult(\r\n\t\t// \tthis.w3.init(this.chainId, this.walletType)\r\n\t\t// );\r\n\t\t// console.log(\"INIT: \", res);\r\n\t\t// if (res) {\r\n\t\twhile (!(await PromiseUtils.waitFor(\r\n\t\t\t() => !!this.defaultAccount)))\r\n\t\t\t// @ts-ignore\r\n\t\t\tawait window.NFTMAKEDisconnect();\r\n\t\tawait playerMgr().login(this.defaultAccount,\r\n\t\t\tthis.chainId, this.walletType);\r\n\t\t// } else\r\n\t\t// \tthrow \"Wallet Not Connected!\";\r\n\t}\r\n\r\n\t/**\r\n\t * 初始化钱包\r\n\t */\r\n\t@showLoading(NFTLoading.Web3Init)\r\n\t@handleError\r\n\t@catchAsError(NFTThrow.Web3InitError)\r\n\tpublic async init(connect = true) {\r\n\t\tawait PromiseUtils.waitFor(() => !!this.w3);\r\n\t\tthis.initialized = true;\r\n\t\t// this.defaultAccount = window['defaultAccount'];\r\n\r\n\t\tif (connect) await this.connect();\r\n\r\n\t\t// if (this.initialized) return;\r\n\t\t// // await playerMgr().login(this.defaultAccount,\r\n\t\t// // \tthis.chainId, this.walletType);\r\n\t\t//\r\n\t\t// let res = true;\r\n\t\t// // let res = await PromiseUtils.waitForResult(\r\n\t\t// // \tthis.w3.init(this.chainId, this.walletType)\r\n\t\t// // );\r\n\t\t// console.log(\"INIT: \", res);\r\n\t\t//\r\n\t\t// if (res) {\r\n\t\t// \tthis.defaultAccount = window['defaultAccount'];\r\n\t\t// \tawait playerMgr().login(this.defaultAccount,\r\n\t\t// \t\tthis.chainId, this.walletType);\r\n\t\t// \tthis.initialized = true;\r\n\t\t// } else throw null;\r\n\r\n\t\t// const res = await alertMgr().alert(\"操作失败\", InitFailAlertText, AlertDialogType.OK);\r\n\t\t// if (res == AlertResult.OK) await this.init();\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region window方法封装\r\n\r\n\tprivate NFTMAKECreateNFTProgress(inviteAddress, token, nickname, imgUrl, bt1, bt2, componentIds, chainId, chainType, walletType, amount, callback) {\r\n\t\t// @ts-ignore\r\n\t\twindow.NFTMAKECreateNFTProgress(inviteAddress,\r\n\t\t\ttoken, nickname, imgUrl,\r\n\t\t\tbt1, bt2, componentIds, chainId, chainType, walletType,\r\n\t\t\tamount, callback);\r\n\t}\r\n\r\n\tprivate async NFTMAKECreateimg (chainType, chainId, walletAddress, base64, formData) {\r\n\t\t// @ts-ignore\r\n\t\twindow.chainId = this.chainId;\r\n\t\t// @ts-ignore\r\n\t\treturn await window.NFTMAKECreateimg(chainType, chainId, walletAddress, null, base64, formData, 1);\r\n\t}\r\n\r\n\tprivate async checkPaySymbol (chainType, chainId) {\r\n\t\t// @ts-ignore\r\n\t\treturn await window.checkPaySymbol(\"createNft\",\tchainType, chainId);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n}\r\n","import {BaseManager, getManager, manager} from \"./BaseManager\";\r\nimport {loadingMgr, LoadingParam, LoadingOptions} from \"./LoadingManager\";\r\nimport {alertMgr, ErrorData} from \"./AlertManager\";\r\nimport {ParamCodec} from \"../Utils/ParamCodec\";\r\n\r\n// const Host = \"https://www.exermon.com:8088\";\r\nconst Host = \"https://zooworld-server-1836805-1255510304.ap-shanghai.run.tcloudbase.com\";\r\n// const Host = \"http://localhost:8088\"\r\n\r\nconst EncryptEnable = false;\r\nconst EncryptParamKey = \"e_params\";\r\n\r\nexport type Method = 'get' | 'post';\r\n\r\nexport type InterfaceLoading = LoadingParam | boolean;\r\n\t// 为false则不显示Loading，不填则使用默认值\r\n\r\nexport interface InterfaceOptions {\r\n\tmethod: Method;\r\n\thost?: string;\r\n\troute: string;\r\n\tuseToken?: boolean;\r\n\tuseEncrypt?: boolean;\r\n\tloading?: InterfaceLoading;\r\n}\r\n\r\nexport class Interface implements InterfaceOptions {\r\n\r\n\tpublic method: Method;\r\n\tpublic host: string = Host;\r\n\tpublic route: string;\r\n\tpublic useToken: boolean = true;\r\n\tpublic useEncrypt: boolean = true;\r\n\tpublic loading: InterfaceLoading = true;\r\n\r\n\tpublic get isGet() {return this.method == 'get'}\r\n\tpublic get isPost() {return this.method == 'post'}\r\n\r\n\tprivate _loadingSetting: LoadingOptions = null;\r\n\tpublic get loadingSetting(): LoadingOptions {\r\n\t\tif (!this._loadingSetting) {\r\n\t\t\tlet res: LoadingOptions = {};\r\n\t\t\tif (typeof this.loading == 'function')\r\n\t\t\t\tres = this.loading();\r\n\t\t\telse if (this.loading === null || this.loading === true)\r\n\t\t\t\tres = CoreLoading.Request(); // 为null使用默认值\r\n\t\t\telse if (this.loading === false)\r\n\t\t\t\tres.enable = false;\r\n\t\t\telse\r\n\t\t\t\tres = this.loading;\r\n\r\n\t\t\tthis._loadingSetting = res;\r\n\t\t}\r\n\t\treturn this._loadingSetting;\r\n\t}\r\n\r\n\tconstructor(options: InterfaceOptions) {\r\n\t\tObject.assign(this, options);\r\n\t}\r\n}\r\n\r\nexport type PostErrHandlerFunc = ((errorData: RequestErrorData) => boolean) | (() => boolean);\r\n\r\n/**\r\n * 标注网络请求发生错误时的处理函数<p>\r\n *\r\n * 示例1：当调用login，服务器返回403错误时<p>\r\n * 标注了<code>@postErrorHandler(Interface.Login, 0, 403)</code>的函数被执行<p>\r\n *\r\n * 示例2：当调用updateToken，服务器正常返回200，但数据的错误码为2时<p>\r\n * 标注了<code>@postErrorHandler(Interface.UpdateToken, 2)</code>的函数被执行\r\n *\r\n *\r\n * @param interface_ Interface对象\r\n * @param code 处理的服务器返回状态码\r\n * @param status 处理的http状态码，默认为200\r\n */\r\nexport function requestErrorHandler(\r\n\tinterface_: Interface, code: number, status: number = 200) {\r\n\treturn (obj, key, desc) => {\r\n\t\tnetworkMgr().registerErrorHandler(interface_, code, status, desc.value);\r\n\t}\r\n}\r\n\r\ninterface RequestErrorData extends ErrorData {\r\n\tinterface_: Interface\r\n\tstatus: number\r\n\tcode?: number\r\n\terrMsg?: string\r\n\tdetail?: string\r\n\tdata?: any\r\n\thandled?: boolean\r\n}\r\n\r\nclass RequestErrorHandler {\r\n\r\n\tprivate funcDict: any = {};\r\n\r\n\tconstructor() { }\r\n\r\n\tprivate getKey(interface_: Interface) {\r\n\t\treturn interface_.host + interface_.route;\r\n\t}\r\n\r\n\tpublic register(func: PostErrHandlerFunc, interface_: Interface | RequestErrorData,\r\n\t\t\t\t\t\t\t\t\tstatus?: number, code?: number) {\r\n\t\tif (interface_ instanceof Interface) {\r\n\t\t\tconst key = this.getKey(interface_);\r\n\t\t\tthis.funcDict[key] ||= {};\r\n\t\t\tthis.funcDict[key][status] ||= {};\r\n\t\t\tthis.funcDict[key][status][code] = func;\r\n\r\n\t\t} else this.register(func, interface_.interface_,\r\n\t\t\tinterface_.status, interface_.code);\r\n\t}\r\n\r\n\tpublic getHandler(interface_: Interface | RequestErrorData,\r\n\t\t\t\t\t\t\t\t\t\tstatus?: number, code?: number): PostErrHandlerFunc {\r\n\t\tif (interface_ instanceof Interface) {\r\n\t\t\tconst key = this.getKey(interface_);\r\n\t\t\tif (!this.funcDict[key]) return null;\r\n\t\t\tif (!this.funcDict[key][status]) return null;\r\n\t\t\treturn this.funcDict[key][status][code];\r\n\r\n\t\t} else return this.getHandler(interface_.interface_,\r\n\t\t\tinterface_.status, interface_.code);\r\n\t}\r\n\r\n\tpublic handle(errorData: RequestErrorData): boolean {\r\n\t\tlet func = this.getHandler(errorData);\r\n\t\tif (!func) return false;\r\n\r\n\t\tif (errorData.handled) return;\r\n\r\n\t\tconst res = func(errorData);\r\n\t\treturn errorData.handled = res == null ? true : res;\r\n\t}\r\n}\r\n\r\nexport function networkMgr(): NetworkManager {\r\n\treturn getManager(NetworkManager);\r\n}\r\n\r\n@manager\r\nclass NetworkManager extends BaseManager {\r\n\r\n\tprivate errorHandler: RequestErrorHandler = new RequestErrorHandler();\r\n\r\n\t/**\r\n\t * 发起请求\r\n\t */\r\n\tpublic async request<T = any>(interface_: Interface, data: object = {}): Promise<T> {\r\n\r\n\t\tdata = DataLoader.convert(data);\r\n\t\tconst dataStr = this.makeQueryParam(data, interface_.useEncrypt);\r\n\r\n\t\tlet url = interface_.host + interface_.route;\r\n\t\tif (interface_.isGet) url += \"?\" + dataStr;\r\n\r\n\t\tconst xhr = cc.loader.getXMLHttpRequest();\r\n\t\txhr.open(interface_.method, url, true);\r\n\t\txhr.setRequestHeader(\"Content-Type\",\r\n\t\t\t\"application/x-www-form-urlencoded\");\r\n\r\n\t\tif (interface_.useToken)\r\n\t\t\txhr.setRequestHeader(\"Token\", gameMgr().getToken());\r\n\r\n\t\treturn await this.getRequestPromise<T>(xhr, interface_, dataStr);\r\n\t}\r\n\r\n\tprivate getRequestPromise<T>(xhr: XMLHttpRequest, interface_: Interface, dataStr): Promise<T> {\r\n\r\n\t\treturn new Promise<T>((resolve, reject) => {\r\n\t\t\tconst loadingInfo = loadingMgr()\r\n\t\t\t\t.startLoading(interface_.loadingSetting);\r\n\r\n\t\t\txhr.onreadystatechange = () => {\r\n\t\t\t\tif (xhr.readyState !== 4) return;\r\n\r\n\t\t\t\tconst response = xhr.responseText;\r\n\t\t\t\tconst status = xhr.status;\r\n\r\n\t\t\t\tconsole.log(\"Response: \", xhr, status, response);\r\n\r\n\t\t\t\t// 从response里获取数据\r\n\t\t\t\tlet json, code, data, decoded;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tjson = JSON.parse(response);\r\n\t\t\t\t\t// 如果JSON是string，表示有加密\r\n\t\t\t\t\tif (typeof json == \"string\")\r\n\t\t\t\t\t\tjson = JSON.parse(decoded = ParamCodec.decode(json));\r\n\r\n\t\t\t\t\t// 虽然一般情况下不可能出现解不了码的情况，但万一真的不行如何处理？报500错误？\r\n\t\t\t\t\t// if (!json) throw \"Decode error!\";\r\n\t\t\t\t\t// else json = JSON.parse(json);\r\n\r\n\t\t\t\t\tcode = json[\"code\"] || 0;\r\n\t\t\t\t\tdata = json[\"data\"] || json;\r\n\r\n\t\t\t\t\tconsole.log(\"Response JSON: \", json, code, data);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.error(\"Parse JSON failed!\", decoded, e);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 完全成功\r\n\t\t\t\tif (status >= 200 && status < 300 && code === 0)\r\n\t\t\t\t\tresolve(data);\r\n\t\t\t\t// 如果服务器错误或解析不到JSON\r\n\t\t\t\telse {\r\n\t\t\t\t\t// json有值：自定义错误，json无值：系统错误\r\n\t\t\t\t\tlet errMsg, detail = \"\";\r\n\t\t\t\t\tif (json) {\r\n\t\t\t\t\t\terrMsg = json[\"errMsg\"];\r\n\t\t\t\t\t\tdetail = json[\"detail\"];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\terrMsg = \"\\\\L[ERR_SYSTEM]\" + status;\r\n\t\t\t\t\t\tdata = response;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst errData: RequestErrorData = {\r\n\t\t\t\t\t\tinterface_, status, code, errMsg, detail, data\r\n\t\t\t\t\t};\r\n\t\t\t\t\tthis.handleError(errData);\r\n\t\t\t\t\treject(errData);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tloadingInfo?.finish();\r\n\t\t\t};\r\n\r\n\t\t\tif (interface_.isGet) xhr.send();\r\n\t\t\telse xhr.send(dataStr);\r\n\t\t})\r\n\t}\r\n\r\n\tprivate makeQueryParam(data, useEncrypt) {\r\n\t\tlet res = Object.keys(data).reduce(\r\n\t\t\t(res, key) => (res + key + '=' +\r\n\t\t\t\tthis.convertParam(data[key]) + '&'), '');\r\n\t\tif (res !== '')\r\n\t\t\tres = res.substr(0, res.lastIndexOf('&'));\r\n\r\n\t\t// 处理加密参数的情况\r\n\t\tif (EncryptEnable && useEncrypt)\r\n\t\t\treturn EncryptParamKey + \"=\" + ParamCodec.encode(res);\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\tprivate convertParam(data) {\r\n\t\tlet res = data;\r\n\t\tif (typeof data === 'object') res = JSON.stringify(res);\r\n\t\treturn encodeURIComponent(res);\r\n\t}\r\n\r\n\tprivate handleError(errorData: RequestErrorData) {\r\n\t\tlet success = this.errorHandler.handle(errorData);\r\n\t\tif (!success) alertMgr().handleError(errorData);\r\n\t}\r\n\r\n\tpublic registerErrorHandler(interface_: Interface, code: number, status: number, func: PostErrHandlerFunc) {\r\n\t\tthis.errorHandler.register(func, interface_, status, code);\r\n\t}\r\n}\r\n\r\nimport {gameMgr} from \"./GameManager\";\r\nimport {DataLoader} from \"../Utils/DataLoader\";\r\nimport {CoreLoading} from \"../Common/CoreCommon\";\r\n","\r\nexport function autoUnitConvert(obj, key, desc) {\r\n    const oriFunc = desc.value;\r\n    desc.value = function(...p) {\r\n        const oriUC = NumberUtils.autoUnitConvert;\r\n        try {\r\n            NumberUtils.autoUnitConvert = true;\r\n            return oriFunc.apply(this, p);\r\n        } finally {\r\n            NumberUtils.autoUnitConvert = oriUC;\r\n        }\r\n    }\r\n}\r\n\r\nconst oriNumber_toString = Number.prototype.toString;\r\nNumber.prototype.toString = function (radix?: number) {\r\n    return NumberUtils.autoUnitConvert ?\r\n      NumberUtils.toString(this) :\r\n      oriNumber_toString.call(this, radix);\r\n}\r\n\r\nexport class NumberUtils {\r\n\r\n    public static autoUnitConvert = false;\r\n\r\n    private static units: string[] = [\"\", \"K\", \"M\", \"B\", \"T\", \"aa\"];\r\n    public static toString(val: number): string {\r\n        if (val < 1000) return val % 1 === 0 ? \"\" + val : val.toFixed(2);\r\n        for (let i = 0; i < 5; i++) {\r\n            if (val >= 1000) {\r\n                val /= 1000;\r\n                continue;\r\n            }\r\n            if (val > 100) return val.toFixed(1) + this.units[i];\r\n            return val.toFixed(2) + this.units[i];\r\n        }\r\n        return val.toFixed(2) + this.units[5];\r\n    }\r\n\r\n}\r\n","import BattleDisplay from \"../BattleDisplay\";\r\nimport {battleScene} from \"../../../../Scenes/BattleScene\";\r\nimport PVPBattlerState from \"./PVPBattlerState\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PVPBattleDisplay extends BattleDisplay {\r\n\r\n    isSettled: boolean = false;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n        // if (this.isStarted) return;\r\n        super.start();\r\n    }\r\n\r\n    // region 战斗者获取\r\n\r\n    selfBattler() {\r\n        return this.battlers.find(b => b.camp == 0);\r\n    }\r\n\r\n    opponentBattler() {\r\n        return this.battlers.find(b => b.camp == 1);\r\n    }\r\n\r\n    // endregion\r\n\r\n    // region 界面绘制\r\n\r\n    @property([PVPBattlerState])\r\n    battlerStates: PVPBattlerState[] = [];\r\n\r\n    refresh() {\r\n        this.isSettled = false;\r\n        if (!this.item) return;\r\n        super.refresh();\r\n        this.setupHeroes();\r\n    }\r\n\r\n    setupHeroes() {\r\n        this.battlerStates.forEach((b, i) => b.setItem(this.battlers[i].item));\r\n    }\r\n\r\n    // endregion\r\n\r\n    // region 更新控制\r\n\r\n    protected update(dt: number) {\r\n        if (!this.item) return;\r\n        super.update(dt);\r\n        this.judgeCopySettlement();\r\n    }\r\n\r\n    judgeCopySettlement() {\r\n        if (this.item.winner != 0 || this.isSettled) return;\r\n        // let r = this.item.result.rewards;\r\n        // console.log(123456, r);\r\n        battleScene().settlementWindow.open([]);\r\n        this.isSettled = true;\r\n    }\r\n\r\n    // endregion\r\n\r\n}\r\n","import {ItemDisplay} from \"../../../CoreModule/Components/ItemDisplay\";\r\nimport {Battler} from \"../../Data/Battler\";\r\nimport Skeleton = sp.Skeleton;\r\nimport Label = cc.Label;\r\nimport Sprite = cc.Sprite;\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport ProgressBar = cc.ProgressBar;\r\nimport {HeroSkeleton} from \"../../../../Utils/SpineUtils\";\r\nimport Node = cc.Node;\r\nimport Bone = sp.spine.Bone;\r\nimport Slot = sp.spine.Slot;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PVPBattlerState extends ItemDisplay<Battler> {\r\n\r\n    @property(Label)\r\n    heroLevelLabel: Label = null;\r\n    @property(Skeleton)\r\n    heroAvatarSkeleton: Skeleton = null;\r\n    @property(Sprite)\r\n    heroQualitySprite: Sprite = null;\r\n    @property(Sprite)\r\n    heroRestraintSprite: Sprite = null;\r\n\r\n    @property([SpriteFrame])\r\n    heroQualityPictures: SpriteFrame[] = [];\r\n    @property([SpriteFrame])\r\n    heroRestraintPictures: SpriteFrame[] = [];\r\n\r\n    @property(ProgressBar)\r\n    heroHpProgressBar: ProgressBar = null;\r\n    @property(Label)\r\n    heroHpLabel: Label = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    protected update(dt: number) {\r\n        if (!this.item) return;\r\n        this.updateHpBars();\r\n    }\r\n\r\n    private updateHpBars() {\r\n        this.heroHpLabel.string = this.item.hp + \"/\" + this.item.mhp;\r\n        this.heroHpProgressBar.progress = this.item.hp / this.item.mhp;\r\n    }\r\n\r\n    refresh() {\r\n        super.refresh();\r\n        this.heroLevelLabel.string = this.item.hero().level.level.toString();\r\n        this.heroQualitySprite.spriteFrame = this.heroQualityPictures[this.item.hero().quality];\r\n        this.heroRestraintSprite.spriteFrame = this.heroRestraintPictures[this.item.hero().restraint];\r\n        this.heroHpProgressBar.reverse = this.item.camp == 1;\r\n        this.drawAvatar();\r\n    }\r\n\r\n    private size: number = 93;\r\n    private avatarHeight: number = 0;\r\n    private avatarWidth: number = 0;\r\n    private avatarOffsetX: number = 0;\r\n    private avatarOffsetY: number = 0;\r\n\r\n    private drawAvatar(){\r\n        let node = new Node('node');\r\n        let temp = node.addComponent(Skeleton);\r\n        let hero = new HeroSkeleton(this.heroAvatarSkeleton, temp, this.item.hero().heroTypeId);\r\n        this.item.hero().parts.forEach(part => { hero.addPart(part); });\r\n        hero.refresh().then(res => {\r\n            node.destroy();\r\n            let bone: Bone = hero.findBone(\"head_1\");\r\n\r\n            hero.skeleton.updateWorldTransform();\r\n            let offsetX = bone.worldX, offsetY = bone.worldY;\r\n            while (bone.parent) bone = bone.parent;\r\n            bone.x -= offsetX;\r\n            bone.y -= offsetY;\r\n\r\n            let slot: Slot = hero.findSlot(\"head_1\");\r\n            if (!slot.getAttachment()) return;\r\n            this.avatarHeight = slot.getAttachment()[\"height\"];\r\n            this.avatarWidth = slot.getAttachment()[\"width\"];\r\n            this.avatarOffsetY = slot.getAttachment()[\"x\"];\r\n            this.avatarOffsetX = slot.getAttachment()[\"y\"];\r\n            this.sizeFilter();\r\n        });\r\n    }\r\n\r\n    private sizeFilter() {\r\n        let k = Math.min(this.avatarWidth / this.size, this.avatarHeight / this.size);\r\n        k *= 1.2;\r\n        // this.avatar.node.x = - this.avatarOffsetX / k;\r\n        this.heroAvatarSkeleton.node.y = - this.avatarOffsetY / k;\r\n        if (k > 1) this.heroAvatarSkeleton.node.scale = 1 / k;\r\n        else this.heroAvatarSkeleton.node.scale = 1;\r\n        this.heroAvatarSkeleton.node.scaleX *= this.item.camp == 1 ? 1 : -1;\r\n    }\r\n}\r\n","import Sprite = cc.Sprite;\r\nimport Label = cc.Label;\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport Node = cc.Node;\r\nimport {battleScene} from \"../../../../Scenes/BattleScene\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PVPRoomDisplay extends cc.Component {\r\n\r\n    @property(Number)\r\n    index: number = -1;\r\n    @property(Sprite)\r\n    icon: Sprite = null;\r\n    @property(Sprite)\r\n    levelFrame: Sprite = null;\r\n    @property(Label)\r\n    levelValue: Label = null;\r\n    @property(Label)\r\n    tips1: Label = null;\r\n    @property(Label)\r\n    tips2: Label = null;\r\n    @property(Node)\r\n    frame: Node = null;\r\n    @property(Node)\r\n    lock: Node = null;\r\n\r\n    start () {\r\n        if (this.index >= 0) this.onIndexChange();\r\n    }\r\n\r\n    update (dt) {\r\n        if (this.index == -1) this.node.active = false;\r\n        this.frame.active = this.index == battleScene().currentPVPRoomIndex;\r\n        this.lock.active = battleScene().currentPVPSelect ? battleScene().currentPVPSelect.level.level <= this.index * 20 : true;\r\n    }\r\n\r\n    setIndex(i: number) {\r\n        this.index = i;\r\n        this.onIndexChange();\r\n    }\r\n\r\n    @property([SpriteFrame])\r\n    iconPictures: SpriteFrame[] = [];\r\n    @property([SpriteFrame])\r\n    framePictures: SpriteFrame[] = [];\r\n\r\n    onIndexChange() {\r\n        this.node.active = true;\r\n        if (this.index < 0) return;\r\n        this.icon.spriteFrame = this.iconPictures[this.index];\r\n        this.levelFrame.spriteFrame = this.framePictures[this.index];\r\n        this.levelValue.string = this.index == 0 ? \"01-20\" : (this.index * 20 + 1) + \"-\" + ((this.index + 1) * 20);\r\n    }\r\n\r\n    onClick() {\r\n        if (battleScene().currentPVPRoomIndex == this.index) return battleScene().currentPVPRoomIndex = -1;\r\n        if (!this.lock.active) battleScene().currentPVPRoomIndex = this.index;\r\n    }\r\n}\r\n","import {data, StaticData} from \"../../CoreModule/Data/StaticData\";\r\nimport {BaseRepository, getRepository, repository} from \"../../CoreModule/Data/BaseRepository\";\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\nimport {field} from \"../../CoreModule/Data/BaseData\";\r\n\r\nconst DefaultRoomPlayerCount = 8;\r\n\r\n@data(\"PVPRoom\")\r\nexport class PVPRoom extends StaticData {\r\n\r\n\t@field([Number])\r\n\tpublic levelRange: number[] = [0, 20];\r\n\t@field([Number])\r\n\tpublic rankRange: number[] = [-0.01, 0.05];\r\n\t@field\r\n\tpublic playerCount: number = DefaultRoomPlayerCount;\r\n\r\n}\r\n\r\nexport function pvpRoomRepo() {\r\n\treturn getRepository(PVPRoomRepo);\r\n}\r\n\r\n@repository\r\nexport class PVPRoomRepo extends BaseRepository<PVPRoom> {\r\n\r\n\tget clazz(): Constructor<PVPRoom> { return PVPRoom; }\r\n\r\n}\r\n","import Node = cc.Node;\r\nimport {battleScene} from \"../../../../Scenes/BattleScene\";\r\nimport Label = cc.Label;\r\nimport {playerMgr, waitForLogin} from \"../../../PlayerModule/Managers/PlayerManager\";\r\nimport {PlayerBattle} from \"../../Data/PlayerBattle\";\r\nimport SkillItemContainer from \"./SkillItemContainer\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PVPWindowController extends cc.Component {\r\n\r\n\t@property(Node)\r\n\troomsSelectNode: Node = null;\r\n\t@property(Node)\r\n\tplayersSelectNode: Node = null;\r\n\t@property(Node)\r\n\theroesSelectNode: Node = null;\r\n\t@property(Node)\r\n\trankNode: Node = null;\r\n\t@property(Node)\r\n\tskillNode: Node = null;\r\n\r\n\t@property(Node)\r\n\tbattleChanceNode: Node = null;\r\n\t@property(Label)\r\n\tbattleChance: Label = null;\r\n\r\n\tfighting: boolean = false;\r\n\theroSelecting: boolean = true;\r\n\r\n\tprotected update(dt: number) {\r\n\t\tthis.updateNodes();\r\n\t\tif (this.fighting && battleScene().pvpBattle.isSettled) {\r\n\t\t\tbattleScene().endPVPBattle();\r\n\t\t\tthis.fighting = false;\r\n\t\t}\r\n\t}\r\n\r\n\tupdateNodes() {\r\n\t\tthis.roomsSelectNode.active = !this.fighting && !battleScene().roomSelected;\r\n\t\tthis.playersSelectNode.active = !this.fighting && battleScene().roomSelected;\r\n\t\tthis.battleChanceNode.active = !this.fighting;\r\n\t\tthis.heroesSelectNode.active = !this.fighting && this.heroSelecting;\r\n\t\tthis.rankNode.active = !this.fighting && !this.heroSelecting;\r\n\t\tthis.skillNode.active = this.fighting;\r\n\t}\r\n\r\n\tprotected onEnable() {\r\n\t\tthis.pvpBtn();\r\n\t\t// 当pvp界面打开时，如果上次已经上阵英雄，则将已选择上阵设置为true\r\n\t\tif (battleScene().currentPVPSelect) battleScene().heroSelected = true;\r\n\t\tthis.drawBattleChance();\r\n\t}\r\n\r\n\t@waitForLogin\r\n\tdrawBattleChance() {\r\n\t\tconst battle = playerMgr().getPlayerData(PlayerBattle)\r\n\t\tthis.battleChance.string = battle.battleChance.toString();\r\n\t}\r\n\r\n\tprotected onDisable() {\r\n\t\t// 当pvp界面隐藏时，重置部分选择\r\n\t\tbattleScene().roomSelected = false;\r\n\t\tbattleScene().heroSelected = false;\r\n\t\tbattleScene().currentPVPRoomIndex = -1;\r\n\t\tbattleScene().currentTargetSelect = null;\r\n\t}\r\n\r\n\tpvpBtn() {\r\n\t\tthis.heroSelecting = true;\r\n\t}\r\n\r\n\trankBtn() {\r\n\t\tthis.heroSelecting = false;\r\n\t}\r\n\r\n\tconfirmRoomBtn() {\r\n\t\tif (battleScene().currentPVPRoomIndex != -1)\r\n\t\t\tbattleScene().roomSelected = true;\r\n\t}\r\n\r\n\tbackBtn() {\r\n\t\tbattleScene().roomSelected = false;\r\n\t}\r\n\r\n\tconfirmBattleBtn() {\r\n\t\tbattleScene().startPVPBattle().then(() => {\r\n\t\t\tthis.skillNode.getComponent(SkillItemContainer)\r\n\t\t\t\t.setItems(battleScene().pvpBattle.selfBattler()\r\n\t\t\t\t\t.item.skills.filter(s => s.skillId > 1000).map(s => s.skill));\r\n\t\t});\r\n\t\tthis.fighting = true;\r\n\t}\r\n\r\n\trefreshBtn() {\r\n\t\t// if (true) {\r\n\t\t//     let items = BattleInterface.GetPVPPlayers();\r\n\t\t//     this.playersSelectNode.getComponent(PlayerCardContainer).setItems();\r\n\t\t// }\r\n\t}\r\n}\r\n","/**\r\n * 对字符串编码解码的工具，目前用来加密请求和返回结果的字符串。<p>\r\n * 基本原理是把字符串转为utf-8编码，然后对每一个byte进行位操作\r\n */\r\nexport class ParamCodec {\r\n    static charset: string = \"0123456789ABCDEF\";\r\n    static perms: number[][] = undefined;\r\n\r\n    /**\r\n     * 加密一个字符串\r\n     * @param params 要加密的字符串\r\n     */\r\n    public static encode(params: string): string {\r\n        if (this.perms == undefined) this.init();\r\n        let arr: Uint8Array = new TextEncoder().encode(params);\r\n        let seed = this.hash(arr);\r\n        let result = \"\";\r\n        for (let i = 0; i < 4; i++) {\r\n            result += this.charset[(seed >> (4 * i)) & 0xF];\r\n        }\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let ch = arr[i];\r\n            seed = this.nextInt(seed);\r\n            ch = this.shuffleByte(ch, this.perms[seed % 40320]);\r\n            let hi = ch >> 4;\r\n            let lo = ch & 0xF;\r\n            result += this.charset[hi] + this.charset[lo];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 解密一个被加密的字符串\r\n     * @param coded 被加密的字符串\r\n     * @return 字符串解密后的结果，如果传入的参数非法，则返回null\r\n     */\r\n    public static decode(coded: string): string {\r\n        if (this.perms == undefined) this.init();\r\n        let arr: Uint8Array = new TextEncoder().encode(coded);\r\n        if (arr.length < 4) return null;\r\n        if ((arr.length - 4) % 2 != 0) return null;\r\n        let seed = 0;\r\n        let result = [];\r\n        for (let i = 0, base = 1; i < 4; i++, base *= 16) {\r\n            let idx = this.charset.indexOf(String.fromCharCode(arr[i]));\r\n            if (idx < 0) return null;\r\n            seed += base * idx;\r\n        }\r\n        for (let i = 0; i < arr.length - 4; i += 2) {\r\n            let hi = this.charset.indexOf(String.fromCharCode(arr[i + 4]));\r\n            let lo = this.charset.indexOf(String.fromCharCode(arr[i + 5]));\r\n            if (hi < 0 || lo < 0) return null;\r\n            let ch = hi * 16 + lo;\r\n            seed = this.nextInt(seed);\r\n            ch = this.deshuffleByte(ch, this.perms[seed % 40320]);\r\n            result.push(ch)\r\n        }\r\n        let buf = new Uint8Array(result);\r\n        return new TextDecoder().decode(buf);\r\n    }\r\n\r\n    private static init() {\r\n        this.perms = [];\r\n        let p = [0, 1, 2, 3, 4, 5, 6, 7];\r\n        for (let i = 0; i < 40320; i++) {\r\n            this.perms.push(p.slice());\r\n            this.nextPermutation(p);\r\n        }\r\n        /*性能测试\r\n        let t = Date.now();\r\n        let teststr=\"1234567890\".repeat(100);\r\n        for (let i = 0; i < 5000; i++) {\r\n            let coded=this.encode(teststr);\r\n            if(this.decode(coded)!=teststr)\r\n                console.error(\"!!!\")\r\n        }\r\n        console.log((Date.now() - t) + \"ms\");*/\r\n    }\r\n\r\n    private static nextInt(seed: number) {\r\n        const A = 5461;\r\n        const C = 97;\r\n        const M = 65520;\r\n        return (seed * A + C) % M;\r\n    }\r\n\r\n    private static hash(arr: Uint8Array) {\r\n        let result = 43;\r\n        for (let i = 0; i < arr.length; i++)\r\n            result = (result * 97 + arr[i]) % 40320;\r\n        return result;\r\n    }\r\n\r\n    private static shuffleByte(bt: number, pm) {\r\n        let bts = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            bts[pm[i]] = bt % 2;\r\n            bt >>= 1;\r\n        }\r\n        return this.array2byte(bts);\r\n    }\r\n\r\n    private static deshuffleByte(bt: number, pm) {\r\n        let bts = [], un = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            bts[i] = bt % 2;\r\n            bt = bt >> 1;\r\n        }\r\n        for (let i = 0; i < 8; i++)\r\n            un[i] = bts[pm[i]];\r\n        return this.array2byte(un);\r\n    }\r\n\r\n    private static array2byte(arr) {\r\n        let w = 1, result = 0;\r\n        for (let i = 0; i < 8; i++) {\r\n            result += w * arr[i];\r\n            w *= 2;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private static nextPermutation(nums) {\r\n        let n = nums.length, i, j;\r\n        for (i = n - 2; i >= 0; i--) {\r\n            if (nums[i + 1] <= nums[i]) continue;\r\n            for (j = n - 1; j > i; j--)\r\n                if (nums[j] > nums[i]) break;\r\n            this.swap(nums, i, j);\r\n            this.reverse(nums, i + 1);\r\n            return;\r\n        }\r\n        nums.reverse();\r\n    }\r\n\r\n    private static swap(nums, i, j) {\r\n        let tmp = nums[i];\r\n        nums[i] = nums[j];\r\n        nums[j] = tmp;\r\n    }\r\n\r\n    private static reverse(nums, i) {\r\n        let n = nums.length - 1;\r\n        while (i < n) {\r\n            this.swap(nums, i, n);\r\n            i++;\r\n            n--;\r\n        }\r\n    }\r\n}","import {data, StaticData} from \"../../CoreModule/Data/StaticData\";\r\nimport {BaseRepository, getRepository, repository} from \"../../CoreModule/Data/BaseRepository\";\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\nimport {field} from \"../../CoreModule/Data/BaseData\";\r\nimport {QualityType} from \"./Quality\";\r\n\r\n// noinspection SpellCheckingInspection\r\nexport enum ParamType {\r\n\tCP, // Computing Power: 算力\r\n\tCPB, // Computing Power Bonus: 算力增幅\r\n\tHID, // HIDden: 隐藏属性\r\n\tPOW, // POWer: 力量\r\n\tAGI, // AGIle: 敏捷\r\n\tINT, // INTelligence: 智力\r\n\tPOWB, // POWer Bonus: 力量增幅\r\n\tAGIB, // AGIle Bonus: 敏捷增幅\r\n\tINTB, // INTelligence Bonus: 智力增幅\r\n\tATK, // ATtacK: 攻击\r\n\tCRI, // CRItical: 暴击\r\n\tDMG, // Damage: 伤害\r\n\tATKB, // ATtacK Bonus: 攻击增幅\r\n\tCRIB, // CRItical Bonus: 暴击增幅\r\n\tDMGB, // Damage Bonus: 伤害增幅\r\n\tDEF, // DEFense: 防御\r\n\tAVO, // AVOidance: 减伤\r\n\tEVA, // EVAsion: 闪避\r\n\tDEFB, // DEFense Bonus: 防御增幅\r\n\tAVOB, // AVOidance Bonus: 减伤增幅\r\n\tEVAB, // EVAsion Bonus: 闪避增幅\r\n\tMHP, // Max HP: 生命\r\n\tSPD, // SPeeD: 速度\r\n\tHIT, // HIT: 命中\r\n\tMHPB, // Max HP Bonus: 生命增幅\r\n\tSPDB, // SPeeD Bonus: 速度增幅\r\n\tHITB, // HIT Bonus: 命中增幅\r\n\tAB1, // All Bonus 1: 万能增幅1\r\n\tAB2, // All Bonus 2: 万能增幅2\r\n\tAB3, // All Bonus 3: 万能增幅3\r\n\tAB4, // All Bonus 4: 万能增幅4\r\n\r\n\t// 以下为额外属性\r\n\tBP, // Battle Point: 战力\r\n\tBPB, // Battle Point Bonus: 战力\r\n\r\n}\r\n\r\n@data(\"Param\")\r\nexport class Param extends StaticData {\r\n\r\n\t@field(Number)\r\n\tpublic id: ParamType;\r\n\t@field(String)\r\n\tpublic attr: string;\r\n\t@field\r\n\tpublic default_: number = 0;\r\n\t@field\r\n\tpublic min: number = 0;\r\n\t@field\r\n\tpublic max: number = 999999;\r\n\t@field\r\n\tpublic isPercent: boolean = false;\r\n\t@field([Number])\r\n\tpublic bonus: number[];\r\n\t@field\r\n\tpublic battlePoint: number = 0;\r\n\r\n\t/**\r\n\t * 缩写\r\n\t */\r\n\tpublic get shortName() { return ParamType[this.id]; }\r\n}\r\n\r\nexport function paramRepo() {\r\n\treturn getRepository(ParamRepo);\r\n}\r\n\r\n@repository\r\nexport class ParamRepo extends BaseRepository<Param> {\r\n\r\n\tget clazz(): Constructor<Param> { return Param; }\r\n\r\n\tgetById(id: ParamType): Param {\r\n\t\treturn super.getById(id);\r\n\t}\r\n\r\n\t// @ts-ignore\r\n\tgetByAttr(attr: string): Param {}\r\n\r\n}\r\n","import {ItemContainer} from \"../../../../Modules/CoreModule/Components/ItemContainer\";\r\nimport {PartInfo} from \"../../../../Modules/HeroModule/Data/PartInfo\";\r\nimport PartsDisplay from \"../ItemPrefabs/PartsDisplay\";\r\nimport PreviewPictureDisplay from \"../ItemPrefabs/PreviewPictureDisplay\";\r\nimport PartsSelectionGroup from \"./PartsSelectionGroup\";\r\nimport SingleEditor from \"../Editor/SingleEditor\";\r\nimport {ScrollviewFilter} from \"../../../../Modules/CoreModule/Utils/ScrollviewFilter\";\r\nimport {PartType} from \"../../../../Modules/HeroModule/Data/PartType\";\r\nimport PartsSelection from \"../ItemPrefabs/PartsSelection\";\r\nimport {HeroType} from \"../../../../Modules/HeroModule/Data/HeroType\";\r\nimport {partMgr} from \"../../../../Modules/HeroModule/Managers/PartManager\";\r\nimport {DefaultBt1, DefaultBt2} from \"../../../../Modules/NFTModule/Managers/NFTManager\";\r\nimport PartScaler from \"../ItemPrefabs/PartScaler\";\r\nimport {Part} from \"../../../../Modules/HeroModule/Data/Part\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PartColorsContainer extends ItemContainer<PartInfo, PartsDisplay> {\r\n\r\n    @property(PreviewPictureDisplay)\r\n    preview: PreviewPictureDisplay = null;\r\n\r\n    selectionGroup: PartsSelectionGroup = null;\r\n    singleEditor: SingleEditor = null;\r\n    partScaler: PartScaler = null;\r\n\r\n    // region 数据控制\r\n\r\n    /**\r\n     * 英雄数据\r\n     */\r\n    public get hero() { return this.preview.item }\r\n\r\n    /**\r\n     * 部件类型ID\r\n     */\r\n    public get partTypeId() { return this.items[0]?.partTypeId; }\r\n\r\n    // endregion\r\n\r\n    // region 更新控制\r\n\r\n    /**\r\n     * 更新\r\n     */\r\n    protected update(dt: number) {\r\n        let nodes = this.itemsComponents\r\n            .map(item => item.node).filter(node => node.active);\r\n        ScrollviewFilter.filter(\"vertical\", this.container,\r\n            nodes, 20, this.node.height, 20,\r\n            Math.floor(this.container.width / 120));\r\n    }\r\n\r\n    //endregion\r\n\r\n    // region 操作控制\r\n\r\n    /**\r\n     * 构建选择Group\r\n     */\r\n    private makeSelectionGroup(){\r\n        this.selectionGroup = new PartsSelectionGroup();\r\n        this.itemsComponents.forEach(item => {\r\n            let selection = item.node.getComponent(PartsSelection);\r\n            selection.display = selection.getComponent(PartsDisplay);\r\n            selection.container = this;\r\n            this.selectionGroup.addElement(selection);\r\n        })\r\n        this.selectionGroup.select(this.selectionGroup.getElementAt(0));\r\n        this.node.active = true;\r\n    }\r\n\r\n    // endregion\r\n\r\n    // region 回调控制\r\n\r\n    /**\r\n     * ItemDisplay创建回调\r\n     * @param display\r\n     */\r\n    public onItemDisplayCreated(display: PartsDisplay) {\r\n        display.preview = this.preview;\r\n    }\r\n\r\n    /**\r\n     * 数据改变回调\r\n     */\r\n    public onItemsChanged() {\r\n        super.onItemsChanged();\r\n        this.makeSelectionGroup();\r\n    }\r\n\r\n    public currentHeroType: HeroType = null;\r\n    public currentPartType: PartType = null;\r\n\r\n    /**\r\n     * 英雄类型变化回调\r\n     */\r\n    public async onHeroTypeChange() {\r\n        await this.preview.setHeroType(this.currentHeroType);\r\n    }\r\n\r\n    /**\r\n     * 部件类型变化回调\r\n     */\r\n    public async onTypeChange() {\r\n        if (!this.currentHeroType || !this.currentPartType) return;\r\n        this.setItems(await partMgr().getList(\r\n            DefaultBt1, DefaultBt2, this.currentPartType));\r\n    }\r\n\r\n    /**\r\n     * 选择回调\r\n     */\r\n    public onSelectChanged(item: PartsDisplay) {\r\n        this.preview.addPart(item.item.part);\r\n        this.singleEditor?.setItem(item.item);\r\n        this.partScaler?.setItem(item.item);\r\n        this.node.active = false;\r\n    }\r\n\r\n    /**\r\n     * 取消选择回调\r\n     */\r\n    public onSelectCancel(item: PartsDisplay) {\r\n        this.selectionGroup.select(item.node.getComponent(PartsSelection));\r\n        this.singleEditor?.setItem(null);\r\n        this.partScaler?.setItem(null);\r\n    }\r\n\r\n    public reselect(last: Part) {\r\n        let i = this.itemsComponents.findIndex(i => i.item.part == last);\r\n        if (i < 0) return;\r\n        this.selectionGroup.select(this.selectionGroup.getElementAt(i));\r\n        this.node.active = true;\r\n    }\r\n\r\n    // endregion\r\n\r\n}\r\n","import {BaseConfig, config} from \"../../CoreModule/Data/BaseConfig\";\r\nimport {field} from \"../../CoreModule/Data/BaseData\";\r\n\r\n@config(\"PartConfig\")\r\nexport default class PartConfig extends BaseConfig {\r\n\r\n\t// @field\r\n\t// srcPartIds: number[] = [];\r\n\t//\r\n\t// @field\r\n\t// tarPartIds: number[] = [];\r\n\t//\r\n\t@field // 槽层次配置\r\n\tslotOrders: {[T: string]: number} = {}\r\n\r\n\t@field // 槽名称映射，用于在不影响骨骼名情况下添加部件类型\r\n\tslotNameMap: {[T: string]: string} = {}\r\n\r\n\t@field // PartType → HeroType 的缩放设置\r\n\tpHtScale: number[][][] = [\r\n\t\t// 三个下标分别表示：候选部件A的PartTypeId, A的HeroTypeId, 当前HeroTypeId\r\n\t\t// 当玩家选择A时，应用ptHtScale[A.partTypeId][A.heroTypeId][当前HeroTypeId]的缩放值\r\n\t\t// 缩放值设置为0时，表示互斥\r\n\r\n\t];\r\n\r\n\t@field // PartType → Base PartType 的缩放设置，key: oriId-bOriId\r\n\tptBptScale: {[T: string]: number} = {};\r\n\t// ptBptScale: [number, number, number][] = [\r\n\t// \t// 三个参数分别表示：候选部件A的oriId, 已有部件B的oriId, 缩放值C\r\n\t// \t// （需满足前提：A.partType.baseTypeId == B.partTypeId，否则不生效）\r\n\t// \t// 当玩家选择A时，如果当前已经装备了B，则A应用C缩放\r\n\t// \t// 如果C为0，表示A无法装备到B上，需要在界面中排除掉\r\n\t//\r\n\t// ];\r\n\r\n\t@field // PartType → Base PartType 的偏移设置，key: oriId-bOriId\r\n\tptBptOffset: {[T: string]: [number, number]} = {};\r\n\t// ptBptOffset: [number, number, [number, number]][] = [\r\n\t// \t// 三个参数分别表示：候选部件A的oriId, 已有部件B的oriId, 缩放值C\r\n\t// \t// （需满足前提：A.partType.baseTypeId == B.partTypeId，否则不生效）\r\n\t// \t// 当玩家选择A时，如果当前已经装备了B，则A应用C偏移量\r\n\t// \t// 如果C为0，表示A无法装备到B上，需要在界面中排除掉\r\n\t//\r\n\t// ];\r\n\r\n\t@field // PartType → Base PartType 的隐藏设置，key: oriId-bOriId\r\n\tptBptHidden: {[T: string]: string[]} = {};\r\n\t// ptBptHidden: [number, number, string[]][] = [\r\n\t// \t// 三个参数分别表示：候选部件A的oriId, 已有部件B的oriId, 缩放值C\r\n\t// \t// （需满足前提：A.partType.baseTypeId == B.partTypeId，否则不生效）\r\n\t// \t// 当玩家选择A时，如果当前已经装备了B，则A应用C隐藏\r\n\t//\r\n\t// ];\r\n\r\n\t@field // clothes6问题，key: oriId-hOriId\r\n\tclothes6Problem: {[T: string]: boolean} = {};\r\n\r\n\t@field // clothes6问题，key: oriId-bOriId\r\n\tweapon3Problem: {[T: string]: boolean} = {};\r\n\r\n\t@field // 每个body的offset\r\n\tfootOffset: {[T: number]: [number, number]} = {};\r\n\r\n}\r\n","import {BaseData} from \"../../CoreModule/Data/BaseData\";\r\nimport {Web3NFTComponentData} from \"../../NFTModule/Utils/Web3\";\r\nimport {Part, partRepo} from \"./Part\";\r\n\r\nexport class PartInfo extends BaseData {\r\n\r\n\tpublic partId: number; // 组件ID\r\n\tpublic name: string = \"\"; // 组件名称\r\n\tpublic partTypeId: number = -1; // 组件类别\r\n\tpublic price: number = 0; // 组件价格\r\n\tpublic stock: number = 0; // 组件库存\r\n\tpublic url: string = \"\"; // 图片地址\r\n\t// public ban: boolean = false; // 冲突\r\n\r\n\tpublic rawData: Web3NFTComponentData; // 原始数据\r\n\r\n\tprivate _part: Part;\r\n\tpublic get part(): Part {\r\n\t\treturn this._part ||= partRepo().getById(this.partId);\r\n\t}\r\n}\r\n","import {BaseManager, getManager, manager} from \"../../CoreModule/Managers/BaseManager\";\r\nimport {PartType} from \"../Data/PartType\";\r\nimport {Web3NFTComponentData, Web3NFTData} from \"../../NFTModule/Utils/Web3\";\r\nimport {\r\n\tnftMgr,\r\n\tnftMakeId2PartId,\r\n\tPartTypeIdOffset,\r\n\tWeb3Enable\r\n} from \"../../NFTModule/Managers/NFTManager\";\r\nimport {PartInfo} from \"../Data/PartInfo\";\r\nimport {partRepo} from \"../Data/Part\";\r\n\r\nconst UseTestData = true;\r\n\r\nexport function partMgr() {\r\n\treturn getManager(PartManager);\r\n}\r\n\r\n@manager\r\nclass PartManager extends BaseManager {\r\n\r\n\tpublic data = {};\r\n\r\n\t/**\r\n\t * 获取单个组件\r\n\t */\r\n\tpublic async getOne(bt1: number, bt2: number, partType: PartType,\r\n\t\t\t\t\t\t\t\t\t\t\tid: number, refresh?: boolean) {\r\n\t\tconst list = await this.getList(bt1, bt2, partType, refresh);\r\n\t\treturn list?.find(d => d.partId == id);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取类别下的组件（带缓存）\r\n\t */\r\n\tpublic async getList(bt1: number, bt2: number,\r\n\t\t\t\t\t\t\t\t\t\t\t partType: PartType, refresh?: boolean) {\r\n\t\tlet res = this.getCacheList(bt1, bt2, partType);\r\n\r\n\t\t// 如果没有缓存或强制刷新\r\n\t\tif (!res || refresh)\r\n\t\t\tif (UseTestData || !Web3Enable) {\r\n\t\t\t\tconst parts = partRepo().findByPartTypeId(partType.id);\r\n\t\t\t\tres = this.data[this.getKey(bt1, bt2, partType)] =\r\n\t\t\t\t\tparts.map(p => p.toPartInfo());\r\n\t\t\t} else {\r\n\t\t\t\tlet tmp = await nftMgr().getPartList(bt1, bt2, partType);\r\n\t\t\t\ttmp = tmp.filter(d => this.isValid(d));\r\n\t\t\t\ttmp.forEach(d => this.add(bt1, bt2, partType, d));\r\n\t\t\t\tres = this.getCacheList(bt1, bt2, partType);\r\n\t\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * 获取缓存单个英雄数据\r\n\t */\r\n\tpublic getCacheOne(bt1: number, bt2: number, partType: PartType, id: number) {\r\n\t\tconst list = this.getCacheList(bt1, bt2, partType);\r\n\t\treturn list?.find(d => d.partId == id);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取缓存列表数据\r\n\t */\r\n\tpublic getCacheList(bt1: number, bt2: number, partType: PartType): PartInfo[] {\r\n\t\treturn this.data[this.getKey(bt1, bt2, partType)];\r\n\t}\r\n\tpublic getOrCreateCacheList(bt1: number, bt2: number, partType: PartType): PartInfo[] {\r\n\t\treturn this.data[this.getKey(bt1, bt2, partType)] ||= [];\r\n\t}\r\n\r\n\t/**\r\n\t * 添加组件\r\n\t */\r\n\tprivate add(bt1: number, bt2: number, partType: PartType,\r\n\t\t\t\t\t\t\tdata: Web3NFTComponentData) {\r\n\t\tconst pid = nftMakeId2PartId(Number(data.componentId));\r\n\t\tconst list = this.getOrCreateCacheList(bt1, bt2, partType);\r\n\r\n\t\t// 获取缓存中单个数据\r\n\t\tlet res = this.getCacheOne(bt1, bt2, partType, pid);\r\n\t\t// 如果不存在数据，加到列表里\r\n\t\tif (!res) list.push(res = new PartInfo());\r\n\t\t// 转换数据\r\n\t\treturn this.convert(data, res);\r\n\t}\r\n\r\n\tprivate getKey(bt1: number, bt2: number, partType: PartType) {\r\n\t\treturn bt1 + \"_\" + bt2 + \"_\" + partType.id;\r\n\t}\r\n\r\n\tprivate isValid(data: Web3NFTComponentData) {\r\n\t\tconst pid = nftMakeId2PartId(Number(data.componentId));\r\n\t\treturn !!partRepo().getById(pid); // DataUtils.part(pid, \"id\");\r\n\t}\r\n\r\n\tpublic convert(data: Web3NFTComponentData, res?: PartInfo): PartInfo {\r\n\t\tres ||= new PartInfo();\r\n\t\tres.partId = nftMakeId2PartId(Number(data.componentId));\r\n\t\tres.name = data.name;\r\n\t\tres.partTypeId = Number(data.ct) - PartTypeIdOffset;\r\n\t\tres.price = nftMgr().convertPrice(data.prices[0].price);\r\n\t\tres.stock = Number(data.stock);\r\n\t\tres.rawData = data;\r\n\t\treturn res;\r\n\t}\r\n\r\n}\r\n","import {ItemDisplay} from \"../../../../Modules/CoreModule/Components/ItemDisplay\";\r\nimport Label = cc.Label;\r\nimport Node = cc.Node;\r\nimport {PartInfo} from \"../../../../Modules/HeroModule/Data/PartInfo\";\r\nimport {selectorScene} from \"../../SelectorScene\";\r\nimport PartsDisplay from \"../ItemPrefabs/PartsDisplay\";\r\nimport PreviewPictureDisplay from \"../ItemPrefabs/PreviewPictureDisplay\";\r\nimport {configMgr} from \"../../../../Modules/CoreModule/Managers/ConfigManager\";\r\nimport PartConfig from \"../../../../Modules/HeroModule/Configs/PartConfig\";\r\nimport Slider = cc.Slider;\r\nimport PartsContainer from \"../ItemContainers/PartsContainer\";\r\nimport EditBox = cc.EditBox;\r\nimport {editorMgr} from \"../../../../Modules/HeroModule/Managers/EditorManager\";\r\nimport TransformUtil from \"../../../../Utils/TransformUtils\";\r\nimport {partTypeRepo} from \"../../../../Modules/HeroModule/Data/PartType\";\r\nimport Button = cc.Button;\r\nimport {partRepo} from \"../../../../Modules/HeroModule/Data/Part\";\r\nimport PartColorsContainer from \"../ItemContainers/PartColorsContainer\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nconst MaxScale = 1.4;\r\nconst MinScale = 0.6;\r\n\r\n@ccclass\r\nexport default class PartScaler extends ItemDisplay<PartInfo> {\r\n\r\n\t@property(PartColorsContainer)\r\n\tpartsContainer: PartColorsContainer = null;\r\n\r\n\t@property(Label)\r\n\tpartTypeName: Label = null;\r\n\t@property(Slider)\r\n\tscaleBar: Slider = null;\r\n\r\n\t@property(PreviewPictureDisplay)\r\n\tpreview: PreviewPictureDisplay = null\r\n\r\n\tprotected onLoad() {\r\n\t\tthis.partsContainer.partScaler = this;\r\n\t}\r\n\r\n\t// region 数据获取\r\n\r\n\tpublic get part() { return this.item?.part; }\r\n\tpublic get partType() { return this.part?.partType; }\r\n\tpublic get basePartType() { return this.partType?.basePartType; }\r\n\tpublic get basePart() { return this.basePartType ?\r\n\t\tthis.preview.item?.findPart(this.basePartType) : null;\r\n\t}\r\n\r\n\tpublic get partSetting() {\r\n\t\treturn this.preview.item.getPartSetting(this.item.partId);\r\n\t}\r\n\r\n\tpublic get scale() { return this.partSetting.scale; }\r\n\tpublic set scale(val) { this.partSetting.scale = val; }\r\n\r\n\t// endregion\r\n\r\n\t// region 刷新控制\r\n\r\n\trefresh() {\r\n\t\tsuper.refresh();\r\n\r\n\t\tthis.preview.refresh();\r\n\r\n\t\tif (this.item == null) return;\r\n\r\n\t\tthis.drawScale();\r\n\t}\r\n\tprivate drawScale() {\r\n\t\tconst scale = this.scale;\r\n\t\tthis.partTypeName.string = this.partType.getDisplayName();\r\n\t\tthis.scaleBar.progress = (scale - MinScale) / (MaxScale - MinScale);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 操作\r\n\r\n\t/**\r\n\t * 设置缩放\r\n\t */\r\n\tpublic setScale(scale) {\r\n\t\tthis.scale = scale;\r\n\t\tthis.refresh();\r\n\t}\r\n\r\n\t/**\r\n\t * 重置\r\n\t */\r\n\tpublic reset() {\r\n\t\tthis.setScale(1);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 回调\r\n\r\n\tpublic onScaleSlide() {\r\n\t\tconst rate = this.scaleBar.progress;\r\n\t\tthis.setScale(rate * (MaxScale - MinScale) + MinScale);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n}\r\n","import {ItemContainer} from \"../../../../Modules/CoreModule/Components/ItemContainer\";\r\nimport {PartType, partTypeRepo} from \"../../../../Modules/HeroModule/Data/PartType\";\r\nimport PartsContainer from \"./PartsContainer\";\r\nimport {ScrollviewFilter} from \"../../../../Modules/CoreModule/Utils/ScrollviewFilter\";\r\nimport Node = cc.Node;\r\nimport PartTypeDisplay from \"../ItemPrefabs/PartTypeDisplay\";\r\nimport PartTypeSelectionGroup from \"./PartTypeSelectionGroup\";\r\nimport PartTypeSelection from \"../ItemPrefabs/PartTypeSelection\";\r\nimport {waitForLogin} from \"../../../../Modules/PlayerModule/Managers/PlayerManager\";\r\nimport {waitForDataLoad} from \"../../../../Modules/CoreModule/Managers/DataManager\";\r\nimport GlobalEditor from \"../Editor/GlobalEditor\";\r\nimport Boolean = cc.Boolean;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PartTypeContainer extends ItemContainer<PartType, PartTypeDisplay> {\r\n\r\n\t@property(PartsContainer)\r\n\tpartsContainer: PartsContainer = null;\r\n\t@property(Boolean)\r\n\tincludeBackground: boolean = true;\r\n\r\n\t@property(PartTypeContainer)\r\n\trelative: PartTypeContainer = null;\r\n\r\n\tselectionGroup: PartTypeSelectionGroup = null;\r\n\tglobalEditor: GlobalEditor = null;\r\n\r\n\t// region 数据控制\r\n\r\n\tisInclude(item: PartType): boolean {\r\n\t\treturn super.isInclude(item) && (this.includeBackground || !item.isBackground);\r\n\t}\r\n\r\n\tprivate makeSelectionGroup(){\r\n\t\tthis.selectionGroup = new PartTypeSelectionGroup(false);\r\n\t\tthis.itemsComponents.forEach(item => {\r\n\t\t\tlet selection = item.node.getComponent(PartTypeSelection)\r\n\t\t\tselection.display = selection.getComponent(PartTypeDisplay)\r\n\t\t\tselection.container = this;\r\n\t\t\tthis.selectionGroup.addElement(selection);\r\n\t\t})\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t//region 更新控制\r\n\r\n\tprotected start() {\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t@waitForDataLoad\r\n\tsetup() {\r\n\t\tthis.setItems(partTypeRepo().list);\r\n\t}\r\n\r\n\tprotected update(dt: number) {\r\n\t\tthis.itemsComponents.forEach(i => i.node.active ? i.size = this.container.width / this.items.length : null);\r\n\t\t// let nodes : Node[] = [];\r\n\t\t// this.itemsComponents.forEach(item => { if(item.node.active == true) nodes.push(item.node) })\r\n\t\t// ScrollviewFilter.filter(\"horizontal\", this.container, nodes, 10, this.node.width);\r\n\t}\r\n\r\n\t//endregion\r\n\r\n\t//region 回调控制\r\n\r\n\tonItemsChanged() {\r\n\t\tsuper.onItemsChanged();\r\n\t\tthis.makeSelectionGroup();\r\n\t}\r\n\r\n\tpublic onSelectChanged(item: PartTypeDisplay) {\r\n\t\tif (this.relative) {\r\n\t\t\tconst curSel = this.selectionGroup.currentSelection();\r\n\t\t\tconst index = this.selectionGroup.indexOf(curSel);\r\n\t\t\tconst relSelGroup = this.relative?.selectionGroup;\r\n\t\t\trelSelGroup.select(relSelGroup.getElementAt(index));\r\n\t\t}\r\n\t\tif (this.partsContainer) {\r\n\t\t\tthis.partsContainer.optional = item.item.optional;\r\n\t\t\tthis.partsContainer.currentPartType = item.item;\r\n\t\t\tthis.partsContainer.onTypeChange().then();\r\n\t\t}\r\n\t\tthis.globalEditor?.setItem(item.item);\r\n\t}\r\n\r\n\t//endregion\r\n\r\n}\r\n","import {ItemDisplay} from \"../../../../Modules/CoreModule/Components/ItemDisplay\";\r\nimport {PartType} from \"../../../../Modules/HeroModule/Data/PartType\";\r\nimport Label = cc.Label;\r\nimport Node = cc.Node;\r\nimport Color = cc.Color;\r\nimport {selectorScene} from \"../../SelectorScene\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PartTypeDisplay extends ItemDisplay<PartType> {\r\n\r\n\t@property(Label)\r\n\tlabel: Label = null;\r\n\t@property(Node)\r\n\tbackground: Node = null;\r\n\t@property(Node)\r\n\tbottomLine: Node = null;\r\n\r\n\tpublic size: number = 0;\r\n\r\n\tprivate isSelected: boolean = false;\r\n\r\n\tstart () { }\r\n\r\n\t//region 更新控制\r\n\r\n\trefresh(){\r\n\t\tsuper.refresh();\r\n\t\tif (this.item == null) return;\r\n\t\tthis.isSelected = false;\r\n\t\tthis.label.string = this.item.getDisplayName();\r\n\t\tif (selectorScene().editorMode)\r\n\t\t\tthis.label.string = `${this.item.id} ${this.label.string}`;\r\n\t}\r\n\r\n\tprotected update(dt: number) {\r\n\t\tthis.node.width = Math.max(this.size, 40);\r\n\t\tthis.bottomLine.width = this.node.width + 10;\r\n\t\tthis.label.node.color = this.isSelected ? new Color(255, 255, 255) : new Color(159, 157, 180);\r\n\t\tthis.bottomLine.opacity = this.isSelected ? 255 : 0;\r\n\t\t// this.background.opacity = this.isSelected ? 255 : 0;\r\n\t}\r\n\r\n\t//endregion\r\n\r\n\t//region 回调控制\r\n\r\n\tpublic onSelectChanged(select: boolean){\r\n\t\tthis.isSelected = select;\r\n\t}\r\n\r\n\t//endregion\r\n\r\n}\r\n","import {SelectableGroup} from \"../../../../Modules/CoreModule/Components/SelectableGroup\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PartTypeSelectionGroup extends SelectableGroup {\r\n\r\n}","import {SelectableObject} from \"../../../../Modules/CoreModule/Components/SelectableObject\";\r\nimport PartTypeDisplay from \"./PartTypeDisplay\";\r\nimport PartTypeContainer from \"../ItemContainers/PartTypeContainer\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PartTypeSelection extends SelectableObject {\r\n\r\n    display: PartTypeDisplay = null;\r\n    container: PartTypeContainer = null;\r\n\r\n    //region 回调控制\r\n\r\n    onDeselected(): void {\r\n        this.display.onSelectChanged(false);\r\n    }\r\n\r\n    onSelected(): void {\r\n        this.display.onSelectChanged(true);\r\n        this.container.onSelectChanged(this.display);\r\n    }\r\n\r\n    //endregion\r\n\r\n}\r\n","import {BaseRepository, getRepository, repository} from \"../../CoreModule/Data/BaseRepository\";\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\nimport {data, StaticData} from \"../../CoreModule/Data/StaticData\";\r\nimport {field} from \"../../CoreModule/Data/BaseData\";\r\n\r\nexport enum SpecialPartType {\r\n\tNormal, Body, Head, Clothes, Foot, Weapon, Background //,Suit\r\n}\r\n\r\n@data(\"PartType\")\r\nexport class PartType extends StaticData {\r\n\r\n\t@field\r\n\tpublic name: string = \"\";\r\n\t@field\r\n\tpublic baseTypeId: number = -1; // 基于的类型ID\r\n\t@field\r\n\tpublic special: SpecialPartType = SpecialPartType.Normal;\r\n\t@field\r\n\tpublic optional: boolean = false;\r\n\t@field([String])\r\n\tpublic slotNames: string[] = [];\r\n\r\n\tpublic get isBody() {return this.special == SpecialPartType.Body;}\r\n\tpublic get isHead() {return this.special == SpecialPartType.Head;}\r\n\tpublic get isClothes() {return this.special == SpecialPartType.Clothes;}\r\n\tpublic get isFoot() {return this.special == SpecialPartType.Foot;}\r\n\tpublic get isWeapon() {return this.special == SpecialPartType.Weapon;}\r\n\tpublic get isBackground() {return this.special == SpecialPartType.Background;}\r\n\r\n\t/**\r\n\t * 基类型列表\r\n\t */\r\n\tpublic get basePartType() {\r\n\t\treturn this.baseTypeId < 0 ? null :\r\n\t\t\tpartTypeRepo().getById(this.baseTypeId);\r\n\t}\r\n\r\n\t/**\r\n\t * 子类型列表\r\n\t */\r\n\tpublic get subPartTypes() {\r\n\t\treturn partTypeRepo().findByBaseTypeId(this.id);\r\n\t}\r\n}\r\n\r\nexport function partTypeRepo() {\r\n\treturn getRepository(PartTypeRepo);\r\n}\r\n\r\n@repository\r\nexport class PartTypeRepo extends BaseRepository<PartType> {\r\n\r\n\tget clazz(): Constructor<PartType> { return PartType; }\r\n\r\n\t// @ts-ignore\r\n\tpublic findByBaseTypeId(bptId: number): PartType[] {}\r\n\t// @ts-ignore\r\n\tpublic getBySpecial(special: SpecialPartType): PartType {}\r\n\r\n\t/**\r\n\t * 根PartType\r\n\t */\r\n\tpublic rootPartTypes() {\r\n\t\treturn this.findByBaseTypeId(-1);\r\n\t}\r\n\r\n\t/**\r\n\t * 类型\r\n\t */\r\n\tpublic get body() { return this.getBySpecial(SpecialPartType.Body); }\r\n\tpublic get head() { return this.getBySpecial(SpecialPartType.Head); }\r\n\tpublic get clothes() { return this.getBySpecial(SpecialPartType.Clothes); }\r\n\tpublic get foot() { return this.getBySpecial(SpecialPartType.Foot); }\r\n\tpublic get weapon() { return this.getBySpecial(SpecialPartType.Weapon); }\r\n\tpublic get background() { return this.getBySpecial(SpecialPartType.Background); }\r\n}\r\n","import {ItemContainer} from \"../../../../Modules/CoreModule/Components/ItemContainer\";\r\nimport PartsDisplay from \"../ItemPrefabs/PartsDisplay\";\r\nimport PartsSelection from \"../ItemPrefabs/PartsSelection\";\r\nimport PartsSelectionGroup from \"./PartsSelectionGroup\";\r\nimport {ScrollviewFilter} from \"../../../../Modules/CoreModule/Utils/ScrollviewFilter\";\r\nimport PreviewPictureDisplay from \"../ItemPrefabs/PreviewPictureDisplay\";\r\nimport {PartInfo} from \"../../../../Modules/HeroModule/Data/PartInfo\";\r\nimport {PartType, SpecialPartType} from \"../../../../Modules/HeroModule/Data/PartType\";\r\nimport {HeroType} from \"../../../../Modules/HeroModule/Data/HeroType\";\r\nimport {partMgr} from \"../../../../Modules/HeroModule/Managers/PartManager\";\r\nimport {DefaultBt1, DefaultBt2} from \"../../../../Modules/NFTModule/Managers/NFTManager\";\r\nimport {selectorScene} from \"../../SelectorScene\";\r\nimport SingleEditor from \"../Editor/SingleEditor\";\r\nimport PartColorsContainer from \"./PartColorsContainer\";\r\nimport PartScaler from \"../ItemPrefabs/PartScaler\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PartsContainer extends ItemContainer<PartInfo, PartsDisplay> {\r\n\r\n\t@property(PreviewPictureDisplay)\r\n\tpreview: PreviewPictureDisplay = null;\r\n\t@property(PartColorsContainer)\r\n\tcolors: PartColorsContainer = null;\r\n\r\n\toptional: boolean = false;\r\n\tselectionGroup: PartsSelectionGroup = null;\r\n\tsingleEditor: SingleEditor = null;\r\n\tpartScaler: PartScaler = null;\r\n\r\n\t// banList: number[] = [];\r\n\r\n\t// region 数据控制\r\n\r\n\t/**\r\n\t * 英雄数据\r\n\t */\r\n\tpublic get hero() { return this.preview.item }\r\n\r\n\t/**\r\n\t * 部件类型ID\r\n\t */\r\n\tpublic get partTypeId() { return this.items[0]?.partTypeId; }\r\n\r\n\t/**\r\n\t * 获取上一次选择\r\n\t */\r\n\tprivate get lastSelection() {\r\n\t\treturn this.items.length <= 0 ? null :\r\n\t\t\tthis.hero?.parts.find(t => t.partTypeId == this.partTypeId);\r\n\t}\r\n\r\n\t/**\r\n\t * 是否包含\r\n\t * @param item\r\n\t */\r\n\tisInclude(item: PartInfo): boolean {\r\n\t\tif (selectorScene().editorMode && !this.currentPartType.isBody) return true;\r\n\t\treturn !this.preview.item || this.preview.item.calcScale(item.part) > 0;\r\n\r\n\t\t// if (!this.preview.item) {\r\n\t\t// \tconst config = configMgr().config(PartConfig);\r\n\t\t// \tconst ptId = item.partTypeId,\r\n\t\t// \t\thtId = item.part.heroTypeId,\r\n\t\t// \t\tchtId = this.currentHeroType.id;\r\n\t\t//\r\n\t\t// \treturn config.pHtScale[ptId]?.[htId]?.[chtId] > 0 &&\r\n\t\t// \t\t!this.preview.banList.includes(item.part.oriId);\r\n\t\t// } else\r\n\t\t// \treturn this.preview.item?.calcScale(item.part) > 0;\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 更新控制\r\n\r\n\t/**\r\n\t * 更新\r\n\t */\r\n\tprotected update(dt: number) {\r\n\t\tlet nodes = this.itemsComponents\r\n\t\t\t.map(item => item.node).filter(node => node.active);\r\n\t\tScrollviewFilter.filter(\"vertical\", this.container,\r\n\t\t\tnodes, 20, this.node.height, 20,\r\n\t\t\tMath.floor(this.container.width / 120));\r\n\r\n\t\tif (this.preview.partsChanged) this.onPartsChanged();\r\n\t}\r\n\r\n\t//endregion\r\n\r\n\t// region 操作控制\r\n\r\n\t/**\r\n\t * 重选\r\n\t * @private\r\n\t */\r\n\tprivate reselect() {\r\n\t\tif (this.currentPartType.special == SpecialPartType.Background) {\r\n\t\t\tconst last = this.items.find(p => p.part == this.preview.backgroundPart);\r\n\t\t\tif (last)\r\n\t\t\t\tthis.selectionGroup.select(this.selectionGroup.getElementAt(\r\n\t\t\t\t\tthis.items.findIndex(item => item.partId == last.part.id)));\r\n\t\t\telse\r\n\t\t\t\tthis.selectionGroup.select(this.selectionGroup.getElementAt(0));\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst last = this.lastSelection;\r\n\t\tif (!last) // 如果没有选择\r\n\t\t\tthis.selectionGroup.deselect(\r\n\t\t\t\tthis.selectionGroup.currentSelection());\r\n\t\telse {\r\n\t\t\tthis.selectionGroup.select(this.selectionGroup.getElementAt(\r\n\t\t\t\tthis.items.findIndex(item => item.partId == last.oriId)));\r\n\t\t\tthis.colors.reselect(last);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 构建选择Group\r\n\t */\r\n\tprivate makeSelectionGroup(){\r\n\t\tthis.selectionGroup = new PartsSelectionGroup(this.optional)\r\n\t\tthis.itemsComponents.forEach(item => {\r\n\t\t\tlet selection = item.node.getComponent(PartsSelection);\r\n\t\t\tselection.display = selection.getComponent(PartsDisplay);\r\n\t\t\tselection.container = this;\r\n\t\t\tthis.selectionGroup.addElement(selection);\r\n\t\t})\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 回调控制\r\n\r\n\t/**\r\n\t * ItemDisplay创建回调\r\n\t * @param display\r\n\t */\r\n\tpublic onItemDisplayCreated(display: PartsDisplay) {\r\n\t\tdisplay.preview = this.preview;\r\n\t}\r\n\r\n\t/**\r\n\t * 数据改变回调\r\n\t */\r\n\tpublic onItemsChanged() {\r\n\t\tsuper.onItemsChanged();\r\n\t\tconst last = this.lastSelection;\r\n\t\tthis.makeSelectionGroup();\r\n\t\tthis.preview.addPart(last);\r\n\t\tthis.reselect();\r\n\t\tif (this.colors)\r\n\t\t\tthis.colors.node.active = false;\r\n\t}\r\n\r\n\tpublic currentHeroType: HeroType = null;\r\n\tpublic currentPartType: PartType = null;\r\n\tprivate currentTotalParts: PartInfo[] = [];\r\n\r\n\t/**\r\n\t * 英雄类型变化回调\r\n\t */\r\n\tpublic async onHeroTypeChange() {\r\n\t\tawait this.preview.setHeroType(this.currentHeroType);\r\n\t}\r\n\r\n\t/**\r\n\t * 部件类型变化回调\r\n\t */\r\n\tpublic async onTypeChange() {\r\n\t\tif (!this.currentHeroType || !this.currentPartType) return;\r\n\t\tthis.currentTotalParts = await partMgr().getList(DefaultBt1, DefaultBt2, this.currentPartType);\r\n\t\tthis.setItems(this.currentTotalParts.filter(p => p.part.id == p.part.oriId));\r\n\r\n\t\t// partMgr().getList(DefaultBt1, DefaultBt2,\r\n\t\t//   this.currentPartType).then((res) => {\r\n\t\t//     res = res.filter(p => this.currentPartType.exclusion\r\n\t\t//       [this.currentHeroType.id]?.find(t => t == p.part().heroTypeId) == undefined);\r\n\t\t//     this.setItems(res);\r\n\t\t// });\r\n\t}\r\n\r\n\t/**\r\n\t * 部件变化回调\r\n\t */\r\n\tpublic onPartsChanged() {\r\n\t\tthis.reselect();\r\n\t}\r\n\r\n\t/**\r\n\t * 选择回调\r\n\t */\r\n\tpublic onSelectChanged(item: PartsDisplay) {\r\n\t\tthis.preview.addPart(item.item.part);\r\n\t\tthis.singleEditor?.setItem(item.item);\r\n\t\tthis.partScaler?.setItem(item.item);\r\n\t\tif (this.colors) {\r\n\t\t\tthis.colors.node.active = true;\r\n\t\t\tthis.colors.setItems(this.currentTotalParts.filter(p => p.part.oriId == item.item.part.oriId && p.part.stock > 0));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 切换颜色选择开关\r\n\t */\r\n\tpublic switchColorSelector() {\r\n\t\tif (!this.colors) return;\r\n\t\tthis.colors.node.active = !this.colors.node.active;\r\n\t}\r\n\r\n\t/**\r\n\t * 取消选择回调\r\n\t */\r\n\tpublic onSelectCancel(item: PartsDisplay) {\r\n\t\tthis.preview.removePart(item.item.part);\r\n\t\tthis.singleEditor?.setItem(null);\r\n\t\tthis.partScaler?.setItem(null);\r\n\t\tthis.colors.node.active = false;\r\n\t}\r\n\r\n\t// endregion\r\n\r\n}\r\n\r\n","import {ItemDisplay} from \"../../../../Modules/CoreModule/Components/ItemDisplay\";\r\nimport Label = cc.Label;\r\nimport Node = cc.Node;\r\nimport Sprite = cc.Sprite;\r\nimport {PartInfo} from \"../../../../Modules/HeroModule/Data/PartInfo\";\r\nimport PartsSelection from \"./PartsSelection\";\r\nimport Color = cc.Color;\r\nimport {selectorScene} from \"../../SelectorScene\";\r\nimport PreviewPictureDisplay from \"./PreviewPictureDisplay\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PartsDisplay extends ItemDisplay<PartInfo> {\r\n\r\n\t@property(Sprite)\r\n\tpicture: Sprite = null;\r\n\t@property(Node)\r\n\tbackground: Node = null;\r\n\t@property(Node)\r\n\tframe: Node = null;\r\n\t@property(Number)\r\n\tpadding: number = 20;\r\n\r\n\t@property(Node)\r\n\teditor: Node = null;\r\n\t@property(Label)\r\n\tid: Label = null;\r\n\t@property(Label)\r\n\thtId: Label = null;\r\n\r\n\t@property(Node)\r\n\tban: Node = null;\r\n\r\n\t@property(PreviewPictureDisplay)\r\n\tpreview: PreviewPictureDisplay = null;\r\n\r\n\tisSelected: boolean = false;\r\n\r\n\t// onLoad () {}\r\n\r\n\t//region 更新控制\r\n\r\n\tprotected update(dt: number) {\r\n\t\tthis.frame.active = this.isSelected;\r\n\t\tthis.node.color = this.isSelected ? new Color(53, 48, 71) : new Color(36, 32, 47);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 绘制控制\r\n\r\n\t/**\r\n\t * 刷新\r\n\t */\r\n\trefresh() {\r\n\t\tsuper.refresh();\r\n\t\tif (this.item == null) return;\r\n\t\tthis.isSelected = false;\r\n\r\n\t\tthis.drawPicture();\r\n\t\tif (selectorScene().editorMode) {\r\n\t\t\tthis.drawBan();\r\n\t\t\tthis.drawEditorInfo();\r\n\t\t}\r\n\t}\r\n\tprivate drawEditorInfo() {\r\n\t\tif (!this.editor) return;\r\n\t\tthis.editor.active = true;\r\n\t\tconst id = this.item.partId, oriId = this.item.part.oriId;\r\n\t\tthis.id.string = id == oriId ? `#${id}` : `#${id} (${oriId})`;\r\n\t\tthis.htId.string = this.item.part.heroTypeId.toString();\r\n\t}\r\n\tprivate drawPicture(){\r\n\t\tlet temp = this.item;\r\n\t\tthis.picture.spriteFrame = null;\r\n\t\tthis.item.part.picture().then(res => {\r\n\t\t\tif (this.item != temp) return;\r\n\t\t\tthis.picture.spriteFrame = res?.clone();\r\n\t\t\tthis.filterPicture();\r\n\t\t});\r\n\t}\r\n\tprivate filterPicture(){\r\n\t\tlet k = Math.max(this.picture.node.width / (this.node.width - this.padding),\r\n\t\t\tthis.picture.node.height / (this.node.height - this.padding));\r\n\t\tif (k > 1) {\r\n\t\t\tthis.picture.node.width /= k;\r\n\t\t\tthis.picture.node.height /= k;\r\n\t\t}\r\n\t}\r\n\tprivate drawBan() {\r\n\t\tthis.ban.active = this.preview?.item?.calcScale(this.item.part) <= 0;\r\n\t}\r\n\r\n\t//endregion\r\n\r\n\t//region 回调控制\r\n\r\n\tpublic onSelectChanged(select: boolean){\r\n\t\tthis.isSelected = select;\r\n\t\tif (this.item.stock <= 0)\r\n\t\t\tthis.node.getComponent(PartsSelection)\r\n\t\t\t\t.selectableGroup.deselect(this.node.getComponent(PartsSelection).selectableGroup.currentSelection());\r\n\t}\r\n\r\n\t//endregion\r\n\r\n}\r\n","import {SelectableGroup} from \"../../../../Modules/CoreModule/Components/SelectableGroup\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PartsSelectionGroup extends SelectableGroup {\r\n\r\n}","import {SelectableObject} from \"../../../../Modules/CoreModule/Components/SelectableObject\";\r\nimport PartsDisplay from \"./PartsDisplay\";\r\nimport PartsContainer from \"../ItemContainers/PartsContainer\";\r\nimport PartColorsContainer from \"../ItemContainers/PartColorsContainer\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PartsSelection extends SelectableObject {\r\n\r\n    display: PartsDisplay = null;\r\n    container: PartsContainer | PartColorsContainer = null;\r\n\r\n    //region 回调控制\r\n\r\n    onDeselected(): void {\r\n        this.display.onSelectChanged(false);\r\n        if (this.selectableGroup.selectedIndex == -1)\r\n            this.container.onSelectCancel(this.display);\r\n    }\r\n\r\n    onSelected(): void {\r\n        this.display.onSelectChanged(true);\r\n        this.container.onSelectChanged(this.display);\r\n    }\r\n\r\n    toggleSelection() {\r\n        if (this.container instanceof PartsContainer)\r\n            this.container.switchColorSelector();\r\n        super.toggleSelection();\r\n    }\r\n\r\n    //endregion\r\n\r\n}\r\n","import {assetMgr, BundleName} from \"../../CoreModule/Managers/AssetBundleManager\";\r\nimport {assetField, field} from \"../../CoreModule/Data/BaseData\";\r\nimport {partTypeRepo} from \"./PartType\";\r\nimport SkeletonData = sp.SkeletonData;\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport {DefaultBt1, DefaultBt2} from \"../../NFTModule/Managers/NFTManager\";\r\nimport {heroTypeRepo} from \"./HeroType\";\r\nimport {\r\n\tBaseRepository,\r\n\tfilterKeys,\r\n\tgetRepository,\r\n\trepository,\r\n\tthrowMessage\r\n} from \"../../CoreModule/Data/BaseRepository\";\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\nimport {data, StaticData} from \"../../CoreModule/Data/StaticData\";\r\nimport {PartInfo} from \"./PartInfo\";\r\nimport {SpineUtils} from \"../../../Utils/SpineUtils\";\r\nimport {AttackMotionGroupId} from \"../../BattleModule/Data/MotionGroup\";\r\nimport {blockLoading} from \"../../CoreModule/Managers/LoadingManager\";\r\nimport {configMgr} from \"../../CoreModule/Managers/ConfigManager\";\r\nimport PartConfig from \"../Configs/PartConfig\";\r\n\r\n@data(\"Part\")\r\nexport class Part extends StaticData {\r\n\r\n\t@field\r\n\tpublic bt1: number = DefaultBt1;\r\n\t@field\r\n\tpublic bt2: number = DefaultBt2;\r\n\t@field\r\n\tpublic oriId: number = -1;\r\n\t@field\r\n\tpublic heroTypeId: number = 0; // heroTypeId, bt2\r\n\t@field\r\n\tpublic partTypeId: number = 0; // partTypeId, ct\r\n\r\n\t@field\r\n\tpublic isEmpty: boolean = false;\r\n\r\n\t@field\r\n\tpublic name: string = \"\";\r\n\t@field\r\n\tpublic price: number = 0;\r\n\t@field\r\n\tpublic stock: number = 999999;\r\n\r\n\t@field\r\n\tpublic color: number = 1;\r\n\r\n\t@field([Number])\r\n\tpublic containCts: number[] = [];\r\n\r\n\t@field\r\n\tpublic skeletonName: string = \"\";\r\n\r\n\t@field\r\n\tpublic pictureName: string = \"\";\r\n\r\n\t@field(Number)\r\n\tpublic attackMotionId: number = AttackMotionGroupId;\r\n\r\n\t@field(Number)\r\n\tpublic nftMakeId: number;\r\n\r\n\tprivate _picture: SpriteFrame;\r\n\tpublic async picture(): Promise<SpriteFrame> {\r\n\t\treturn this._picture ||= await this.loadPicture();\r\n\t}\r\n\t@blockLoading\r\n\tprivate async loadPicture(): Promise<SpriteFrame> {\r\n\t\treturn await assetMgr().loadAsset(SpriteFrame, BundleName.Sprites, `partpictures/${this.pictureName}`);\r\n\t}\r\n\r\n\tprivate _allPicture: Map<string, SpriteFrame>;\r\n\tpublic async allPictures(): Promise<Map<string, SpriteFrame>> {\r\n\t\treturn this._allPicture ||= await this.loadAllPictures();\r\n\t}\r\n\t@blockLoading\r\n\tprivate async loadAllPictures(): Promise<Map<string, SpriteFrame>> {\r\n\t\tconst names = this.pictureName.split('_');\r\n\t\tconst orders = configMgr().config(PartConfig).slotOrders;\r\n\t\tconst keys = Object.keys(orders).filter(k => k.split('_')[0] == names[2]);\r\n\t\tlet res = new Map<string, SpriteFrame>();\r\n\t\tfor (const k of keys) {\r\n\t\t\tlet sf = await assetMgr().loadAsset(SpriteFrame, BundleName.Sprites, `partpictures/${names[0]}_${names[1]}_${k}_${names[4]}`);\r\n\t\t\tif (sf) res.set(k, sf);\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\tprivate _skeleton: SkeletonData;\r\n\tpublic async skeleton(): Promise<SkeletonData> {\r\n\t\treturn this._skeleton ||= await this.loadSkeleton();\r\n\t}\r\n\t@blockLoading\r\n\tprivate async loadSkeleton(): Promise<SkeletonData> {\r\n\t\treturn await assetMgr().loadAsset(SkeletonData, BundleName.Sprites, `parts/${this.skeletonName}`);\r\n\t}\r\n\r\n\t/**\r\n\t * 槽类型（部件类型）实例\r\n\t */\r\n\tpublic get partType() {\r\n\t\treturn partTypeRepo().getById(this.partTypeId);\r\n\t}\r\n\r\n\t/**\r\n\t * 英雄类型实例\r\n\t */\r\n\tpublic get heroType() {\r\n\t\treturn heroTypeRepo().getById(this.heroTypeId);\r\n\t}\r\n\r\n\t/**\r\n\t * 原始部件实例\r\n\t */\r\n\tpublic get oriPart() {\r\n\t\treturn partRepo().getById(this.oriId);\r\n\t}\r\n\r\n\t/**\r\n\t * 槽名称列表\r\n\t */\r\n\tprivate _slotNames: string[] = null;\r\n\tpublic get slotNames(): string[] {\r\n\t\treturn this._slotNames ||= this.getSlotNames();\r\n\t}\r\n\tprivate getSlotNames() {\r\n\t\tconst cts = this.containCts?.length > 0 ?\r\n\t\t\tthis.containCts : [this.partTypeId];\r\n\t\treturn cts.map(ct => partTypeRepo().getById(ct))\r\n\t\t\t.reduce((res, pt) => res.concat(\r\n\t\t\t\tSpineUtils.getSlotNames(pt)\r\n\t\t\t), [] as string[]);\r\n\t}\r\n\r\n\t/**\r\n\t * 槽名称列表\r\n\t */\r\n\tprivate _boneNames: string[] = null;\r\n\tpublic get boneNames(): string[] {\r\n\t\treturn this._boneNames ||= this.getBoneNames();\r\n\t}\r\n\tprivate getBoneNames() {\r\n\t\tconst cts = this.containCts?.length > 0 ?\r\n\t\t\tthis.containCts : [this.partTypeId];\r\n\t\treturn cts.map(ct => partTypeRepo().getById(ct))\r\n\t\t\t.reduce((res, pt) => res.concat(\r\n\t\t\t\tSpineUtils.getBoneNames(pt)\r\n\t\t\t), [] as string[]);\r\n\t}\r\n\r\n\t/**\r\n\t * 转化为PartInfo，测试用\r\n\t */\r\n\tpublic toPartInfo() {\r\n\t\tconst res = new PartInfo();\r\n\t\tres.partId = this.id;\r\n\t\tres.name = this.name;\r\n\t\tres.partTypeId = this.partTypeId;\r\n\t\tres.price = this.price;\r\n\t\tres.stock = this.stock;\r\n\r\n\t\treturn res;\r\n\t}\r\n}\r\n\r\nexport function partRepo() {\r\n\treturn getRepository(PartRepo);\r\n}\r\n\r\n@repository\r\nexport class PartRepo extends BaseRepository<Part> {\r\n\r\n\tget clazz(): Constructor<Part> { return Part; }\r\n\r\n\t// @ts-ignore\r\n\tpublic findByHeroTypeId(heroTypeId: number): Part[] {}\r\n\t// @ts-ignore\r\n\tpublic findByPartTypeId(partTypeId: number): Part[] {}\r\n\t// @ts-ignore\r\n\tpublic getByPartTypeId(partTypeId: number): Part {}\r\n\t// @ts-ignore\r\n\tpublic getByNftMakeId(nftMakeId: number): Part {}\r\n\t@filterKeys<Part>(\"heroTypeId\", \"partTypeId\", \"color\") // @ts-ignore\r\n\tpublic findByTypes(htId: number, ptId: number, color: number): Part[] {}\r\n\r\n}\r\n","import {BaseManager, getManager, manager} from \"./BaseManager\";\r\n\r\nexport type Platform = 'web' | 'android' | 'test';\r\n\r\nexport function getPlatformType() : Platform {\r\n\tswitch (cc.sys.platform) {\r\n\t\tcase cc.sys.DESKTOP_BROWSER:\r\n\t\tcase cc.sys.MOBILE_BROWSER: return 'web';\r\n\t\tcase cc.sys.ANDROID: return 'android';\r\n\t\tdefault: return 'test';\r\n\t}\r\n}\r\n\r\nexport function platformMgr() : PlatformManager {\r\n\treturn getManager(PlatformManager);\r\n}\r\n\r\nexport function getPlatform() : BasePlatform {\r\n\treturn platformMgr().getPlatform(getPlatformType());\r\n}\r\n\r\n@manager\r\nclass PlatformManager extends BaseManager {\r\n\r\n\tplatformClasses = {};\r\n\tplatforms = {};\r\n\r\n\t/**\r\n\t * 注册平台\r\n\t */\r\n\tpublic registerPlatform<T extends BasePlatform>(\r\n\t\ttype: Platform, clazz: Constructor<T>) {\r\n\t\tthis.platformClasses[type] = clazz;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取平台实例\r\n\t */\r\n\tpublic getPlatform(type: Platform) : BasePlatform {\r\n\t\tconst ctor = this.platformClasses[type];\r\n\t\treturn this.platforms[type] ||= ctor ? new ctor(type) : null;\r\n\t}\r\n}\r\n\r\nimport { BasePlatform } from '../../../Platforms/BasePlatform';\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\n","import {BaseData, field} from \"../../CoreModule/Data/BaseData\";\r\nimport {QualityType} from \"../../HeroModule/Data/Quality\";\r\nimport {RestraintType} from \"../../HeroModule/Data/Hero\";\r\nimport {playerData} from \"../../PlayerModule/Managers/PlayerManager\";\r\nimport {PlayerData} from \"../../PlayerModule/Data/Player\";\r\nimport {cGte, ConditionGroup, ConditionType} from \"../../PlayerModule/Data/Condition\";\r\n\r\nexport class RoomNFTInfo extends BaseData {\r\n\r\n\t@field(String)\r\n\tpublic nftId: string;\r\n\t@field(String)\r\n\tpublic name: string;\r\n\t@field(String)\r\n\tpublic ownerAccount: string;\r\n\t@field(Number)\r\n\tpublic heroTypeId: number;\r\n\t@field([Number])\r\n\tpublic partIds: number[];\r\n\t@field(Number)\r\n\tpublic level: number;\r\n\t@field(Number)\r\n\tpublic star: number;\r\n\t@field(Number)\r\n\tpublic quality: QualityType;\r\n\t@field(Number)\r\n\tpublic restraint: RestraintType;\r\n\t@field(Number)\r\n\tpublic battlePoint: number;\r\n\t@field(Number)\r\n\tpublic rank: number;\r\n\r\n}\r\n\r\nexport class PlayerBattleItem extends BaseData {\r\n\r\n\t@field(Number)\r\n\tpublic roomId: number;\r\n\t@field([RoomNFTInfo])\r\n\tpublic opponents: RoomNFTInfo[] = []; // 房间对手缓存\r\n\r\n}\r\n\r\n@playerData(\"PlayerBattle\")\r\nexport class PlayerBattle extends PlayerData {\r\n\r\n\t@field([PlayerBattleItem])\r\n\tpublic battleData: PlayerBattleItem[] = [];\r\n\t@field\r\n\tpublic refreshCount: number = 0; // 刷新次数\r\n\t@field\r\n\tpublic battleChance: number = 0;// 剩余挑战次数\r\n\r\n\t/**\r\n\t * 获取玩家指定副本的进度\r\n\t */\r\n\tpublic getRoomData(roomId: number) {\r\n\t\tlet res = this.battleData.find(s => s.roomId == roomId);\r\n\t\tif (!res) {\r\n\t\t\tres = new PlayerBattleItem();\r\n\t\t\tres.roomId = roomId;\r\n\r\n\t\t\tthis.battleData.push(res);\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\t// region 战斗次数\r\n\r\n\t/**\r\n\t * 刷新价格\r\n\t * @param cnt\r\n\t */\r\n\tpublic battleBuyCosts(cnt) {\r\n\t\treturn ConditionGroup.create(\r\n\t\t\tcGte(ConditionType.Gold, cnt * 1000)\r\n\t\t);\r\n\t}\r\n\r\n\tpublic buyBattleChance(cnt) {\r\n\t\tthis.battleChance += cnt;\r\n\t}\r\n\r\n\t/**\r\n\t * 开始战斗\r\n\t */\r\n\tpublic startPVPBattle() {\r\n\t\tthis.battleChance = Math.max(0, this.battleChance - 1);\r\n\t}\r\n\r\n\t/**\r\n\t * 完成战斗\r\n\t */\r\n\tpublic finishPVPBattle(win, nftId, roomId) {\r\n\t\tif (!win) return;\r\n\t\t// 刷新指定的对手\r\n\t\tconst oppos = this.getRoomData(roomId).opponents;\r\n\t\tconst index = oppos.findIndex(o => o.nftId == nftId);\r\n\t\toppos.splice(index, 1);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 刷新次数\r\n\r\n\t/**\r\n\t * 刷新价格\r\n\t * @param cnt\r\n\t */\r\n\tpublic refreshBuyCosts(cnt) {\r\n\t\treturn ConditionGroup.create(\r\n\t\t\tcGte(ConditionType.Gold, cnt * 500)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * 购买刷新次数\r\n\t */\r\n\tpublic buyRefreshCount(cnt, refresh = false) {\r\n\t\tthis.refreshCount += cnt;\r\n\t\tif (refresh && this.refreshCount > 0)\r\n\t\t\tthis.refreshPVP();\r\n\t}\r\n\r\n\t/**\r\n\t * 刷新对手\r\n\t */\r\n\tpublic refreshPVP() {\r\n\t\tthis.battleData.forEach(bd => bd.opponents = []);\r\n\t\tthis.refreshCount = Math.max(0, this.refreshCount - 1);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n}\r\n","import {ItemContainer} from \"../../../CoreModule/Components/ItemContainer\";\r\nimport PlayerCardDisplay, {RoomNFTInfo} from \"./PlayerCardDisplay\";\r\nimport {waitForDataLoad} from \"../../../CoreModule/Managers/DataManager\";\r\nimport {waitForLogin} from \"../../../PlayerModule/Managers/PlayerManager\";\r\nimport ScrollView = cc.ScrollView;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PlayerCardContainer extends ItemContainer<RoomNFTInfo, PlayerCardDisplay> {\r\n\r\n    private currentDisplayRoomId: number = -1;\r\n    private roomInfos: RoomNFTInfo[][] = [];\r\n\r\n    start () {\r\n        this.setup().then();\r\n    }\r\n\r\n    @waitForDataLoad\r\n    @waitForLogin\r\n    private async setup() {\r\n        // const acc = playerMgr().player.account;\r\n        // let items: Hero[] = (await heroMgr().getListFromServer()).filter(h => h.ownerAccount == acc);\r\n        // items.forEach(h => {\r\n        //     h.params = [1000, 400, 12500, 20];\r\n        // })\r\n        let nfts: [];\r\n        let items: RoomNFTInfo[];\r\n        for (let i = 0;i < 5;i++) {\r\n            nfts = (await BattleInterface.GetPVPPlayers({ roomId: i })).nfts;\r\n            items = nfts.map(nft => DataLoader.load(RoomNFTInfo, nft));\r\n            this.roomInfos.push(items.filter(nft => !!nft));\r\n        }\r\n        this.currentDisplayRoomId = battleScene().currentPVPRoomIndex;\r\n        this.setItems(this.roomInfos[this.currentDisplayRoomId]);\r\n    }\r\n\r\n    update (dt) {\r\n        if (this.roomInfos.length < 5) return;\r\n        if (this.currentDisplayRoomId != battleScene().currentPVPRoomIndex) {\r\n            this.currentDisplayRoomId = battleScene().currentPVPRoomIndex;\r\n            this.setItems(this.roomInfos[this.currentDisplayRoomId]);\r\n        }\r\n    }\r\n\r\n    onItemsChanged() {\r\n        super.onItemsChanged();\r\n        this.getComponent(ScrollView).scrollToLeft();\r\n    }\r\n\r\n    protected onDisable() {\r\n        battleScene().currentTargetSelect = null;\r\n    }\r\n\r\n}\r\n\r\nimport {battleScene} from \"../../../../Scenes/BattleScene\";\r\nimport {BattleInterface} from \"../../BattleCommon\";\r\nimport {DataLoader} from \"../../../CoreModule/Utils/DataLoader\";\r\n","import {ItemDisplay} from \"../../../CoreModule/Components/ItemDisplay\";\r\nimport Label = cc.Label;\r\nimport Sprite = cc.Sprite;\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport Skeleton = sp.Skeleton;\r\nimport {HeroSkeleton} from \"../../../../Utils/SpineUtils\";\r\nimport Node = cc.Node;\r\nimport {battleScene} from \"../../../../Scenes/BattleScene\";\r\nimport {BaseData, field} from \"../../../CoreModule/Data/BaseData\";\r\nimport {QualityType} from \"../../../HeroModule/Data/Quality\";\r\nimport {Part, partRepo} from \"../../../HeroModule/Data/Part\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PlayerCardDisplay extends ItemDisplay<RoomNFTInfo> {\r\n\r\n    @property(Label)\r\n    nameLabel: Label = null;\r\n    @property(Label)\r\n    qualityLabel: Label = null;\r\n    @property(Label)\r\n    levelLabel: Label = null;\r\n    @property(Label)\r\n    powerLabel: Label = null;\r\n    @property(Sprite)\r\n    qualityIcon: Sprite = null;\r\n    @property(Node)\r\n    frame: Node = null;\r\n\r\n    @property([SpriteFrame])\r\n    qualityPictures: SpriteFrame[] = [];\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    update (dt) {\r\n        this.frame.active = battleScene().currentTargetSelect == this.item;\r\n    }\r\n\r\n    refresh() {\r\n        super.refresh();\r\n        this.updateLabels();\r\n        this.updatePictures();\r\n        this.drawHero();\r\n    }\r\n\r\n    quality: string[] = [\"N\", \"R\", \"SR\", \"SSR\", \"UR\"];\r\n\r\n    updateLabels() {\r\n        this.nameLabel.string = this.item.name;\r\n        this.qualityLabel.string = this.quality[this.item.quality];\r\n        this.levelLabel.string = this.item.level.toString();\r\n        this.powerLabel.string = this.item.battlePoint.toString();\r\n    }\r\n\r\n    updatePictures() {\r\n        this.qualityIcon.spriteFrame = this.qualityPictures[this.item.quality];\r\n    }\r\n\r\n    @property(Skeleton)\r\n    hero: Skeleton = null;\r\n\r\n    private size: number = 120;\r\n\r\n    private drawHero(){\r\n        this.hero.node.scale = 0;\r\n        let node = new Node('node');\r\n        let temp = node.addComponent(Skeleton);\r\n        let hero = new HeroSkeleton(this.hero, temp, this.item.heroTypeId);\r\n        this.item.parts.forEach(part => { hero.addPart(part); });\r\n        hero.refresh().then(res => {\r\n            node.destroy();\r\n            this.sizeFilter();\r\n        });\r\n    }\r\n\r\n    private sizeFilter() {\r\n        let k = Math.max(\r\n            this.hero.node.width / this.size,\r\n            this.hero.node.height / this.size);\r\n        if (k > 1) this.hero.node.scale = 1 / k;\r\n        else this.hero.node.scale = 1;\r\n        this.hero.node.y = - this.size / 2;\r\n    }\r\n\r\n    onClick() {\r\n        if (battleScene().currentTargetSelect == this.item) return battleScene().currentTargetSelect = null;\r\n        battleScene().currentTargetSelect = this.item;\r\n    }\r\n\r\n}\r\n\r\nexport class RoomNFTInfo extends BaseData {\r\n\r\n    @field(String)\r\n    public nftId: string;\r\n    @field(String)\r\n    public name: string;\r\n    @field(Number)\r\n    public heroTypeId: number;\r\n    @field([Number])\r\n    public partIds: number[];\r\n    @field(Number)\r\n    public level: number;\r\n    @field(Number)\r\n    public quality: QualityType;\r\n    @field(Number)\r\n    public battlePoint: number;\r\n\r\n    /**\r\n     * 部件列表\r\n     */\r\n    private _parts: Part[];\r\n    public get parts() {\r\n        return this._parts ||= this.partIds.map(\r\n            pid => partRepo().getById(pid)) // DataUtils.part(pid, \"id\"));\r\n    }\r\n\r\n}\r\n","import {get, post} from \"../../CoreModule/Common/CoreCommon\";\r\n\r\nexport class PlayerInterface {\r\n\r\n\t@post(\"/player/player/login\", undefined, false) static Login(d?): any {}\r\n\t@post(\"/player/player/logout\") static Logout(d?): any {}\r\n\t@get(\"/player/player_info/get\") static GetInfo(d?): any {}\r\n\t@post(\"/player/player_data/get\") static GetData(d?): any {}\r\n\t@post(\"/player/player_info/edit\") static EditInfo(d?): any {}\r\n\r\n}\r\n","import {BaseData, field, PK, pkType} from \"../../CoreModule/Data/BaseData\";\r\nimport {PlayerData} from \"../../PlayerModule/Data/Player\";\r\nimport {playerData} from \"../../PlayerModule/Managers/PlayerManager\";\r\nimport {copyRepo, CopyType} from \"./Copy\";\r\nimport {heroMgr} from \"../../HeroModule/Managers/HeroManager\";\r\n\r\nexport class PlayerCopyItem extends BaseData {\r\n\r\n\t@field(Number)\r\n\tpublic copyId: number;\r\n\t@field\r\n\tpublic curLevel: number = 0;\r\n\t@field\r\n\tpublic maxLevel: number = 0\r\n\r\n\tpublic get copy() {\r\n\t\treturn copyRepo().getById(this.copyId);\r\n\t}\r\n\r\n\tpublic next() {\r\n\t\tthis.maxLevel = Math.max(this.curLevel, this.maxLevel);\r\n\t\tthis.curLevel++;\r\n\t}\r\n\r\n\tpublic prev() {\r\n\t\tthis.curLevel--;\r\n\t}\r\n\r\n}\r\n\r\nexport class PlayerCopySetting extends BaseData {\r\n\r\n\t@field\r\n\tpublic copyType: CopyType = CopyType.Main;\r\n\t@field([String])\r\n\tpublic nftIds: string[] = []; // 出战的NFT\r\n\t@field\r\n\tpublic speedUpTime: number = 0;\r\n\r\n\t/**\r\n\t * 战斗速度\r\n\t */\r\n\tpublic get battleSpeed() {\r\n\t\treturn Date.now() > this.speedUpTime ? 1 : 2;\r\n\t}\r\n\r\n\t/**\r\n\t * 加速\r\n\t */\r\n\tpublic boost(time, force = false) {\r\n\t\tthis.speedUpTime = force ? Date.now() + time :\r\n\t\t\tMath.max(this.speedUpTime, Date.now()) + time;\r\n\t}\r\n\r\n}\r\n\r\n@playerData(\"PlayerCopy\")\r\nexport class PlayerCopy extends PlayerData {\r\n\r\n\t@field([PlayerCopyItem])\r\n\tpublic copies: PlayerCopyItem[] = [];\r\n\r\n\t@field([PlayerCopySetting])\r\n\tpublic settings: PlayerCopySetting[] = [];\r\n\r\n\t/**\r\n\t * 获取玩家指定副本的进度\r\n\t */\r\n\tpublic copy(copyId: number) {\r\n\t\treturn this.copies.find(s => s.copyId == copyId);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取玩家的副本设置\r\n\t */\r\n\tpublic setting(copyType: CopyType) {\r\n\t\treturn this.settings.find(s => s.copyType == copyType);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取玩家闯关进度\r\n\t */\r\n\tpublic mainCopy() {\r\n\t\treturn this.copy(copyRepo().main().id);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取玩家闯关设定\r\n\t */\r\n\tpublic mainSetting() {\r\n\t\treturn this.setting(CopyType.Main);\r\n\t}\r\n\r\n}\r\n","import Label = cc.Label;\r\nimport {ItemDisplay} from \"../../../CoreModule/Components/ItemDisplay\";\r\nimport {Player} from \"../../../PlayerModule/Data/Player\";\r\nimport Sprite = cc.Sprite;\r\nimport {PlayerMoney} from \"../../../EconomicModule/Data/PlayerMoney\";\r\nimport {playerMgr, waitForLogin} from \"../../../PlayerModule/Managers/PlayerManager\";\r\nimport {autoUnitConvert} from \"../../../../Utils/NumberUtils\";\r\nimport Node = cc.Node;\r\nimport {waitForDataLoad} from \"../../../CoreModule/Managers/DataManager\";\r\nimport {battleScene} from \"../../../../Scenes/BattleScene\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class playerInfoDisplay extends ItemDisplay<Player> {\r\n\r\n    @property(Label)\r\n    playerName: Label = null;\r\n    @property(Label)\r\n    force: Label = null;\r\n    @property(Sprite)\r\n    avatar: Sprite = null;\r\n    @property(Label)\r\n    gold: Label = null;\r\n    @property(Label)\r\n    diamond: Label = null;\r\n    @property(Label)\r\n    stableCoin: Label = null;\r\n\r\n    @property(Node)\r\n    heroInfoNode: Node = null\r\n\r\n    private money: PlayerMoney = null;\r\n\r\n    // region 初始化\r\n\r\n    start () {\r\n        this.setup();\r\n    }\r\n\r\n    @waitForLogin\r\n    @waitForDataLoad\r\n    private setup() {\r\n        let player = playerMgr().player;\r\n        this.setItem(player);\r\n    }\r\n\r\n    protected onItemChanged() {\r\n        super.onItemChanged();\r\n        this.money = playerMgr().getPlayerData(PlayerMoney);\r\n    }\r\n\r\n    // endregion\r\n\r\n    protected update(dt: number) {\r\n        if (battleScene().heroSelected) {\r\n            this.heroInfoNode.active = true;\r\n            this.node.active = false;\r\n            return;\r\n        }\r\n        if (!this.item) return;\r\n        this.updateLabels();\r\n    }\r\n\r\n    @autoUnitConvert\r\n    private updateLabels() {\r\n        this.playerName.string = this.item.name;\r\n        // this.force.string = null;\r\n        this.gold.string = this.money.gold.toString();\r\n        this.diamond.string = this.money.diamond.toString();\r\n        this.stableCoin.string = this.money.token.toString();\r\n    }\r\n\r\n}\r\n","import {BaseData, field} from \"../../CoreModule/Data/BaseData\";\r\nimport {PlayerData} from \"../../PlayerModule/Data/Player\";\r\nimport {playerData} from \"../../PlayerModule/Managers/PlayerManager\";\r\n\r\nexport class PlayerJobItem extends BaseData {\r\n\r\n\t@field(Number)\r\n\tpublic jobId: number;\r\n\t@field\r\n\tpublic curLevel: number = 0;\r\n\t@field\r\n\tpublic maxLevel: number = 0;\r\n\t@field\r\n\tpublic lastProfitTime: number = 0;\r\n\t@field\r\n\tpublic profitCount: number = 0;\r\n\r\n\tpublic pJob: PlayerJob;\r\n\r\n\tconstructor(index?, parent?) {\r\n\t\tsuper(index);\r\n\t\tthis.pJob = parent;\r\n\t}\r\n\r\n\t/**\r\n\t * 打工点\r\n\t */\r\n\tpublic get job() {\r\n\t\treturn jobRepo().getById(this.jobId);\r\n\t}\r\n\r\n\t/**\r\n\t * 升级花销\r\n\t */\r\n\tpublic upgradeCosts() {\r\n\t\tconst gold = this.job.upgradeGold(this.curLevel);\r\n\t\treturn ConditionGroup.create(\r\n\t\t\tcGte(ConditionType.Gold, gold)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * 升级条件\r\n\t */\r\n\tpublic upgradeConditions() {\r\n\t\treturn ConditionGroup.create(\r\n\t\t\tcFun(() => this.curLevel > 0, EconomicThrow.JobNotUnlocked),\r\n\t\t\tcFun(() => this.curLevel < this.job.maxLevel, EconomicThrow.ReachJobMaxLevel),\r\n\t\t\tthis.upgradeCosts()\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * 升级条件\r\n\t */\r\n\tpublic unlockCosts() {\r\n\t\treturn ConditionGroup.create(\r\n\t\t\tcGte(ConditionType.Gold, this.job.unlockGold)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * 升级条件\r\n\t */\r\n\tpublic unlockConditions() {\r\n\t\treturn ConditionGroup.create(\r\n\t\t\tcFun(() => this.curLevel <= 0, EconomicThrow.JobAlreadyUnlocked),\r\n\t\t\tcGte(ConditionType.ReturnTime, this.job.unlockReturnTime),\r\n\t\t\tthis.unlockCosts()\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * 是否自动领取\r\n\t */\r\n\tpublic get isAutoProfit() { return this.pJob.isAutoProfit; }\r\n\r\n\t/**\r\n\t * 能否领取收益\r\n\t */\r\n\tpublic get isValidProfitTime() {\r\n\t\treturn Date.now() >= this.lastProfitTime + this.job.time * 1000;\r\n\t}\r\n\r\n\t/**\r\n\t * 升级条件\r\n\t */\r\n\tpublic profitConditions() {\r\n\t\treturn ConditionGroup.create(\r\n\t\t\tcFun(() => this.curLevel > 0, EconomicThrow.JobNotUnlocked),\r\n\t\t\tcFun(() => this.isValidProfitTime, EconomicThrow.NotJobProfitTime)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * 领取奖励\r\n\t */\r\n\tpublic profitRewards() {\r\n\t\tconst gold = this.job.profit(this.curLevel);\r\n\t\treturn RewardGroup.create(r(RewardType.Gold, gold));\r\n\t}\r\n\r\n\t/**\r\n\t * 升级\r\n\t */\r\n\tpublic upgrade() {\r\n\t\tconst maxLevel = this.job.maxLevel;\r\n\t\tif (this.curLevel >= maxLevel) return;\r\n\r\n\t\t// this.curLevel = MathUtils.clamp(this.curLevel + 1, 0, maxLevel);\r\n\t\tthis.maxLevel = Math.max(this.maxLevel, ++this.curLevel);\r\n\r\n\t\tif (this.lastProfitTime == 0) // 针对初次升级\r\n\t\t\tthis.lastProfitTime = Date.now();\r\n\t}\r\n\r\n\t/**\r\n\t * 领取收益\r\n\t */\r\n\tpublic profit() {\r\n\t\tthis.lastProfitTime = Date.now();\r\n\t\tthis.profitCount++;\r\n\t}\r\n\r\n\tprivate _icon: SpriteFrame;\r\n\tpublic async icon(): Promise<SpriteFrame> {\r\n\t\treturn this._icon ||= await this.loadIcon();\r\n\t}\r\n\tprivate async loadIcon(): Promise<SpriteFrame> {\r\n\t\treturn await assetMgr().loadAsset(SpriteFrame, BundleName.Sprites, `icons/job${this.jobId}`);\r\n\t}\r\n\r\n}\r\n\r\n@playerData(\"PlayerJob\")\r\nexport class PlayerJob extends PlayerData {\r\n\r\n\t@field\r\n\tpublic id: number = -1;\r\n\t@field(Number)\r\n\tpublic returnTimes: number = 0; // 回城次数\r\n\t@field([PlayerJobItem])\r\n\tpublic jobs: PlayerJobItem[] = []; // 打工数据记录\r\n\t@field\r\n\tpublic autoProfitTime: number = 0; // 自动领取截止时间\r\n\r\n\t// region 数据获取\r\n\r\n\t/**\r\n\t * 获取指定打工点数据\r\n\t */\r\n\tpublic job(jobId: number) {\r\n\t\tlet res = this.jobs.find(j => j.jobId == jobId);\r\n\t\tif (!res) {\r\n\t\t\tres = new PlayerJobItem(this.jobs.length, this);\r\n\t\t\tres.jobId = jobId;\r\n\r\n\t\t\tthis.jobs.push(res);\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 是否自动领取\r\n\t */\r\n\tpublic get isAutoProfit() { return Date.now() <= this.autoProfitTime; }\r\n\r\n\t// endregion\r\n\r\n}\r\nimport {jobRepo} from \"./Job\";\r\nimport {cFun, cGte, ConditionGroup, ConditionType} from \"../../PlayerModule/Data/Condition\";\r\nimport {r, RewardGroup, RewardType} from \"../../PlayerModule/Data/Reward\";\r\nimport {EconomicThrow} from \"../Common/EconomicCommon\";\r\nimport {assetMgr, BundleName} from \"../../CoreModule/Managers/AssetBundleManager\";\r\nimport SpriteFrame = cc.SpriteFrame;\r\n","import {BaseManager, getManager, manager} from \"../../CoreModule/Managers/BaseManager\";\r\nimport {Player, PlayerData} from \"../Data/Player\";\r\nimport {ChainId, DefaultChainId, DefaultWalletType, WalletType} from \"../../NFTModule/Managers/NFTManager\";\r\nimport {DataLoader} from \"../../CoreModule/Utils/DataLoader\";\r\nimport {gameMgr} from \"../../CoreModule/Managers/GameManager\";\r\n\r\nexport function playerData<T extends PlayerData>(name: string) {\r\n\treturn (clazz: Constructor<T>) =>\r\n\t\tplayerMgr().registerPlayerData(clazz, name);\r\n}\r\n\r\nexport function waitForLogin(obj, key, desc) {\r\n\tconst oriFunc = desc.value;\r\n\tdesc.value = async function (...p) {\r\n\t\tawait PromiseUtils.waitFor(() => !!playerMgr().player);\r\n\t\treturn oriFunc.apply(this, p);\r\n\t}\r\n}\r\n\r\nexport function playerMgr() {\r\n\treturn getManager(PlayerManager)\r\n}\r\n\r\nconst AutoAccountKey = \"autoAccount\";\r\n\r\n@manager\r\nclass PlayerManager extends BaseManager {\r\n\r\n\tpublic player: Player = null;\r\n\r\n\tpublic playerData: {[T: string]: PlayerData} = {};\r\n\tpublic playerDataClasses: {[T: string]: Constructor<any>} = {};\r\n\r\n\tpublic needLogin = true;\r\n\r\n\t// region 玩家操作\r\n\r\n\t/**\r\n\t * 登陆\r\n\t */\r\n\tpublic async login(account: string, chainId = DefaultChainId,\r\n\t\t\t\t\t\t\t\t\t\t wallet = DefaultWalletType) {\r\n\t\tconst res = await PlayerInterface.Login({\r\n\t\t\tchainId, account, wallet\r\n\t\t});\r\n\t\tthis.player = DataLoader.load(Player, res['player']);\r\n\t\tthis.setAllPlayerData(res['data']);\r\n\t\tgameMgr().setToken(res['token']);\r\n\t}\r\n\r\n\t/**\r\n\t * TODO: 自动登录\r\n\t */\r\n\tpublic async autoLogin() {\r\n\t\tif (!!this.player) return;\r\n\t\tlet account = cc.sys.localStorage.getItem(AutoAccountKey);\r\n\t\tif (!account) cc.sys.localStorage.setItem(AutoAccountKey,\r\n\t\t\taccount = MathUtils.randomString());\r\n\t\tconsole.log(\"AutoLogin: \", account);\r\n\t\tawait this.login(account);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 玩家数据操作\r\n\r\n\t/**\r\n\t * 注册玩家数据\r\n\t */\r\n\tpublic registerPlayerData<T extends PlayerData>(\r\n\t\tclazz: Constructor<T>, name: string) {\r\n\t\tthis.playerDataClasses[name] = clazz;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取玩家数据名\r\n\t */\r\n\tpublic getPlayerDataName<T extends PlayerData>(\r\n\t\tclazz: Constructor<T>) {\r\n\t\tfor (const key in this.playerDataClasses) {\r\n\t\t\tconst pdClazz = this.playerDataClasses[key];\r\n\t\t\tif (clazz == pdClazz) return key;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取玩家数据类\r\n\t */\r\n\tpublic getPlayerDataClass<T extends PlayerData>(name: string) {\r\n\t\treturn this.playerDataClasses[name];\r\n\t}\r\n\r\n\t/**\r\n\t * 获取玩家数据\r\n\t * @param clazz 需要获取的数据类型\r\n\t */\r\n\tpublic getPlayerData<T extends PlayerData>(clazz: Constructor<T>): T {\r\n\t\treturn this.playerData[this.getPlayerDataName(clazz)] as T;\r\n\t}\r\n\r\n\t/**\r\n\t * 刷新玩家数据\r\n\t * @param clazz 需要刷新的数据类型，默认刷新全部数据\r\n\t */\r\n\tpublic async refreshPlayerData<T extends PlayerData>(\r\n\t\tclazz?: Constructor<T>) {\r\n\t\tif (clazz) {\r\n\t\t\tconst name = this.getPlayerDataName(clazz);\r\n\t\t\tconst res = await PlayerInterface.GetData({name});\r\n\t\t\tthis.setPlayerData(clazz, res[\"data\"]);\r\n\t\t} else {\r\n\t\t\tconst res = await PlayerInterface.GetData();\r\n\t\t\tthis.setAllPlayerData(res['data']);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 设置玩家数据\r\n\t */\r\n\tpublic setPlayerData<T extends PlayerData>(\r\n\t\tclazz: Constructor<T>, data: object) {\r\n\t\tconst name = this.getPlayerDataName(clazz);\r\n\t\tif (name) this.playerData[name] = DataLoader.load(clazz, data);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置玩家数据\r\n\t */\r\n\tpublic setAllPlayerData<T extends PlayerData>(dict: object) {\r\n\t\tfor (const key in dict) {\r\n\t\t\tconst clazz = this.getPlayerDataClass(key);\r\n\t\t\tif (clazz) this.setPlayerData(clazz, dict[key]);\r\n\t\t}\r\n\t}\r\n\r\n\t// endregion\r\n\r\n}\r\n\r\nimport {PlayerInterface} from \"../Common/PlayerCommon\";\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\nimport {PromiseUtils} from \"../../../Utils/PromiseUtils\";\r\nimport {MathUtils} from \"../../../Utils/MathUtils\";\r\nimport {selectorScene} from \"../../../Scenes/SelectorScene/SelectorScene\";\r\n","import {PlayerData} from \"../../PlayerModule/Data/Player\";\r\nimport {playerData} from \"../../PlayerModule/Managers/PlayerManager\";\r\nimport {field} from \"../../CoreModule/Data/BaseData\";\r\n\r\nexport type MoneyType = \"gold\" | \"diamond\" | \"fragment\" | \"medal\" | \"token\";\r\n\r\n@playerData(\"PlayerMoney\")\r\nexport class PlayerMoney extends PlayerData {\r\n\r\n\t@field\r\n\tpublic gold: number = 0;\r\n\t@field\r\n\tpublic diamond: number = 0;\r\n\t@field\r\n\tpublic fragment: number = 0;\r\n\t@field\r\n\tpublic medal: number = 0;\r\n\r\n\t// 代币\r\n\t@field\r\n\tpublic token: number = 0;\r\n\r\n\t/**\r\n\t * 获得货币快捷访问\r\n\t */\r\n\tpublic gainGold(val: number) { return this.gain(\"gold\", val); }\r\n\tpublic gainDiamond(val: number) { return this.gain(\"diamond\", val); }\r\n\tpublic gainFragment(val: number) { return this.gain(\"fragment\", val); }\r\n\tpublic gainMedal(val: number) { return this.gain(\"medal\", val); }\r\n\r\n\t/**\r\n\t * 获得货币\r\n\t */\r\n\tpublic gain(type: MoneyType, val: number) {\r\n\t\treturn this[type] = Math.max(this[type] + val, 0);\r\n\t}\r\n\r\n}\r\n","import {PlayerData} from \"../../PlayerModule/Data/Player\";\r\nimport {RankContent} from \"./RankRecord\";\r\nimport {field} from \"../../CoreModule/Data/BaseData\";\r\n\r\n/**\r\n * 玩家的排行数据\r\n */\r\nexport class PlayerRank extends PlayerData {\r\n\r\n\t@field(Object)\r\n\tpublic data: RankContent = {};\r\n\r\n}\r\n","import {dataPK, field, GameData} from \"../../CoreModule/Data/BaseData\";\r\nimport {ChainId, DefaultChainId, WalletType} from \"../../NFTModule/Managers/NFTManager\";\r\nimport {DynamicData} from \"../../CoreModule/Data/DynamicData\";\r\n\r\nexport enum PlayerState {\r\n\tNormal, Banned\r\n}\r\n\r\nexport abstract class PlayerData extends DynamicData {\r\n\r\n\t@field(String) @dataPK\r\n\tpublic uuid: string;\r\n\r\n}\r\n\r\nexport class Player extends GameData {\r\n\r\n\t@field\r\n\tpublic uuid: string = \"\"; // UUID\r\n\r\n\t@field\r\n\tpublic chainId: ChainId = DefaultChainId; // 链ID\r\n\t@field\r\n\tpublic account: string = \"\"; // 钱包地址\r\n\t@field\r\n\tpublic wallet: WalletType = 'Metamask'; // 钱包类型\r\n\r\n\t@field\r\n\tpublic name: string = \"\"; // 玩家名\r\n\t@field\r\n\tpublic avatarUrl: string = \"\"; // 头像URL\r\n\r\n\t@field(Number)\r\n\tpublic createdAt: number;\r\n\r\n\t@field\r\n\tpublic state: PlayerState = PlayerState.Normal;\r\n\t@field(Number)\r\n\tpublic stateTime: number;\r\n\t@field(String)\r\n\tpublic stateDesc: string;\r\n\r\n\t// region 基本操作\r\n\r\n\t/**\r\n\t * 登陆\r\n\t */\r\n\tpublic login() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 登出\r\n\t */\r\n\tpublic logout() {\r\n\r\n\t}\r\n\r\n\t// endregion\r\n\r\n}\r\n","import {ItemDisplay} from \"../../../../Modules/CoreModule/Components/ItemDisplay\";\r\nimport {Part, partRepo} from \"../../../../Modules/HeroModule/Data/Part\";\r\nimport {HeroType} from \"../../../../Modules/HeroModule/Data/HeroType\";\r\nimport {NFTCreator} from \"../../../../Modules/NFTModule/Utils/NFTCreator\";\r\nimport {DefaultBt1, DefaultBt2, nftMgr, Web3Enable} from \"../../../../Modules/NFTModule/Managers/NFTManager\";\r\nimport CreatedWindow from \"../CreatedWindow\";\r\nimport {blockLoading, showLoading} from \"../../../../Modules/CoreModule/Managers/LoadingManager\";\r\nimport {HeroSkeleton} from \"../../../../Utils/SpineUtils\";\r\nimport {PartType, partTypeRepo, SpecialPartType} from \"../../../../Modules/HeroModule/Data/PartType\";\r\nimport {waitForDataLoad} from \"../../../../Modules/CoreModule/Managers/DataManager\";\r\nimport {Hero} from \"../../../../Modules/HeroModule/Data/Hero\";\r\nimport {HeroInterface} from \"../../../../Modules/HeroModule/Common/HeroCommon\";\r\nimport {QualityType} from \"../../../../Modules/HeroModule/Data/Quality\";\r\nimport {playerMgr} from \"../../../../Modules/PlayerModule/Managers/PlayerManager\";\r\nimport {MathUtils} from \"../../../../Utils/MathUtils\";\r\nimport Skeleton = sp.Skeleton;\r\nimport Label = cc.Label;\r\nimport EditBox = cc.EditBox;\r\nimport Camera = cc.Camera;\r\nimport RenderTexture = cc.RenderTexture;\r\nimport Sprite = cc.Sprite;\r\nimport {NFTLoading} from \"../../../../Modules/NFTModule/Common/NFTCommon\";\r\nimport {PromiseUtils} from \"../../../../Utils/PromiseUtils\";\r\nimport GIFUtils from \"../../../../Utils/GIFUtils\";\r\nimport {selectorScene} from \"../../SelectorScene\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nexport const DefaultStand: string = 'stand';\r\nexport const DefaultAttack: string = 'attack_1';\r\n\r\n@ccclass\r\nexport default class PreviewPictureDisplay extends ItemDisplay<HeroSkeleton> {\r\n\r\n\t@property(Skeleton)\r\n\tskeleton: Skeleton = null;\r\n\t@property(Skeleton)\r\n\ttemp: Skeleton = null;\r\n\t@property(Label)\r\n\tprice: Label = null;\r\n\t@property(Label)\r\n\theroName: Label = null;\r\n\t@property(Label)\r\n\tlastCount: Label = null;\r\n\t@property(CreatedWindow)\r\n\tcreatedWindow: CreatedWindow = null;\r\n\t@property(Sprite)\r\n\theroBackground: Sprite = null;\r\n\r\n\t// region 初始化\r\n\r\n\tprotected onLoad() {\r\n\t\tthis.initScreenShot();\r\n\t}\r\n\r\n\t@waitForDataLoad\r\n\tprotected start() {\r\n\t\tthis.setItem(new HeroSkeleton(this.skeleton, this.temp));\r\n\t}\r\n\r\n\t/**\r\n\t * 设置默认骨骼\r\n\t */\r\n\tpublic async setHeroType(type: HeroType) {\r\n\t\tlet parts = type.getDefaultParts();\r\n\t\tfor (const part of parts) {\r\n\t\t\t// const pt = part.partType;\r\n\t\t\t// // 没有才添加，但身体除外（貌似不需要？）\r\n\t\t\t// if (pt.special == SpecialPartType.Body ||\r\n\t\t\t// \t!this.item.findPart(pt))\r\n\t\t\t// await\r\n\t\t\tthis.addPart(part);\r\n\t\t}\r\n\t\t// 这里不能用foreach，因为必须保证body是第一个添加的part，其实是slot数量不一致导致的报错\r\n\t\t// type.getDefaultParts().forEach( p => {\r\n\t\t// \tthis.item.addPart(p);\r\n\t\t// })\r\n\t\tthis.refresh();\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 绘制控制\r\n\r\n\t/**\r\n\t * 刷新界面\r\n\t */\r\n\trefresh() {\r\n\t\tsuper.refresh();\r\n\t\tif (this.item == null) return;\r\n\r\n\t\tthis.refreshHeroType();\r\n\t\tthis.refreshAnimation();\r\n\t\t// this.refreshBanList();\r\n\t\tthis.refreshHeroBackground();\r\n\t\tthis.refreshPrice().then();\r\n\r\n\t\tthis.item.refresh(selectorScene().editorMode).then();\r\n\t}\r\n\trefreshHeroType() {\r\n\t\tthis.heroName.string = this.item.heroType.getDisplayName();\r\n\r\n\t\tif (this.lastCount)\r\n\t\t\tnftMgr().getNFTCount(DefaultBt1, DefaultBt2).then(res =>\r\n\t\t\t\tthis.lastCount.string = res.restCount + \"/\" + res.limitCreateCount\r\n\t\t\t)\r\n\t}\r\n\trefreshAnimation() {\r\n\t\tthis.skeleton.clearTrack(0);\r\n\t\tthis.skeleton.setAnimation(0, DefaultStand, true);\r\n\t}\r\n\t// refreshBanList() {\r\n\t// \tthis.banList = [];\r\n\t// \tconst config = configMgr().config(PartConfig);\r\n\t// \tthis.item.parts.forEach(p => {\r\n\t// \t\tconst items = config.ptBptScale.filter(\r\n\t// \t\t\titem => item[1] == p.oriId && item[2] == 0); // 寻找互斥搭配\r\n\t// \t\titems.forEach(item => {\r\n\t// \t\t\tconst np = partRepo().getById(item[0]);\r\n\t// \t\t\tif (np.partType.baseTypeId == p.partTypeId)\r\n\t// \t\t\t\tthis.banList.push(item[0]);\r\n\t// \t\t})\r\n\t// \t\t// if (index >= 0) this.banList.push(config.tarPartIds[index]);\r\n\t//\r\n\t// \t\t// let index = config.srcPartIds.findIndex(i => i == p.index);\r\n\t// \t\t// if (index >= 0) this.banList.push(config.tarPartIds[index]);\r\n\t// \t\t// index = config.tarPartIds.findIndex(i => i == p.index);\r\n\t// \t\t// if (index >= 0) this.banList.push(config.srcPartIds[index]);\r\n\t// \t});\r\n\t// }\r\n\t@blockLoading\r\n\tasync refreshPrice() {\r\n\t\t// const res = await nftMgr().getNFTPrice(DefaultBt1, DefaultBt2, this.item.nftPartIds)\r\n\t\t// this.price.string = res.toString();\r\n\t}\r\n\tbackgroundPart: Part = null;\r\n\trefreshHeroBackground() {\r\n\t\tif (!this.backgroundPart) return;\r\n\t\tlet item = this.item;\r\n\t\tthis.backgroundPart.picture().then(res => item == this.item ? this.heroBackground.spriteFrame = res : null);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 部件控制\r\n\r\n\t/**\r\n\t * 添加部件\r\n\t */\r\n\tpublic addPart(part: Part) {\r\n\t\tif (!part) return;\r\n\t\tif (part.partType.isBody)\r\n\t\t\tthis.item?.setHeroTypeId(part.heroTypeId);\r\n\t\tthis.item?.addPart(part);\r\n\t\tif (part.partType.isBackground)\r\n\t\t\tthis.backgroundPart = part;\r\n\t\tthis.refresh();\r\n\r\n\t\t// let idx = this.selectedParts.findIndex(\r\n\t\t// \tp => p.partTypeId == part.partTypeId);\r\n\t\t// const lastPart = this.selectedParts[idx];\r\n\t\t// idx == -1 ? this.selectedParts.push(part) : this.selectedParts[idx] = part;\r\n\t\t//\r\n\t\t// const target = SpineUtils.skeleton(this.skeleton);\r\n\t\t// if (lastPart) SpineUtils.removePart(target, lastPart);\r\n\t\t//\r\n\t\t// this.temp.skeletonData = part.skeleton;\r\n\t\t//\r\n\t\t// const source = SpineUtils.skeleton(this.temp);\r\n\t\t//\r\n\t\t// SpineUtils.addPart(this.selectedHeroType, target, source, part);\r\n\t\t//\r\n\t\t// // part.slotNames.forEach(name => {\r\n\t\t// // \tconst slot = this.getSlot(name);\r\n\t\t// // \tconst tSlot = this.getTmpSlot(name, part.heroTypeId);\r\n\t\t// // \t// tSlot原则上是存在Attachment的\r\n\t\t// // \tslot?.setAttachment(tSlot.getAttachment().copy());\r\n\t\t// // });\r\n\t\t//\r\n\t}\r\n\r\n\t/**\r\n\t * 移除部件\r\n\t */\r\n\tpublic removePart(part: Part) {\r\n\t\tif (!part) return;\r\n\t\tthis.item?.removePart(part);\r\n\t\tthis.refresh();\r\n\r\n\t\t// let idx = this.selectedParts.findIndex(\r\n\t\t// \tp => p.partTypeId == part.partTypeId);\r\n\t\t// this.selectedParts.splice(idx, 1);\r\n\t\t//\r\n\t\t// const target = SpineUtils.skeleton(this.skeleton);\r\n\t\t//\r\n\t\t// SpineUtils.removePart(target, part);\r\n\t\t//\r\n\t\t// // part.slotNames.forEach(name =>\r\n\t\t// // \tthis.getSlot(name)?.setAttachment(null)\r\n\t\t// // );\r\n\t\t//\r\n\r\n\t\t// if(this.skeleton.findSlot(part.slotType().name + this.getSuffixString(0)))\r\n\t\t// \tfor (let i = 0; this.skeleton.findSlot(part.slotType().name + this.getSuffixString(0)) ; i++)\r\n\t\t// \t\tthis.skeleton.findSlot(part.slotType().name + this.getSuffixString(i)).setAttachment(null);\r\n\t\t// else this.skeleton.findSlot(part.slotType().name).setAttachment(null);\r\n\t}\r\n\r\n\tprivate _partsChanged: boolean = false;\r\n\tpublic get partsChanged() {\r\n\t\tconst res = this._partsChanged;\r\n\t\tthis._partsChanged = false\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 选择随机部件\r\n\t */\r\n\t@showLoading\r\n\t@blockLoading\r\n\tpublic async random() {\r\n\t\t// TODO: 上链与唯一性检查\r\n\t\tawait this.randomParts();\r\n\t\tthis._partsChanged = true;\r\n\t}\r\n\tasync randomParts(partType?: PartType){\r\n\t\tif (partType === undefined) { // 如果没有该参数\r\n\t\t\tconst roots = partTypeRepo().rootPartTypes();\r\n\t\t\tfor (const root of roots)\r\n\t\t\t\troot && await this.randomParts(root);\r\n\t\t} else {\r\n\t\t\tif (partType.special == SpecialPartType.Background) return;\r\n\t\t\tconst parts = partRepo().findByPartTypeId(partType.id)\r\n\t\t\t\t.filter(p => this.item.calcScale(p) > 0 && p.stock > 0);\r\n\t\t\tif (partType.optional) parts.push(null);\r\n\t\t\tconst part = MathUtils.randomPick(parts);\r\n\t\t\tif (part) this.addPart(part);\r\n\t\t\telse { // 移除\r\n\t\t\t\tthis.addPart(parts[0]);\r\n\t\t\t\tthis.removePart(parts[0]);\r\n\t\t\t}\r\n\r\n\t\t\tconst subs = partType.subPartTypes;\r\n\t\t\tfor (const sub of subs) await this.randomParts(sub); // 继续处理sub\r\n\t\t}\r\n\r\n\t\t// partTypeRepo().list.forEach(pt => {\r\n\t\t// \tlet parts = partRepo().findByPartTypeId(pt.id)\r\n\t\t// \t\t.filter(p => {\r\n\t\t// \t\t\tconst htId = p.heroTypeId,\r\n\t\t// \t\t\t\tchtId = this.item.heroTypeId;\r\n\t\t// \t\t\treturn p.stock > 0\r\n\t\t// \t\t\t\t&& config.pHtScale[pt.id]?.[htId]?.[chtId] > 0\r\n\t\t// \t\t\t\t&& !!this.banList.find(i => i == p.oriId);\r\n\t\t// \t\t});\r\n\t\t//\r\n\t\t// \tif (parts.length == 0) return;\r\n\t\t//\r\n\t\t// \tlet i = Math.floor(Math.random() *\r\n\t\t// \t\t(parts.length + (pt.optional ? 1 : 0)));\r\n\t\t// \tif (i == parts.length) { // 清空\r\n\t\t// \t\tthis.addPart(parts[0]);\r\n\t\t// \t\tthis.removePart(parts[0]);\r\n\t\t// \t} else this.addPart(parts[i]);\r\n\t\t// })\r\n\t\t// let pids: number[] = [], parts: Part[] = [];\r\n\t\t// do {\r\n\t\t// \tpids = [];\r\n\t\t// \tparts = [];\r\n\t\t// \t// DataUtils.heroType(this.item.heroTypeId, \"id\").getChildren().forEach(t => {\r\n\t\t// \tpartTypeRepo().list.forEach(t => {\r\n\t\t// \t\tlet pts = partRepo().list.filter(p => p.partTypeId == t.id && p.stock > 0);\r\n\t\t// \t\tif (pts.length == 0) return;\r\n\t\t// \t\tlet i = Math.floor(Math.random() * (pts.length + (t.optional ? 1 : 0)));\r\n\t\t// \t\tif(i == pts.length) {\r\n\t\t// \t\t\tpids.push(-1);\r\n\t\t// \t\t\tparts.push(pts[0]);\r\n\t\t// \t\t} else {\r\n\t\t// \t\t\tpids.push(pts[i].partTypeId + PartIdOffset);\r\n\t\t// \t\t\tparts.push(pts[i]);\r\n\t\t// \t\t}\r\n\t\t// \t})\r\n\t\t// } while (await nftMgr().notUniqueParts(pids.filter(e => e != -1)));\r\n\t\t// pids.forEach((e, i) => {\r\n\t\t// \tif(e == -1) {\r\n\t\t// \t\tthis.addPart(parts[i]);\r\n\t\t// \t\tthis.removePart(parts[i]);\r\n\t\t// \t}else this.addPart(parts[i]);\r\n\t\t// })\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 更新控制\r\n\r\n\t/**\r\n\t * 更新\r\n\t */\r\n\tprotected update(dt: number) {\r\n\t\tthis.updateScale();\r\n\t\tif (this.recording) {\r\n\t\t\tthis.skeleton.setAnimation(0, DefaultStand, true);\r\n\t\t\t// @ts-ignore\r\n\t\t\tthis.skeleton.update(this.images.length / 60);\r\n\t\t\tthis.images.push(this.shot());\r\n\t\t}\r\n\t}\r\n\r\n\tpublic skeletonSize: number = 300;\r\n\r\n\tprivate updateScale(){\r\n\t\tconst xRate = this.skeleton.node.scaleX / this.skeletonSize;\r\n\t\tconst yRate = this.skeleton.node.scaleY / this.skeletonSize;\r\n\t\tlet k = Math.max(\r\n\t\t\tthis.skeleton.node.width * xRate,\r\n\t\t\tthis.skeleton.node.height * yRate);\r\n\t\tif (k > 1) {\r\n\t\t\tthis.skeleton.node.scaleX /= k;\r\n\t\t\tthis.skeleton.node.scaleY /= k;\r\n\t\t}\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 创建NFT\r\n\r\n\t@property(EditBox)\r\n\tnickname: EditBox = null;\r\n\r\n\t@showLoading\r\n\tasync createNFT(){\r\n\t\tconst picture = this.shot();\r\n\r\n\t\tthis.startRecording();\r\n\t\tlet recordingTime = Math.floor(this.skeleton.findAnimation(DefaultStand).duration * 60);\r\n\t\tawait PromiseUtils.waitFor(() => this.images.length >= recordingTime);\r\n\t\tthis.recording = false;\r\n\t\tconst gif = await GIFUtils.makeGIF(this.images.filter((e, i) => i < recordingTime));\r\n\r\n\t\tconsole.log(\"this.item.nftPartIds\", this.item.nftPartIds)\r\n\r\n\t\tif (Web3Enable) {\r\n\t\t\tconst creator = new NFTCreator();\r\n\t\t\tcreator.name = this.nickname.string;\r\n\t\t\tcreator.picture = picture;\r\n\t\t\tcreator.gif = gif;\r\n\t\t\tcreator.partIds = this.item.nftPartIds;\r\n\t\t\tcreator.create().then(res => {\r\n\t\t\t\tthis.createdWindow.setPicture(creator.picture);\r\n\t\t\t\tthis.createdWindow.setQuality(Number(res.rawData.quality));\r\n\t\t\t\tthis.createdWindow.show();\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\t// TODO: 本地创建\r\n\t\t\tconsole.log(\"本地创建\");\r\n\t\t\tconst hero = Hero.create(playerMgr().player.account,\r\n\t\t\t\tthis.item.heroTypeId, this.item.partSettings, this.nickname.string);\r\n\r\n\t\t\tHeroInterface.CreateHero({hero}).then(res => {\r\n\t\t\t\tconst hero: Hero = res.hero;\r\n\t\t\t\tthis.createdWindow.setPicture(picture);\r\n\t\t\t\t// 此处的品质是平台的品质\r\n\t\t\t\tthis.createdWindow.setQuality(QualityType.UR - hero.quality + 1);\r\n\t\t\t\tthis.createdWindow.show();\r\n\t\t\t})\r\n\t\t}\r\n\t\t// .catch(e => {\r\n\t\t// \talertMgr().alert(\"操作失败\", e, AlertDialogType.OK).then();\r\n\t\t// \tconsole.error(e);\r\n\t\t// });\r\n\t}\r\n\r\n\t//endregion\r\n\r\n\t//region 截图处理\r\n\r\n\t@property(Camera)\r\n\tcamera: Camera = null;\r\n\r\n\ttexture: RenderTexture = null;\r\n\twindowSize: number = Math.max(cc.winSize.width, cc.winSize.height);\r\n\ttargetSize: number = 600;\r\n\r\n\tinitScreenShot() {\r\n\t\tthis.camera.enabled = false;\r\n\t\tthis.texture = new RenderTexture();\r\n\t\tthis.texture.initWithSize(this.windowSize, this.windowSize, cc.RenderTexture.DepthStencilFormat.RB_FMT_S8)\r\n\t\tthis.camera.targetTexture = this.texture;\r\n\t}\r\n\r\n\tshot(): string {\r\n\t\t// 截图\r\n\t\tthis.camera.render(undefined);\r\n\r\n\t\t// 处理截图数据\r\n\t\tlet texture = this.texture;\r\n\t\tlet data = texture.readPixels();\r\n\t\tlet width = texture.width;\r\n\t\tlet height = texture.height;\r\n\t\tlet canvasTemp = document.createElement('canvas');\r\n\t\tlet ctxTemp = canvasTemp.getContext('2d');\r\n\t\tcanvasTemp.width = width;\r\n\t\tcanvasTemp.height = height;\r\n\r\n\t\t// 上下翻转\r\n\t\tlet rowBytes = width * 4;\r\n\t\tfor (let row = 0; row < height; row++) {\r\n\t\t\tlet srow = height - 1 - row;\r\n\t\t\tlet imageData = ctxTemp.createImageData(width, 1);\r\n\t\t\tlet start = srow*width*4;\r\n\t\t\tfor (let i = 0; i < rowBytes; i++)\r\n\t\t\t\timageData.data[i] = data[start+i];\r\n\t\t\tctxTemp.putImageData(imageData, 0, row);\r\n\t\t}\r\n\r\n\t\t// 提取中心部分人物\r\n\t\tlet canvas = document.createElement('canvas');\r\n\t\tlet ctx = canvas.getContext('2d');\r\n\t\tcanvas.width = this.targetSize;\r\n\t\tcanvas.height = this.targetSize;\r\n\t\tctx.drawImage(canvasTemp, (this.windowSize - this.targetSize) / 2, (this.windowSize - this.targetSize) / 2, this.targetSize, this.targetSize, 0, 0, this.targetSize, this.targetSize);\r\n\r\n\t\t// 生成并返回base64URL\r\n\t\treturn canvas.toDataURL(\"image/png\");\r\n\t}\r\n\r\n\tdownloadScreenShot(url: string){\r\n\t\t// 把图片生成后download到本地\r\n\t\tdocument.location.href = url.replace(\r\n\t\t\t/^data:image[^;]*/, \"data:image/octet-stream\");\r\n\t}\r\n\r\n\trecording: boolean = false;\r\n\timages: string[] = [];\r\n\r\n\tprivate startRecording() {\r\n\t\tthis.images = [];\r\n\t\tthis.recording = true;\r\n\t}\r\n\r\n\t//endregion\r\n\r\n}\r\n","export class PromiseUtils {\r\n\tpublic static wait(time) {\r\n\t\treturn new Promise<boolean>(resolve =>\r\n\t\t\tsetTimeout(() => resolve(true), time)\r\n\t\t)\r\n\t}\r\n\r\n\tpublic static waitFor(cond, interval: number = 100, maxTimes: number = 10000,\r\n\t\t\t\t\t\t\t\t\t\t\t\tmode: 'timeout' | 'interval' = 'timeout', title?: string) {\r\n\t\treturn new Promise<boolean>(resolve => {\r\n\t\t\tconst check = async (success?, fail?) => {\r\n\t\t\t\tif (title) console.log(\"Waiting for:\", title, cond);\r\n\t\t\t\tconst res = await cond();\r\n\t\t\t\tif (title) console.log(\"Current result:\", title, res);\r\n\r\n\t\t\t\tif (res || --maxTimes <= 0) {\r\n\t\t\t\t\tsuccess && success(); resolve(res);\r\n\t\t\t\t} else fail && fail();\r\n\t\t\t}\r\n\t\t\tlet check_;\r\n\r\n\t\t\tswitch (mode) {\r\n\t\t\t\tcase \"timeout\":\r\n\t\t\t\t\tcheck_ = () => check(null,\r\n\t\t\t\t\t\t() => setTimeout(check_, interval));\r\n\t\t\t\t\tcheck_().then();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"interval\":\r\n\t\t\t\t\tcheck_ = () => check(() => clearInterval(handle));\r\n\t\t\t\t\tconst handle = setInterval(check_, interval);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * 相当于在一个promise的基础上加上一个超时检测机制\r\n\t */\r\n\tpublic static waitForResult<T>(promise: Promise<T>, maxWaitTime: number = 30000,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t default_?: any, useReject: boolean = false) {\r\n\t\treturn new Promise<T>((resolve, reject) => {\r\n\t\t\tsetTimeout(() =>\r\n\t\t\t\tuseReject ? reject(default_) : resolve(default_)\r\n\t\t\t, maxWaitTime);\r\n\t\t\tpromise.then(resolve).catch(reject);\r\n\t\t})\r\n\t}\r\n\r\n\tprivate static retryColdDownTime: number = 3000;\r\n\r\n\tpublic static waitForRetry<T>(promise: () => Promise<T>, maxRetryTimes: number = 20,\r\n\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\tdefault_?: any, useReject: boolean = false) {\r\n\t\treturn new Promise<T>((resolve, reject) => {\r\n\t\t\tlet retryTimes = 0;\r\n\t\t\tlet retry = () => {\r\n\t\t\t\tretryTimes++;\r\n\t\t\t\t// console.log(\"第\" + retryTimes + \"次尝试\");\r\n\t\t\t\tif (retryTimes > maxRetryTimes)\r\n\t\t\t\t\treject();\r\n\t\t\t\telse\r\n\t\t\t\t\tpromise().then(res => resolve(res)).catch(rej => {setTimeout(retry, this.retryColdDownTime)});\r\n\t\t\t}\r\n\t\t\tretry();\r\n\t\t})\r\n\t}\r\n\r\n\tpublic static funcWrapper(main: Function, before: Function, after: Function) {\r\n\t\tbefore();\r\n\t\ttry { return main() }\r\n\t\tfinally { after(); }\r\n\t}\r\n}\r\n","import {field, GameData} from \"../../CoreModule/Data/BaseData\";\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\nimport {BaseRepository, getRepository, repository} from \"../../CoreModule/Data/BaseRepository\";\r\nimport {data, StaticData} from \"../../CoreModule/Data/StaticData\";\r\nimport {i18nMgr} from \"../../CoreModule/Managers/I18nManager\";\r\n\r\nexport enum QualityType {\r\n\tN, R, SR, SSR, UR\r\n}\r\n\r\n@data(\"Quality\")\r\nexport class Quality extends StaticData {\r\n\r\n\t@field\r\n\tpublic id: QualityType = QualityType.N;\r\n\t@field\r\n\tpublic color: string = \"FFFFFF\";\r\n\t@field\r\n\tpublic rate: number = 1;\r\n\r\n\t/**\r\n\t * 缩写\r\n\t */\r\n\tpublic get shortName() { return QualityType[this.id]; }\r\n\r\n\t// \treturn i18nMgr().makeStr(`QualityShort${this.id}`, QualityType[this.id]);\r\n\t// }\r\n\t// public get fullName() {\r\n\t// \treturn i18nMgr().makeStr(`QualityFull${this.id}`, QualityType[this.id]);\r\n\t// }\r\n\r\n}\r\n\r\nexport function qualityRepo() {\r\n\treturn getRepository(QualityRepo);\r\n}\r\n\r\n@repository\r\nexport class QualityRepo extends BaseRepository<Quality> {\r\n\r\n\tget clazz(): Constructor<Quality> { return Quality; }\r\n\r\n\t// @ts-ignore\r\n\tgetById(id: QualityType): Quality { }\r\n\r\n\t/**\r\n\t * 获取数据\r\n \t */\r\n\tpublic n() { return this.getById(QualityType.N); }\r\n\tpublic r() { return this.getById(QualityType.R); }\r\n\tpublic sr() { return this.getById(QualityType.SR); }\r\n\tpublic ssr() { return this.getById(QualityType.SSR); }\r\n\tpublic ur() { return this.getById(QualityType.UR); }\r\n\r\n}\r\n","import property = cc._decorator.property;\r\nimport ccclass = cc._decorator.ccclass;\r\nimport executeInEditMode = cc._decorator.executeInEditMode;\r\nimport disallowMultiple = cc._decorator.disallowMultiple;\r\nimport requireComponent = cc._decorator.requireComponent;\r\nimport menu = cc._decorator.menu;\r\n\r\ncc.macro.ENABLE_WEBGL_ANTIALIAS = true;\r\n\r\n@ccclass()\r\n//@ts-ignore\r\n@executeInEditMode(true)\r\n//@ts-ignore\r\n@disallowMultiple(true)\r\n@requireComponent(cc.Mask)\r\n@menu(\"渲染组件/圆角遮罩\")\r\nexport class RadiusMask extends cc.Component {\r\n\r\n    @property()\r\n    private _radius: number = 50;\r\n\r\n    @property({tooltip: \"圆角半径:\\n0-1之间为最小边长比例值, \\n>1为具体像素值\"})\r\n\r\n    public get radius(): number {\r\n        return this._radius;\r\n    }\r\n\r\n//    public radius: number = 50;\r\n    public set radius(r: number) {\r\n        this._radius = r;\r\n        this.updateMask(r);\r\n    }\r\n\r\n    // @property(cc.Mask)\r\n    protected mask: cc.Mask = null;\r\n\r\n    protected onEnable(): void {\r\n        this.mask = this.getComponent(cc.Mask);\r\n        this.updateMask(this.radius);\r\n    }\r\n\r\n    private updateMask(r: number) {\r\n        let _radius = r >= 0 ? r : 0;\r\n        if (_radius < 1) {\r\n            _radius = Math.min(this.node.width, this.node.height) * _radius;\r\n        }\r\n        this.mask[\"radius\"] = _radius;\r\n        this.mask[\"onDraw\"] = this.onDraw.bind(this.mask);\r\n        this.mask[\"_updateGraphics\"] = this._updateGraphics.bind(this.mask);\r\n        this.mask.type = cc.Mask.Type.RECT;\r\n    }\r\n\r\n    private _updateGraphics() {\r\n\r\n        // @ts-ignore.\r\n        let graphics = this._graphics;\r\n        if (!graphics) {\r\n            return;\r\n        }\r\n        this.onDraw(graphics);\r\n    }\r\n\r\n    /**\r\n     * mask 用于绘制罩子的函数.\r\n     * this 指向mask 对象,需要特别注意.\r\n     * @param graphics\r\n     */\r\n    protected onDraw(graphics: cc.Graphics) {\r\n        // Share render data with graphics content\r\n        graphics.clear(false);\r\n        let node = this.node;\r\n        let width = node.width;\r\n        let height = node.height;\r\n        let x = -width * node.anchorX;\r\n        let y = -height * node.anchorY;\r\n        graphics.roundRect(x, y, width, height, this.radius || 0);\r\n        if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {\r\n            graphics.stroke();\r\n        } else {\r\n            graphics.fill();\r\n        }\r\n    }\r\n}","import Animation = cc.Animation;\r\nimport requireComponent = cc._decorator.requireComponent;\r\nimport menu = cc._decorator.menu;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\n@requireComponent(Animation)\r\n@menu(\"其他组件/随机动画辅助\")\r\nexport default class RandomAnimation extends cc.Component {\r\n\r\n    @property(Animation)\r\n    animation: Animation = null;\r\n\r\n    @property(Number)\r\n    timeOffset: number = 0; // 随机时间偏移量最大值\r\n    @property(Number)\r\n    timeOffsetAdd: number = 0; // 随机时间偏移量附加值\r\n    @property(Number)\r\n    xOffset: number = 0; // 随机X轴位置偏移量最大值（绝对值）\r\n    @property(Number)\r\n    yOffset: number = 0; // 随机Y轴位置偏移量最大值（绝对值）\r\n    @property(Number)\r\n    speedUp: number = 0; // 随机速度增量最大值\r\n    @property(Boolean)\r\n    resetPositionEveryLoop: boolean = true; // 是否再每个动画循环完成后都随机位置\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    private centerX: number = 0;\r\n    private centerY: number = 0;\r\n\r\n    protected start() {\r\n        this.reset();\r\n        if (this.resetPositionEveryLoop)\r\n            this.animation.on(\"lastframe\", this.resetPosition, this);\r\n    }\r\n\r\n    protected onEnable() {\r\n        this.centerX = this.node.x;\r\n        this.centerY = this.node.y;\r\n        this.reset();\r\n    }\r\n\r\n    private reset() {\r\n        if (!this.animation)\r\n            this.animation = this.getComponent(Animation);\r\n        this.animation.play();\r\n        this.animation.sample(this.animation.defaultClip.name);\r\n        this.animation.stop();\r\n        this.resetPosition();\r\n        this.timer = Math.random() * this.timeOffset;\r\n        this.animation.defaultClip.speed = 1 + Math.random() * this.speedUp;\r\n        this.isPlaying = false;\r\n    }\r\n\r\n    private timer: number = 0;\r\n    private isPlaying: boolean = false;\r\n\r\n    protected update(dt: number) {\r\n        if (!this.isPlaying) {\r\n            if (this.timer <= 0) {\r\n                this.animation.play();\r\n                this.isPlaying = true;\r\n            }\r\n            this.timer -= dt;\r\n        }\r\n    }\r\n\r\n    private resetPosition() {\r\n        this.node.x = this.centerX + Math.random() * this.xOffset * 2 - this.xOffset;\r\n        this.node.y = this.centerY + Math.random() * this.yOffset * 2 - this.yOffset;\r\n    }\r\n\r\n}\r\n","import {get, post} from \"../../CoreModule/Common/CoreCommon\";\r\n\r\nexport class RankInterface {\r\n\r\n    @get(\"/rank/pvp/get\") static GetPVPRank(d?): any {}\r\n\r\n}\r\n","import {ItemContainer} from \"../../../CoreModule/Components/ItemContainer\";\r\nimport {Hero} from \"../../../HeroModule/Data/Hero\";\r\nimport RankItemDisplay from \"./RankItemDisplay\";\r\nimport {waitForDataLoad} from \"../../../CoreModule/Managers/DataManager\";\r\nimport {waitForLogin} from \"../../../PlayerModule/Managers/PlayerManager\";\r\nimport {RankInterface} from \"../../../RankModule/Common/RankCommon\";\r\nimport {ScrollviewFilter} from \"../../../CoreModule/Utils/ScrollviewFilter\";\r\nimport Node = cc.Node;\r\nimport {DataLoader} from \"../../../CoreModule/Utils/DataLoader\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class RankItemContainer extends ItemContainer<Hero, RankItemDisplay> {\r\n\r\n    start () {\r\n        this.setup().then();\r\n    }\r\n\r\n    @waitForDataLoad\r\n    @waitForLogin\r\n    private async setup() {\r\n        let nfts: [] = (await RankInterface.GetPVPRank()).nfts;\r\n        let items: Hero[] = nfts.map(nft => DataLoader.load(Hero, nft)).sort((a, b) => a.rank - b.rank);\r\n        this.setItems(items);\r\n    }\r\n\r\n    update (dt) {\r\n    }\r\n\r\n    onItemsChanged() {\r\n        super.onItemsChanged();\r\n        let nodes : Node[] = [];\r\n        this.itemsComponents.forEach(item => { if(item.node.active == true) nodes.push(item.node) })\r\n        ScrollviewFilter.filter(\"vertical\", this.container, nodes, 5, this.node.height, 170);\r\n    }\r\n}\r\n","import Label = cc.Label;\r\nimport Sprite = cc.Sprite;\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport {battleScene} from \"../../../../Scenes/BattleScene\";\r\nimport HeroWithAvatar from \"../HeroWithAvatar\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class RankItemDisplay extends HeroWithAvatar {\r\n\r\n    @property(Label)\r\n    nameLabel: Label = null;\r\n    @property(Label)\r\n    powerLabel: Label = null;\r\n    @property(Label)\r\n    rankLabel: Label = null;\r\n    @property(Label)\r\n    qualityLabel: Label = null;\r\n    @property(Label)\r\n    levelLabel: Label = null;\r\n\r\n    @property(Sprite)\r\n    rankSprite: Sprite = null;\r\n    @property(Sprite)\r\n    restraintSprite: Sprite = null;\r\n    @property(Sprite)\r\n    qualitySprite: Sprite = null;\r\n    @property([SpriteFrame])\r\n    rankPictures: SpriteFrame[] = [];\r\n    @property([SpriteFrame])\r\n    restraintPictures: SpriteFrame[] = [];\r\n    @property([SpriteFrame])\r\n    qualityPictures: SpriteFrame[] = [];\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    // update (dt) {}\r\n\r\n    private quality: string[] = [\"N\", \"R\", \"SR\", \"SSR\", \"UR\"];\r\n\r\n    refresh() {\r\n        super.refresh();\r\n        this.nameLabel.string = this.item.name;\r\n        this.powerLabel.string = this.item.battlePoint.toString();\r\n        this.rankLabel.string = this.item.rank > 3 ? this.item.rank.toString() : \"\";\r\n        this.qualityLabel.string = this.quality[this.item.quality];\r\n        this.levelLabel.string = \"Lv.\" + this.item.level.level.toString();\r\n\r\n        this.rankSprite.spriteFrame = this.item.rank < 4 ? this.rankPictures[this.item.rank - 1] : null;\r\n        this.restraintSprite.spriteFrame = this.restraintPictures[this.item.restraint];\r\n        this.qualitySprite.spriteFrame = this.qualityPictures[this.item.quality];\r\n    }\r\n\r\n    fightBtn() {\r\n        battleScene().startPVPBattle(this.item.nftId).then();\r\n    }\r\n}\r\n","import {BaseData, field, GameData, PK, pkType} from \"../../CoreModule/Data/BaseData\";\r\nimport {ChainId, DefaultChainId, WalletType} from \"../../NFTModule/Managers/NFTManager\";\r\n\r\nexport type RankContent = {\r\n\t[key in RankType]?: number\r\n}\r\nexport type RankType = 'battle' | 'gold' | 'diamond' | 'pvp';\r\n\r\nexport const RankTypes: RankType[] = ['battle', 'gold', 'diamond', 'pvp'];\r\n\r\nexport class RankItem extends BaseData {\r\n\r\n\t@field(String)\r\n\tpublic uuid: string;\r\n\t@field(Number)\r\n\tpublic value: number;\r\n\r\n\t@field\r\n\tpublic chainId?: ChainId = DefaultChainId; // 链ID\r\n\t@field\r\n\tpublic account?: string = \"\"; // 钱包地址\r\n\t@field\r\n\tpublic wallet?: WalletType = 'Metamask'; // 钱包类型\r\n\r\n\t@field\r\n\tpublic name?: string = \"\"; // 玩家名\r\n\t@field\r\n\tpublic avatarUrl?: string = \"\"; // 头像URL\r\n\r\n}\r\n\r\nexport class RankRecord extends GameData {\r\n\r\n\t@field(String)\r\n\tpublic type: RankType;\r\n\t@field(Number)\r\n\tpublic createdAt: number;\r\n\t@field([RankItem])\r\n\tpublic list: RankItem[] = [];\r\n\r\n\t/**\r\n\t * 创建\r\n\t */\r\n\tpublic static create(type: RankType, list: RankItem[]) {\r\n\t\tconst res = new RankRecord();\r\n\t\tres.type = type;\r\n\t\tres.createdAt = Date.now();\r\n\t\tres.list = list;\r\n\t\treturn res;\r\n\t}\r\n}\r\n","\r\nimport {Result} from \"../Data/Result\";\r\nimport {Battler} from \"../Data/Battler\";\r\n\r\nexport type MotionState = 'not_started' | 'playing' | 'ended' | 'finished';\r\n\r\nexport class ResultProcessor {\r\n\r\n\tpublic battler: Battler;\r\n\tpublic result: Result;\r\n\r\n\tpublic static create(battler: Battler, result: Result) {\r\n\t\tconst res = new ResultProcessor();\r\n\t\tres.result = result;\r\n\t\tres.battler = battler;\r\n\t\treturn res;\r\n\t}\r\n\r\n\tpublic process() {\r\n\t\tthis.doProcess();\r\n\t}\r\n\r\n\tprivate doProcess() {\r\n\r\n\t}\r\n}\r\n","import {BaseData, field} from \"../../CoreModule/Data/BaseData\";\r\nimport {Action} from \"./Action\";\r\n\r\nexport type ResultType = \"damage\" | \"recover\" | \"drain\" | \"miss\";\r\n\r\nexport class Result extends BaseData {\r\n\r\n\t@field\r\n\tpublic hpDamage: number = 0; // HP伤害\r\n\t@field\r\n\tpublic hpRecover: number = 0; // HP回复\r\n\t@field\r\n\tpublic hpDrain: number = 0; // HP吸收\r\n\r\n\t@field\r\n\tpublic isMiss: boolean = false; // 是否闪避\r\n\t@field\r\n\tpublic isCritical: boolean = false; // 是否暴击\r\n\r\n\t// @field([StatusChange])\r\n\t// public statusChanges: StatusChange[] = [];\r\n\r\n\tpublic action: Action;\r\n\r\n\tconstructor(index?, parent?) {\r\n\t\tsuper(index);\r\n\t\tthis.action = parent;\r\n\t}\r\n\r\n\tpublic static create(action: Action, type: ResultType,\r\n\t\t\t\t\t\t\t\t\t\t\t point = 0, isCritical = false) {\r\n\t\tconst res = new Result(undefined, action);\r\n\r\n\t\tswitch (type) {\r\n\t\t\tcase \"damage\": res.hpDamage = point; break;\r\n\t\t\tcase \"recover\": res.hpRecover = point; break;\r\n\t\t\tcase \"drain\": res.hpDrain = point; break;\r\n\t\t\tcase \"miss\": res.isMiss = true; break;\r\n\t\t}\r\n\t\tres.isCritical = isCritical;\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\tpublic static testData() {\r\n\t\tlet res = new Result();\r\n\t\tres.hpDamage = Math.floor(Math.random() * 128);\r\n\t\treturn res;\r\n\t}\r\n}\r\n","import {Reward, RewardType} from \"../Data/Reward\";\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\n\r\nexport function rewardProcessor(type: RewardType) {\r\n\treturn (clazz) => {\r\n\t\tRewardProcessor.processorSettings[type] = clazz;\r\n\t}\r\n}\r\n\r\nexport function createProcessor(reward: Reward) {\r\n\tconst clazz = RewardProcessor.processorSettings[reward.type];\r\n\treturn new clazz(reward);\r\n}\r\n\r\nexport abstract class RewardProcessor {\r\n\r\n\tpublic static processorSettings:\r\n\t\t{ [K: string]: Constructor<RewardProcessor> } = {};\r\n\r\n\tpublic reward: Reward;\r\n\r\n\tprotected constructor(reward: Reward) {\r\n\t\tthis.reward = reward;\r\n\t}\r\n\r\n\tpublic get value() { return this.reward.value; }\r\n\r\n\tpublic abstract invoke(rate?);\r\n}\r\n","import {BaseData, field} from \"../../CoreModule/Data/BaseData\";\r\n\r\nexport enum RewardType {\r\n\tGold = \"gold\",\r\n\tDiamond = \"diamond\",\r\n\tFragment = \"fragment\",\r\n\tMedal = \"medal\",\r\n\r\n\tToken = \"token\", // 代币\r\n\r\n\t// TODO: 补充更多\r\n}\r\n\r\nexport function r(type: RewardType, value: number, params = {}) {\r\n\treturn Reward.create(type, value, params);\r\n}\r\n\r\nexport class Reward extends BaseData {\r\n\r\n\t@field\r\n\tpublic type: RewardType = RewardType.Gold;\r\n\t@field\r\n\tpublic value: number = 0;\r\n\t@field(Object)\r\n\tpublic params: object = {};\r\n\r\n\tpublic static create(type: RewardType,\r\n\t\t\t\t\t\t\t\t\t\t\t value: number, params = {}) {\r\n\t\tconst res = new Reward();\r\n\t\tres.type = type;\r\n\t\tres.value = value;\r\n\t\tres.params = params;\r\n\t\treturn res;\r\n\t}\r\n\r\n}\r\n\r\nimport {createProcessor} from \"../Utils/RewardProcessor\";\r\n\r\nexport class RewardGroup extends BaseData {\r\n\r\n\t@field([Reward])\r\n\tpublic rewards: Reward[] = [];\r\n\r\n\tpublic static create(...rewards: (Reward | RewardGroup)[]) {\r\n\t\tconst res = new RewardGroup();\r\n\t\trewards.forEach(reward => res.add(reward));\r\n\t\treturn res;\r\n\t}\r\n\r\n\tpublic add(reward: Reward | RewardGroup) {\r\n\t\tif (reward instanceof Reward) {\r\n\t\t\tconst curCond = this.find(reward.type);\r\n\t\t\tif (curCond) curCond.value += reward.value;\r\n\t\t\telse this.rewards.push(reward.clone());\r\n\t\t} else\r\n\t\t\treward.rewards.forEach(c => this.add(c))\r\n\t}\r\n\r\n\tpublic push(reward: Reward) {\r\n\t\tthis.rewards.push(reward);\r\n\t}\r\n\r\n\tpublic invoke(rate = 1) {\r\n\t\tconst processors = this.rewards.map(\r\n\t\t\tr => createProcessor(r));\r\n\r\n\t\tfor (const p of processors) p.invoke(rate);\r\n\t}\r\n\r\n\tpublic find(type: RewardType) {\r\n\t\treturn this.rewards.find(c => c.type == type);\r\n\t}\r\n\r\n\t// region 快捷查找\r\n\r\n\tpublic get gold() { return this.find(RewardType.Gold); }\r\n\tpublic get diamond() { return this.find(RewardType.Diamond); }\r\n\tpublic get medal() { return   this.find(RewardType.Medal); }\r\n\tpublic get token() { return this.find(RewardType.Token); }\r\n\r\n\tpublic get fragment() { return this.find(RewardType.Fragment); }\r\n\r\n\t// endregion\r\n}\r\n","import {BaseManager, getManager, manager} from \"./BaseManager\";\r\nimport {BaseScene} from \"../../../Scenes/BaseScene\";\r\nimport Component = cc.Component;\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\n\r\nconst CACHE_KEY = '__exermonCache__';\r\n\r\nexport function sceneMgr(): SceneManager {\r\n\treturn getManager(SceneManager);\r\n}\r\n\r\nexport function curScene(): BaseScene {\r\n\treturn sceneMgr().curScene;\r\n}\r\n\r\nexport function singletonComponent<T extends Component>(\r\n\tclazz: Constructor<T>) {\r\n\r\n\tlet oriStart = clazz.prototype.start;\r\n\tlet oriOnDestroy = clazz.prototype.onDestroy;\r\n\r\n\tclazz.prototype.start = function() {\r\n\t\tconst scene = curScene();\r\n\t\tconst key = findSceneSingletonTarget(scene, clazz);\r\n\t\tkey && (scene[key] = this);\r\n\r\n\t\toriStart?.call(this);\r\n\t}\r\n\tclazz.prototype.onDestroy = function() {\r\n\t\tconst scene = curScene();\r\n\t\tconst key = findSceneSingletonTarget(scene, clazz);\r\n\t\tkey && (scene[key] = null);\r\n\r\n\t\toriOnDestroy?.call(this);\r\n\t}\r\n}\r\n\r\nexport function singletonTarget<T extends Component>(\r\n\tclazz: Constructor<T>) {\r\n\r\n\treturn (obj, key) => {\r\n\t\tconst cache = getOrCreateCache(obj.constructor);\r\n\t\tcache.targets[key] = clazz;\r\n\t}\r\n}\r\n\r\nexport function getOrCreateCache<T extends BaseScene>(\r\n\ttype: Constructor<T> | Object) {\r\n\tif (!type) return {};\r\n\tif (typeof type !== 'function')\r\n\t\treturn getOrCreateCache(type.constructor);\r\n\r\n\treturn type[CACHE_KEY] ||= {\r\n\t\ttargets: {} // 每个单例组件目标的定义\r\n\t};\r\n}\r\n\r\nfunction findSceneSingletonTarget(obj, clazz: Constructor) {\r\n\tconst cache = getOrCreateCache(obj);\r\n\r\n\tfor (const key in cache.targets)\r\n\t\tif (cache.targets[key] == clazz) return key;\r\n\r\n\treturn null;\r\n}\r\n\r\n@manager\r\nclass SceneManager extends BaseManager {\r\n\r\n\tpublic curScene: BaseScene = null;\r\n\r\n}\r\n","import Node = cc.Node;\r\nimport ScrollView = cc.ScrollView;\r\n\r\nexport class ScrollviewFilter {\r\n\r\n\tstatic filter(type: \"horizontal\" | \"vertical\", container: Node, children: Node[], spacing: number, minLength: number, padding: number = 0, step: number = 1){\r\n\t\tlet length = -spacing + padding;\r\n\t\tlet scroll: ScrollView = null;\r\n\t\tfor (let i = container; i.parent ; i = i.parent) {\r\n\t\t\tlet temp = i.getComponent(ScrollView);\r\n\t\t\tif (temp && temp.content == container) {\r\n\t\t\t\tscroll = temp;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tswitch (type){\r\n\t\t\tcase \"horizontal\":\r\n\t\t\t\tfor (let i = 0; i < children.length; i++) {\r\n\t\t\t\t\tif (i % step != 0) continue;\r\n\t\t\t\t\tlength += children[i].width + spacing;\r\n\t\t\t\t}\r\n\t\t\t\tif(length > minLength){\r\n\t\t\t\t\tif(length != container.width)\r\n\t\t\t\t\t\tif (scroll) scroll.scrollToLeft();\r\n\t\t\t\t\t\telse container.x = (length - minLength) / 2;\r\n\t\t\t\t\tcontainer.width = length;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif (scroll) scroll.scrollToLeft();\r\n\t\t\t\t\telse container.x = 0;\r\n\t\t\t\t\tcontainer.width = minLength;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"vertical\":\r\n\t\t\t\tfor (let i = 0; i < children.length; i++) {\r\n\t\t\t\t\tif (i % step != 0) continue;\r\n\t\t\t\t\tlength += children[i].height + spacing;\r\n\t\t\t\t}\r\n\t\t\t\tif(length > minLength){\r\n\t\t\t\t\tif(length != container.height)\r\n\t\t\t\t\t\tif (scroll) scroll.scrollToTop();\r\n\t\t\t\t\t\telse container.y = (minLength - length + container.height) / 2;\r\n\t\t\t\t\tcontainer.height = length;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif (scroll) scroll.scrollToTop();\r\n\t\t\t\t\telse container.y = minLength / 2;\r\n\t\t\t\t\tcontainer.height = minLength;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","import {ISelectableObject} from \"./ISelectableObject\";\r\n\r\n/**\r\n * 单选组，同一时刻组中的元素只允许最多一个被选中\r\n */\r\nexport class SelectableGroup {\r\n\r\n    elements: ISelectableObject[] = [];\r\n    selectedIndex: number = -1;\r\n    allowNoSelection: boolean;\r\n\r\n    /**\r\n     * 创建一个选择组\r\n     * @param allowNoSelection 是否允许一个元素都不选（允许取消当前唯一的选择）\r\n     */\r\n    constructor(allowNoSelection: boolean = true) {\r\n        this.allowNoSelection = allowNoSelection;\r\n    }\r\n\r\n    /**\r\n     * 添加一个元素\r\n     */\r\n    public addElement(e: ISelectableObject): void {\r\n        if (this.indexOf(e) != -1) return;\r\n        e.selectableGroup = this;\r\n        this.elements.push(e);\r\n        if (this.size() == 1 && !this.allowNoSelection) {\r\n            this.select(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 删除一个元素\r\n     */\r\n    public removeElement(e: ISelectableObject): void {\r\n        let idx = this.indexOf(e);\r\n        if (idx == -1) return;\r\n        if (this.isSelected(e)) {\r\n            this.selectedIndex = -1;\r\n            this.elements.splice(idx, 1);\r\n            e.onDeselected();\r\n            // 如果不允许不选，则自动选第0个\r\n            if (!this.allowNoSelection && this.size() > 0) {\r\n                this.select(this.getElementAt(0));\r\n            }\r\n        } else {\r\n            this.elements.splice(idx, 1);\r\n            if (idx < this.selectedIndex) this.selectedIndex--;\r\n        }\r\n        e.selectableGroup = null;\r\n    }\r\n\r\n    /**\r\n     * 查找元素的下标，不存在则返回-1\r\n     */\r\n    public indexOf(e: ISelectableObject): number {\r\n        return this.elements.indexOf(e);\r\n    }\r\n\r\n\r\n    /**\r\n     * 获取当前单选组里有多少元素\r\n     */\r\n    public size(): number {\r\n        return this.elements.length;\r\n    }\r\n\r\n    /**\r\n     * 获取第i个单选组里的元素\r\n     */\r\n    public getElementAt(index: number): ISelectableObject {\r\n        return this.elements[index];\r\n    }\r\n\r\n    /**\r\n     * 获取指定对象是否是被选择的那个\r\n     */\r\n    public isSelected(e: ISelectableObject): boolean {\r\n        return this.currentSelection() == e;\r\n    }\r\n\r\n    /**\r\n     * 选择指定对象\r\n     */\r\n    public select(e: ISelectableObject): void {\r\n        let newIdx = this.indexOf(e);\r\n        if (newIdx == -1) return;\r\n        if (this.selectedIndex == newIdx) return;//是否应该return？\r\n        let old = this.currentSelection();\r\n        /*\r\n        this.selectedIndex = -1;\r\n        old?.onDeselected();\r\n        this.selectedIndex = newIdx;\r\n        e.onSelected();\r\n        */\r\n        this.selectedIndex = newIdx;\r\n        old?.onDeselected();\r\n        e.onSelected();\r\n    }\r\n\r\n    /**\r\n     * 取消选择指定对象\r\n     */\r\n    public deselect(e: ISelectableObject): void {\r\n        if(!e) return;\r\n        let newIdx = this.indexOf(e);\r\n        if (newIdx == -1) return;\r\n        if (!this.allowNoSelection) return;\r\n        this.selectedIndex = -1;\r\n        e.onDeselected();\r\n    }\r\n\r\n    /**\r\n     * 获取当前选择的对象\r\n     */\r\n    public currentSelection(): ISelectableObject | null {\r\n        if (this.selectedIndex == -1) return null;\r\n        return this.getElementAt(this.selectedIndex);\r\n    }\r\n\r\n}\r\n","import {ISelectableObject} from \"./ISelectableObject\";\r\nimport { SelectableGroup } from \"./SelectableGroup\";\r\n\r\n\r\nexport abstract class SelectableObject extends cc.Component implements ISelectableObject {\r\n    selectableGroup: SelectableGroup;\r\n\r\n    /**\r\n     * 如果被加进了一个选择组里，则选择自己\r\n     */\r\n    public selectSelf(): void {\r\n        this.selectableGroup?.select(this);\r\n    }\r\n\r\n    /**\r\n     * 如果被加进了一个选择组里，则取消选择自己\r\n     */\r\n    public deselectSelf(): void {\r\n        this.selectableGroup?.deselect(this);\r\n    }\r\n\r\n    public toggleSelection(): void {\r\n        if (this.selectableGroup == null) return;\r\n        if (this.selectableGroup!.isSelected(this)) {\r\n            this.selectableGroup!.deselect(this);\r\n        } else {\r\n            this.selectableGroup.select(this);\r\n        }\r\n    }\r\n\r\n    public removeSelf(): void {\r\n        this.selectableGroup?.removeElement(this);\r\n    }\r\n\r\n    /**\r\n     * 被取消选择时回调\r\n     */\r\n    abstract onSelected(): void;\r\n\r\n    /**\r\n     * 被选择时回调\r\n     */\r\n    abstract onDeselected(): void;\r\n\r\n}","import Label = cc.Label;\r\nimport {battleScene} from \"../../../../Scenes/BattleScene\";\r\nimport {playerMgr} from \"../../../PlayerModule/Managers/PlayerManager\";\r\nimport {PlayerMoney} from \"../../../EconomicModule/Data/PlayerMoney\";\r\nimport Sprite = cc.Sprite;\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport {Hero} from \"../../../HeroModule/Data/Hero\";\r\nimport {HeroSkeleton} from \"../../../../Utils/SpineUtils\";\r\nimport {heroMgr} from \"../../../HeroModule/Managers/HeroManager\";\r\nimport Skeleton = sp.Skeleton;\r\nimport Node = cc.Node;\r\nimport Bone = sp.spine.Bone;\r\nimport Slot = sp.spine.Slot;\r\nimport {autoUnitConvert} from \"../../../../Utils/NumberUtils\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class SelectedHeroDisplay extends cc.Component {\r\n\r\n    @property(Label)\r\n    nameLabel: Label = null;\r\n    @property(Label)\r\n    levelLabel: Label = null;\r\n    @property(Label)\r\n    qualityLabel: Label = null;\r\n    @property(Label)\r\n    powerLabel: Label = null;\r\n    @property(Label)\r\n    coinLabel: Label = null;\r\n\r\n    @property(Sprite)\r\n    qualitySprite: Sprite = null;\r\n    @property(Sprite)\r\n    restraintSprite: Sprite = null;\r\n\r\n    @property(Node)\r\n    playerInfoNode: Node = null;\r\n\r\n    private hero: Hero = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    update (dt) {\r\n        if (!battleScene().heroSelected) {\r\n            this.playerInfoNode.active = true;\r\n            this.node.active = false;\r\n            return;\r\n        }\r\n        let hero = battleScene().currentPVPSelect;\r\n        if (hero != this.hero) {\r\n            this.hero = hero;\r\n            this.onHeroChanged(this.hero);\r\n        }\r\n        this.updateLabels(this.hero);\r\n    }\r\n\r\n    private quality: string[] = [\"N\", \"R\", \"SR\", \"SSR\", \"UR\"];\r\n\r\n    @autoUnitConvert\r\n    updateLabels(hero: Hero) {\r\n        this.levelLabel.string = \"Lv.\" + hero.level.level;\r\n        this.powerLabel.string = \"99999999\";\r\n        this.coinLabel.string = playerMgr().getPlayerData(PlayerMoney).gold.toString();\r\n    }\r\n\r\n    @property([SpriteFrame])\r\n    qualityPictures: SpriteFrame[] = [];\r\n    @property([SpriteFrame])\r\n    restraintPictures: SpriteFrame[] = [];\r\n\r\n    onHeroChanged(hero: Hero) {\r\n        this.nameLabel.string = hero.name;\r\n        this.qualityLabel.string = this.quality[hero.quality];\r\n        this.qualitySprite.spriteFrame = this.qualityPictures[hero.quality];\r\n        this.restraintSprite.spriteFrame = this.restraintPictures[hero.restraint];\r\n        this.drawAvatar(hero);\r\n    }\r\n\r\n    // region 头像绘制\r\n\r\n    @property(Skeleton)\r\n    avatar: Skeleton = null;\r\n\r\n    private size: number = 120;\r\n    private avatarHeight: number = 0;\r\n    private avatarWidth: number = 0;\r\n    private avatarOffsetX: number = 0;\r\n    private avatarOffsetY: number = 0;\r\n\r\n    private drawAvatar(hero: Hero) {\r\n        this.avatar.node.scale = 0;\r\n        let node = new Node('node');\r\n        let temp = node.addComponent(Skeleton);\r\n        let skeleton = new HeroSkeleton(this.avatar, temp, heroMgr().getCacheOneFromServer(hero.nftId).heroTypeId);\r\n        hero.parts.forEach(part => { skeleton.addPart(part); });\r\n        skeleton.refresh().then(res => {\r\n            node.destroy();\r\n            let bone: Bone = skeleton.findBone(\"head_1\");\r\n\r\n            skeleton.skeleton.updateWorldTransform();\r\n            let offsetX = bone.worldX, offsetY = bone.worldY;\r\n            while (bone.parent) bone = bone.parent;\r\n            bone.x -= offsetX;\r\n            bone.y -= offsetY;\r\n\r\n            let slot: Slot = skeleton.findSlot(\"head_1\");\r\n            if (!slot.getAttachment()) return;\r\n            this.avatarHeight = slot.getAttachment()[\"height\"];\r\n            this.avatarWidth = slot.getAttachment()[\"width\"];\r\n            this.avatarOffsetY = slot.getAttachment()[\"x\"];\r\n            this.avatarOffsetX = slot.getAttachment()[\"y\"];\r\n            this.sizeFilter();\r\n        });\r\n    }\r\n\r\n    private sizeFilter() {\r\n        let k = Math.min(this.avatarWidth / this.size, this.avatarHeight / this.size);\r\n        k *= 1.2;\r\n        // this.avatar.node.x = - this.avatarOffsetX / k;\r\n        this.avatar.node.y = - this.avatarOffsetY / k;\r\n        if (k > 1) this.avatar.node.scale = 1 / k;\r\n        else this.avatar.node.scale = 1;\r\n    }\r\n\r\n    // endregion\r\n}\r\n","import {getSingleton, singleton} from \"../../Modules/CoreModule/Utils/SingletonUtils\";\r\nimport {BaseScene} from \"../BaseScene\";\r\nimport GlobalEditor from \"./Components/Editor/GlobalEditor\";\r\nimport SingleEditor from \"./Components/Editor/SingleEditor\";\r\nimport director = cc.director;\r\nimport {gameMgr} from \"../../Modules/CoreModule/Managers/GameManager\";\r\nimport {editorMgr} from \"../../Modules/HeroModule/Managers/EditorManager\";\r\nimport {showLoading} from \"../../Modules/CoreModule/Managers/LoadingManager\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nexport function selectorScene() {\r\n\treturn getSingleton(SelectorScene);\r\n}\r\n\r\n@ccclass\r\n@singleton\r\nexport default class SelectorScene extends BaseScene {\r\n\r\n\t@property\r\n\tpublic editorMode = false;\r\n\t@property(GlobalEditor)\r\n\tpublic globalEditor: GlobalEditor = null;\r\n\t@property(SingleEditor)\r\n\tpublic singleEditor: SingleEditor = null;\r\n\r\n\tprotected get autoConnect() { return false; }\r\n\r\n\tprotected onLoad() {\r\n\t\tsuper.onLoad();\r\n\t\tgameMgr().needUpdateToken = !this.editorMode;\r\n\t\t// nftMgr().init().then();\r\n\t}\r\n\r\n\tupdate (dt) {\r\n\t\tsuper.update(dt);\r\n\t\t// console.log(\"progress\", dataMgr().loadingProgress());\r\n\t}\r\n\r\n\tpublic enterGame() {\r\n\t\tdirector.loadScene(\"BattleScene\");\r\n\t}\r\n\r\n\tpublic exportAllConfigs() {\r\n\t\teditorMgr().exportAll();\r\n\t}\r\n\r\n\tpublic importConfigs() {\r\n\t\teditorMgr().import();\r\n\t}\r\n\tpublic exportConfigs() {\r\n\t\teditorMgr().export();\r\n\t}\r\n\t@showLoading\r\n\tpublic async pushConfigs() {\r\n\t\tawait editorMgr().push();\r\n\t}\r\n\t@showLoading\r\n\tpublic async pullConfigs() {\r\n\t\tawait editorMgr().pull();\r\n\t\tthis.globalEditor.refresh();\r\n\t\tthis.singleEditor.refresh();\r\n\t}\r\n\r\n\tpublic toggleGlobalEditor() {\r\n\t\tthis.globalEditor.node.active = !this.globalEditor.node.active;\r\n\t}\r\n\r\n}\r\n","import BattleRewardContainer from \"./Main/BattleRewardContainer\";\r\nimport {Reward} from \"../../PlayerModule/Data/Reward\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class SettlementWindowController extends cc.Component {\r\n\r\n    @property(BattleRewardContainer)\r\n    container: BattleRewardContainer = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    // update (dt) {}\r\n\r\n    open(rewards: Reward[]) {\r\n        if (this.node.active) return;\r\n        this.node.active = true;\r\n        this.container.setItems(rewards);\r\n    }\r\n\r\n    quit() {\r\n        this.container.setItems([]);\r\n        this.node.active = false;\r\n    }\r\n\r\n}\r\n","import {ItemDisplay} from \"../../../../Modules/CoreModule/Components/ItemDisplay\";\r\nimport Label = cc.Label;\r\nimport Node = cc.Node;\r\nimport {PartInfo} from \"../../../../Modules/HeroModule/Data/PartInfo\";\r\nimport {selectorScene} from \"../../SelectorScene\";\r\nimport PartsDisplay from \"../ItemPrefabs/PartsDisplay\";\r\nimport PreviewPictureDisplay from \"../ItemPrefabs/PreviewPictureDisplay\";\r\nimport {configMgr} from \"../../../../Modules/CoreModule/Managers/ConfigManager\";\r\nimport PartConfig from \"../../../../Modules/HeroModule/Configs/PartConfig\";\r\nimport Slider = cc.Slider;\r\nimport PartsContainer from \"../ItemContainers/PartsContainer\";\r\nimport EditBox = cc.EditBox;\r\nimport {editorMgr} from \"../../../../Modules/HeroModule/Managers/EditorManager\";\r\nimport TransformUtil from \"../../../../Utils/TransformUtils\";\r\nimport {partTypeRepo} from \"../../../../Modules/HeroModule/Data/PartType\";\r\nimport Button = cc.Button;\r\nimport {partRepo} from \"../../../../Modules/HeroModule/Data/Part\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nconst MaxScale = 4;\r\nconst MinScale = 0;\r\n\r\nconst OffsetRange = 256;\r\nconst OffsetDelta = 5;\r\nconst OffsetWait = 500;\r\nconst OffsetInterval = 50;\r\n\r\n@ccclass\r\nexport default class SingleEditor extends ItemDisplay<PartInfo> {\r\n\r\n\t@property(PartsContainer)\r\n\tpartsContainer: PartsContainer = null;\r\n\r\n\t@property(PartsDisplay)\r\n\tcurPartDisplay: PartsDisplay = null;\r\n\t@property(PartsDisplay)\r\n\tbasePartDisplay: PartsDisplay = null;\r\n\r\n\t@property(Node)\r\n\tscaleNode: Node = null;\r\n\t@property(Slider)\r\n\tscaleBar: Slider = null;\r\n\t@property(EditBox)\r\n\tscaleValue: EditBox = null;\r\n\r\n\t@property(Node)\r\n\txNode: Node = null;\r\n\t@property(Slider)\r\n\txBar: Slider = null;\r\n\t@property(EditBox)\r\n\txValue: EditBox = null;\r\n\r\n\t@property(Node)\r\n\tyNode: Node = null;\r\n\t@property(Slider)\r\n\tyBar: Slider = null;\r\n\t@property(EditBox)\r\n\tyValue: EditBox = null;\r\n\r\n\t@property(Node)\r\n\tfootXNode: Node = null;\r\n\t@property(Slider)\r\n\tfootXBar: Slider = null;\r\n\t@property(EditBox)\r\n\tfootXValue: EditBox = null;\r\n\r\n\t@property(Node)\r\n\tfootYNode: Node = null;\r\n\t@property(Slider)\r\n\tfootYBar: Slider = null;\r\n\t@property(EditBox)\r\n\tfootYValue: EditBox = null;\r\n\r\n\t@property(Button)\r\n\tapplyButton: Button = null;\r\n\t@property(Button)\r\n\tclothes6Button: Button = null;\r\n\t@property(Button)\r\n\tweapon3Button: Button = null;\r\n\r\n\t@property(PreviewPictureDisplay)\r\n\tpreview: PreviewPictureDisplay = null\r\n\r\n\t@property(Node)\r\n\ttouchNode: Node;\r\n\r\n\tpublic get globalEditor() {\r\n\t\treturn selectorScene().globalEditor;\r\n\t}\r\n\r\n\tonLoad () {\r\n\t\tthis.partsContainer.singleEditor = this;\r\n\t\tthis.curPartDisplay.preview = this.preview;\r\n\t\tthis.basePartDisplay.preview = this.preview;\r\n\r\n\t\tthis.addKeyListeners();\r\n\t}\r\n\r\n\taddKeyListeners() {\r\n\t\tcc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n\t\tcc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n\r\n\t\tthis.touchNode.on(\"touchstart\", this.onTouchStart, this);\r\n\t}\r\n\r\n\t// region 数据获取\r\n\r\n\tpublic get part() { return this.item?.part; }\r\n\tpublic get partType() { return this.part?.partType; }\r\n\tpublic get basePartType() { return this.partType?.basePartType; }\r\n\tpublic get basePart() { return this.basePartType ?\r\n\t\tthis.preview.item?.findPart(this.basePartType) : null;\r\n\t}\r\n\tpublic get headPart() {\r\n\t\treturn this.preview.item?.findPart(partTypeRepo().head);\r\n\t}\r\n\tpublic get bodyPart() {\r\n\t\treturn this.preview.item?.findPart(partTypeRepo().body);\r\n\t}\r\n\tpublic get footPart() {\r\n\t\treturn this.preview.item?.findPart(partTypeRepo().foot);\r\n\t}\r\n\r\n\tpublic get scale() {\r\n\t\tconst bp = this.partType.isWeapon ? this.bodyPart : this.basePart;\r\n\t\treturn editorMgr().getPtBptScale(this.part.oriId, bp.oriId);\r\n\t}\r\n\tpublic set scale(val) {\r\n\t\tconst bp = this.partType.isWeapon ? this.bodyPart : this.basePart;\r\n\t\teditorMgr().changePtBptScale(this.part.oriId, bp.oriId, val);\r\n\t}\r\n\r\n\tpublic get offset() {\r\n\t\treturn editorMgr().getPtBptOffset(this.part.oriId, this.basePart.oriId);\r\n\t}\r\n\tpublic set offset(val) {\r\n\t\teditorMgr().changePtBptOffset(this.part.oriId, this.basePart.oriId, val);\r\n\t}\r\n\r\n\tpublic get hidden() {\r\n\t\treturn editorMgr().getPtBptHidden(this.part.oriId, this.basePart.oriId);\r\n\t}\r\n\tpublic set hidden(val) {\r\n\t\teditorMgr().changePtBptHidden(this.part.oriId, this.basePart.oriId, val);\r\n\t}\r\n\r\n\tpublic get clothes6() {\r\n\t\treturn editorMgr().getClothes6Problem(this.part.oriId, this.headPart.oriId);\r\n\t}\r\n\tpublic set clothes6(val) {\r\n\t\teditorMgr().changeClothes6Problem(this.part.oriId, this.headPart.oriId, val);\r\n\t}\r\n\r\n\tpublic get weapon3() {\r\n\t\treturn editorMgr().getWeapon3Problem(this.part.oriId, this.bodyPart.oriId);\r\n\t}\r\n\tpublic set weapon3(val) {\r\n\t\teditorMgr().changeWeapon3Problem(this.part.oriId, this.bodyPart.oriId, val);\r\n\t}\r\n\r\n\tpublic get footOffset() {\r\n\t\treturn editorMgr().getFootOffset(this.footPart?.oriId);\r\n\t}\r\n\tpublic set footOffset(val) {\r\n\t\tconst footPart = this.footPart;\r\n\t\tif (!footPart) return;\r\n\t\teditorMgr().changeFootOffset(footPart.oriId, val);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 刷新控制\r\n\r\n\trefresh() {\r\n\t\tsuper.refresh();\r\n\r\n\t\tthis.partsContainer.refresh();\r\n\r\n\t\tif (this.item == null) return;\r\n\r\n\t\tthis.globalEditor?.refresh();\r\n\r\n\t\tthis.drawParts();\r\n\t\tthis.drawScaleOffset();\r\n\t\tthis.drawFootOffset();\r\n\t\tthis.drawOthers();\r\n\t}\r\n\tprivate drawParts() {\r\n\t\tthis.curPartDisplay.setItem(this.item);\r\n\t\tif (this.basePart) {\r\n\t\t\tthis.basePartDisplay.node.active = true;\r\n\t\t\tthis.basePartDisplay.setItem(this.basePart.toPartInfo());\r\n\t\t} else\r\n\t\t\tthis.basePartDisplay.node.active = false;\r\n\t}\r\n\tprivate drawScaleOffset() {\r\n\t\tthis.xNode.active = this.yNode.active =\r\n\t\t\tthis.scaleNode.active = !!this.basePart;\r\n\r\n\t\tif (!this.basePart) return;\r\n\r\n\t\tconst scale = this.scale;\r\n\t\tthis.scaleBar.progress = (scale - MinScale) / (MaxScale - MinScale);\r\n\t\tthis.scaleValue.string = scale.toFixed(3);\r\n\r\n\t\tthis.drawOffsetBar(this.xBar, this.xValue,\r\n\t\t\tthis.yBar, this.yValue, this.offset);\r\n\t}\r\n\tprivate drawFootOffset() {\r\n\t\tthis.footXNode.active = this.footYNode.active = !!this.footPart;\r\n\r\n\t\tthis.drawOffsetBar(this.footXBar, this.footXValue,\r\n\t\t\tthis.footYBar, this.footYValue, this.footOffset);\r\n\t}\r\n\tprivate drawOffsetBar(xBar, xValue, yBar, yValue, offset) {\r\n\t\txBar.progress = (offset[0] - -OffsetRange) / (OffsetRange * 2);\r\n\t\txValue.string = offset[0].toFixed(1);\r\n\t\tyBar.progress = (offset[1] - -OffsetRange) / (OffsetRange * 2);\r\n\t\tyValue.string = offset[1].toFixed(1);\r\n\t}\r\n\tprivate drawOthers() {\r\n\t\tthis.applyButton.interactable = !!this.basePart;\r\n\t\tthis.clothes6Button.interactable = this.item.part.partType.isClothes;\r\n\t\tthis.weapon3Button.interactable = this.item.part.partType.isWeapon;\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 操作\r\n\r\n\t/**\r\n\t * 设置缩放\r\n\t */\r\n\tpublic setScale(scale) {\r\n\t\tthis.scale = scale;\r\n\t\tthis.refresh();\r\n\t\tthis.preview.refresh();\r\n\t}\r\n\r\n\t/**\r\n\t * 设置缩放\r\n\t */\r\n\tpublic setOffset(x?: number, y?: number) {\r\n\t\tconst ori = this.offset;\r\n\t\tif (x != undefined) ori[0] = x;\r\n\t\tif (y != undefined) ori[1] = y;\r\n\t\tthis.offset = ori;\r\n\r\n\t\tthis.refresh();\r\n\t\tthis.preview.refresh();\r\n\t}\r\n\tpublic setX(val: number) {return this.setOffset(val);}\r\n\tpublic setY(val: number) {return this.setOffset(undefined, val);}\r\n\r\n\t/**\r\n\t * 设置缩放\r\n\t */\r\n\tpublic setFootOffset(x?: number, y?: number) {\r\n\t\tconst ori = this.footOffset;\r\n\t\tif (x != undefined) ori[0] = x;\r\n\t\tif (y != undefined) ori[1] = y;\r\n\t\tthis.footOffset = ori;\r\n\r\n\t\tthis.refresh();\r\n\t\tthis.preview.refresh();\r\n\t}\r\n\tpublic setFootX(val: number) {return this.setFootOffset(val);}\r\n\tpublic setFootY(val: number) {return this.setFootOffset(undefined, val);}\r\n\r\n\t/**\r\n\t * 重置\r\n\t */\r\n\tpublic reset() {\r\n\t\tthis.setScale(1);\r\n\t\tthis.setOffset();\r\n\t}\r\n\r\n\t/**\r\n\t * toggle槽隐藏情况\r\n\t * @param name\r\n\t */\r\n\tpublic toggleSlot(name) {\r\n\t\tconst hidden = this.hidden;\r\n\t\tconst idx = hidden.indexOf(name);\r\n\t\tif (idx >= 0) hidden.splice(idx, 1);\r\n\t\telse hidden.push(name);\r\n\t\tthis.hidden = hidden;\r\n\r\n\t\tthis.refresh();\r\n\t\tthis.preview.refresh();\r\n\t}\r\n\r\n\t/**\r\n\t * toggle Clothes6问题\r\n\t */\r\n\tpublic toggleClothes6() {\r\n\t\tthis.clothes6 = !this.clothes6;\r\n\t\tthis.refresh();\r\n\t\tthis.preview.refresh();\r\n\t}\r\n\r\n\t/**\r\n\t * toggle Weapon3问题\r\n\t */\r\n\tpublic toggleWeapon3() {\r\n\t\tthis.weapon3 = !this.weapon3;\r\n\t\tthis.refresh();\r\n\t\tthis.preview.refresh();\r\n\t}\r\n\r\n\t/**\r\n\t * 处理方向移动\r\n\t */\r\n\tprivate processDir(dir, rate = 1) {\r\n\t\tconst delta = OffsetDelta * rate;\r\n\t\tconst func = this.footMode ? \"setFoot\" : \"set\";\r\n\t\tconst offset = this.footMode ? this.footOffset : this.offset;\r\n\t\tswitch (dir) {\r\n\t\t\tcase cc.macro.KEY.down: this[func+\"Y\"](offset[1] - delta); break;\r\n\t\t\tcase cc.macro.KEY.left: this[func+\"X\"](offset[0] - delta); break;\r\n\t\t\tcase cc.macro.KEY.right: this[func+\"X\"](offset[0] + delta); break;\r\n\t\t\tcase cc.macro.KEY.up: this[func+\"Y\"](offset[1] + delta); break;\r\n\t\t}\r\n\t\tthis.refresh();\r\n\t\tthis.preview.refresh();\r\n\t}\r\n\r\n\t/**\r\n\t * 应用到相同基本型\r\n\t */\r\n\tpublic applySameHeroType() {\r\n\t\tconst curBp = this.basePart;\r\n\t\tif (!curBp) return;\r\n\r\n\t\tconst curPart = this.part;\r\n\t\tconst pOriId = curPart.oriId;\r\n\t\tconst bhtId = curBp.heroTypeId, bptId = curBp.partTypeId;\r\n\t\tconst baseParts = partRepo().findByTypes(bhtId, bptId, 1);\r\n\r\n\t\tbaseParts.forEach(bp => {\r\n\t\t\tif (bp == curBp) return;\r\n\t\t\tif (!this.partType.isWeapon)\r\n\t\t\t\teditorMgr().changePtBptScale(pOriId, bp.oriId, this.scale);\r\n\t\t\teditorMgr().changePtBptOffset(pOriId, bp.oriId, this.offset);\r\n\t\t\teditorMgr().changePtBptHidden(pOriId, bp.oriId, this.hidden);\r\n\t\t\t// if (pt.isClothes)\r\n\t\t\t// \teditorMgr().changeClothes6Problem(bp.oriId,\r\n\t\t\t// \t\tthis.basePart.oriId, this.clothes6);\r\n\t\t})\r\n\r\n\t\tif (this.partType.isWeapon) {\r\n\t\t\tconst curBp2 = this.bodyPart;\r\n\t\t\tconst bhtId2 = curBp2.heroTypeId, bptId2 = curBp2.partTypeId;\r\n\t\t\tconst bodyParts = partRepo().findByTypes(bhtId2, bptId2, 1);\r\n\r\n\t\t\tbodyParts.forEach(bp => {\r\n\t\t\t\tif (bp == curBp2) return;\r\n\t\t\t\teditorMgr().changePtBptScale(pOriId, bp.oriId, this.scale);\r\n\t\t\t\tif (this.weapon3 !== undefined)\r\n\t\t\t\t\teditorMgr().changeWeapon3Problem(pOriId, bp.oriId, this.weapon3);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (this.partType.isClothes && this.clothes6 !== undefined) {\r\n\t\t\t// 同步同一个基本型的Head\r\n\t\t\tconst curHp = this.headPart\r\n\t\t\tconst hhtId = curHp.heroTypeId, hptId = curHp.partTypeId;\r\n\t\t\tconst headParts = partRepo().findByTypes(hhtId, hptId, 1);\r\n\r\n\t\t\theadParts.forEach(hp => {\r\n\t\t\t\tif (hp == curHp) return;\r\n\t\t\t\teditorMgr().changeClothes6Problem(pOriId, hp.oriId, this.clothes6);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.refresh();\r\n\t\tthis.preview.refresh();\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 回调\r\n\r\n\tpublic onScaleSlide() {\r\n\t\tconst rate = this.scaleBar.progress;\r\n\t\tthis.setScale(rate * (MaxScale - MinScale) + MinScale);\r\n\t}\r\n\tpublic onScaleEdit() {\r\n\t\tconst num = Number(this.scaleValue.string);\r\n\t\tif (isNaN(num)) this.setScale(this.scale);\r\n\t\telse this.setScale(num);\r\n\t}\r\n\r\n\tpublic onXSlide() {\r\n\t\tconst rate = this.xBar.progress;\r\n\t\tthis.setX(rate * (OffsetRange * 2) - OffsetRange);\r\n\t}\r\n\tpublic onXEdit() {\r\n\t\tconst num = Number(this.xValue.string);\r\n\t\tif (isNaN(num)) this.setX(this.offset[0]);\r\n\t\telse this.setX(num);\r\n\t}\r\n\r\n\tpublic onYSlide() {\r\n\t\tconst rate = this.yBar.progress;\r\n\t\tthis.setY(rate * (OffsetRange * 2) - OffsetRange);\r\n\t}\r\n\tpublic onYEdit() {\r\n\t\tconst num = Number(this.yValue.string);\r\n\t\tif (isNaN(num)) this.setY(this.offset[1]);\r\n\t\telse this.setY(num);\r\n\t}\r\n\r\n\tpublic onFootXSlide() {\r\n\t\tconst rate = this.footXBar.progress;\r\n\t\tthis.setFootX(rate * (OffsetRange * 2) - OffsetRange);\r\n\t}\r\n\tpublic onFootXEdit() {\r\n\t\tconst num = Number(this.footXValue.string);\r\n\t\tif (isNaN(num)) this.setFootX(this.offset[0]);\r\n\t\telse this.setFootX(num);\r\n\t}\r\n\r\n\tpublic onFootYSlide() {\r\n\t\tconst rate = this.footYBar.progress;\r\n\t\tthis.setFootY(rate * (OffsetRange * 2) - OffsetRange);\r\n\t}\r\n\tpublic onFootYEdit() {\r\n\t\tconst num = Number(this.footYValue.string);\r\n\t\tif (isNaN(num)) this.setFootY(this.offset[1]);\r\n\t\telse this.setFootY(num);\r\n\t}\r\n\r\n\t// region 输入事件控制\r\n\r\n\tprivate keyTimes = {};\r\n\tprivate footMode = false;\r\n\tprivate onKeyDown(e) {\r\n\t\tif (e.keyCode == cc.macro.KEY.shift)\r\n\t\t\tthis.footMode = true;\r\n\t\telse {\r\n\t\t\tconst keyCode = this.convertKeyCode(e.keyCode);\r\n\t\t\tthis.keyTimes[keyCode] = {time: Date.now(), dt: 0};\r\n\t\t\tthis.processDir(keyCode);\r\n\t\t}\r\n\t}\r\n\tprivate onKeyUp(e) {\r\n\t\tif (e.keyCode == cc.macro.KEY.shift)\r\n\t\t\tthis.footMode = false;\r\n\t\telse {\r\n\t\t\tconst keyCode = this.convertKeyCode(e.keyCode);\r\n\t\t\tdelete this.keyTimes[keyCode];\r\n\t\t}\r\n\t}\r\n\tprivate convertKeyCode(code) {\r\n\t\tswitch (code) {\r\n\t\t\tcase cc.macro.KEY.s: return cc.macro.KEY.down;\r\n\t\t\tcase cc.macro.KEY.a: return cc.macro.KEY.left;\r\n\t\t\tcase cc.macro.KEY.d: return cc.macro.KEY.right;\r\n\t\t\tcase cc.macro.KEY.w: return cc.macro.KEY.up;\r\n\t\t\tdefault: return code;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate onTouchStart(e) {\r\n\t\tconst skNode = this.preview.skeleton.node;\r\n\t\tconst skPos = TransformUtil.getWorldPosition2(skNode);\r\n\t\tconst touch: cc.Touch = e.currentTouch;\r\n\t\tconst loc = touch.getLocation().clone();\r\n\t\tconst dt = loc.sub(skPos).multiply(\r\n\t\t\tnew cc.Vec2(1 / skNode.scaleX, 1 / skNode.scaleY));\r\n\r\n\t\tconsole.log(\"Delta\", loc.x, loc.y, dt.x, dt.y, skNode, this.preview.skeleton);\r\n\r\n\t\tconst names = this.item.part.slotNames;\r\n\t\tfor (const name of names) {\r\n\t\t\tconst slot = this.preview.item.slotTouchTest(name, dt);\r\n\t\t\tconsole.log(\"Slot: \", name, slot);\r\n\t\t\tif (slot) {\r\n\t\t\t\tthis.toggleSlot(slot.data.name)\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// endregion\r\n\r\n\t// region 更新控制\r\n\r\n\tprotected update(dt: number) {\r\n\t\tconst now = Date.now();\r\n\r\n\t\tObject.keys(this.keyTimes).forEach(key => {\r\n\t\t\tconst data = this.keyTimes[key];\r\n\t\t\tif (!data || now - data.time < OffsetWait) return;\r\n\r\n\t\t\tif ((data.dt += dt) > OffsetInterval) {\r\n\t\t\t\tdata.dt = 0; this.processDir(Number(key));\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// endregion\r\n}\r\n","import {BaseContext, Constructor} from \"../../../Utils/BaseContext\";\r\n\r\nclass SingletonContext extends BaseContext {\r\n\tpublic get contentName() { return \"Singleton\"; }\r\n}\r\n\r\nclass SingletonUtils {\r\n\r\n\tpublic static context = new SingletonContext();\r\n\r\n}\r\n\r\nexport function singleton<T>(clazz: Constructor<T>) {\r\n\r\n\tif (cc.js.isChildClassOf(clazz, cc.Component)) {\r\n\t\tlet oriOnLoad = clazz.prototype.onLoad;\r\n\t\tlet oriOnDestroy = clazz.prototype.onDestroy;\r\n\r\n\t\tclazz.prototype.onLoad = function() {\r\n\t\t\tif (SingletonUtils.context.instance(clazz) == null)\r\n\t\t\t\tSingletonUtils.context.create(clazz, this);\r\n\r\n\t\t\toriOnLoad?.call(this);\r\n\t\t}\r\n\t\tclazz.prototype.onDestroy = function() {\r\n\t\t\tif (SingletonUtils.context.instance(clazz) === this)\r\n\t\t\t\tSingletonUtils.context.remove(clazz);\r\n\r\n\t\t\toriOnDestroy?.call(this);\r\n\t\t}\r\n\t} else\r\n\t\tSingletonUtils.context.create(clazz, new clazz());\r\n}\r\n\r\n// export function singleton<T>(clazz: Constructor<T>) {\r\n// \tSingletonUtils.context.create(clazz, new clazz());\r\n// }\r\n\r\nexport function singletonValue<T>(clazz: Constructor<T>) {\r\n\treturn (target, key) => {\r\n\t\tconsole.log(\"[USE] \", {clazz, target, key});\r\n\t\ttarget[key] = getSingleton(clazz);\r\n\t}\r\n}\r\nexport function singletonGetter<T>(clazz: Constructor<T>) {\r\n\treturn (target, key, desc) => {\r\n\t\tdesc.value = (): T =>\r\n\t\t\ttarget[key + '_CACHE'] ||= getSingleton(clazz)\r\n\t};\r\n}\r\n\r\nexport function getSingleton<T>(clazz: Constructor<T>) {\r\n\t// console.error(\"[USE] \", clazz);\r\n\treturn SingletonUtils.context.instance(clazz);\r\n}\r\n","import menu = cc._decorator.menu;\r\nimport requireComponent = cc._decorator.requireComponent;\r\nimport Skeleton = sp.Skeleton;\r\nimport Animation = cc.Animation;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\n@requireComponent(Animation)\r\n@requireComponent(Skeleton)\r\n@menu(\"其他组件/骨骼动画控制\")\r\nexport default class SkeletonAnimationBridge extends cc.Component {\r\n\r\n    static SkeletonAnimationName: string = \"attack\";\r\n\r\n    animation: Animation = null;\r\n    skeleton: Skeleton = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        this.animation = this.getComponent(Animation);\r\n        this.skeleton = this.getComponent(Skeleton);\r\n        this.createCallback();\r\n    }\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    update (dt) {\r\n        this.skeleton.timeScale = this.animation.getAnimationState(this.animation.defaultClip.name).speed;\r\n    }\r\n\r\n    createCallback() {\r\n        this.animation.on(\"play\", this.startCallback, this);\r\n    }\r\n\r\n    startCallback() {\r\n        this.skeleton.clearTracks();\r\n        this.skeleton.setAnimation(0, SkeletonAnimationBridge.SkeletonAnimationName, false);\r\n    }\r\n}\r\n","import {ItemContainer} from \"../../../CoreModule/Components/ItemContainer\";\r\nimport {ScrollviewFilter} from \"../../../CoreModule/Utils/ScrollviewFilter\";\r\nimport {waitForLogin} from \"../../../PlayerModule/Managers/PlayerManager\";\r\nimport {waitForDataLoad} from \"../../../CoreModule/Managers/DataManager\";\r\nimport SkillItemDisplay from \"./SkillItemDisplay\";\r\nimport {Skill, skillRepo} from \"../../../HeroModule/Data/Skill\";\r\nimport {battleScene} from \"../../../../Scenes/BattleScene\";\r\nimport {PromiseUtils} from \"../../../../Utils/PromiseUtils\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n\r\n@ccclass\r\nexport default class SkillItemContainer extends ItemContainer<Skill, SkillItemDisplay> {\r\n\r\n    // private isLoad: boolean = false;\r\n\r\n    start() {\r\n        this.setup();\r\n    }\r\n\r\n    // update (dt) {\r\n    // \tif (!this.isLoad) {\r\n    // \t\tthis.setup();\r\n    // \t\tif (!this.isLoad) return;\r\n    // \t}\r\n    // }\r\n\r\n    @waitForDataLoad\r\n    @waitForLogin\r\n    private async setup() {\r\n        await PromiseUtils.waitFor(() => battleScene().currentPVPSelect != null);\r\n        this.updateSkills();\r\n    }\r\n\r\n    onItemsChanged() {\r\n        super.onItemsChanged();\r\n        const nodes = [];\r\n        this.itemsComponents.forEach(item =>\r\n            item.node.active && nodes.push(item.node)\r\n        )\r\n        ScrollviewFilter.filter(\"vertical\", this.container,\r\n            nodes, 5, this.node.height, 10);\r\n    }\r\n\r\n    public updateSkills() {\r\n        let skillIds = battleScene().currentPVPSelect.skillIds;\r\n        let skills = skillIds.map(id => skillRepo().getById(id));\r\n        this.setItems(skills);\r\n    }\r\n\r\n}\r\n","import {ItemDisplay} from \"../../../CoreModule/Components/ItemDisplay\";\r\nimport Label = cc.Label;\r\nimport Node = cc.Node;\r\nimport Button = cc.Button;\r\nimport Sprite = cc.Sprite;\r\nimport ProgressBar = cc.ProgressBar;\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport {autoUnitConvert} from \"../../../../Utils/NumberUtils\";\r\nimport {DateUtils} from \"../../../../Utils/DateUtils\";\r\nimport {Skill} from \"../../../HeroModule/Data/Skill\";\r\nimport {BattleInterface} from \"../../BattleCommon\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n\r\n@ccclass\r\nexport default class SkillItemDisplay extends ItemDisplay<Skill> {\r\n\r\n    @property(Label)\r\n    boostCostLabel: Label = null;\r\n    @property(Label)\r\n    boostTipsLabel: Label = null;\r\n    @property(Label)\r\n    nameLabel: Label = null;\r\n    @property(Label)\r\n    infoLabel: Label = null;\r\n    @property(Label)\r\n    coldTimeLabel: Label = null;\r\n    @property(Label)\r\n    levelLabel: Label = null;\r\n\r\n    @property(Button)\r\n    private boostButton: Button = null;\r\n\r\n    @property(ProgressBar)\r\n    coldTimeBar: ProgressBar = null;\r\n\r\n    // onLoad () {}\r\n\r\n    start() { }\r\n\r\n    // region 界面绘制\r\n\r\n    private get restSecond() {\r\n        return 1;\r\n    }\r\n\r\n    private get restSecondRate() {\r\n        return 1;\r\n    }\r\n\r\n    public refresh() {\r\n        super.refresh();\r\n\r\n        this.drawLabels();\r\n    }\r\n\r\n    private drawLabels() {\r\n        this.nameLabel.string = \"\\\\L[SKILL_\" + this.item.id + \"]\";\r\n        this.infoLabel.string = \"skill info\";\r\n        this.levelLabel.string = \"\";\r\n    }\r\n\r\n    private get canBoost() {\r\n        return true;\r\n    }\r\n\r\n    // endregion\r\n\r\n    // region 操作控制\r\n\r\n    public async upgradeBtn() {\r\n        await BattleInterface.StartTest()\r\n        await BattleInterface.BoostPVP({battleId: \"5\", skillId: this.item.id});\r\n    }\r\n\r\n    // endregion\r\n\r\n    // region 更新控制\r\n\r\n    update(dt) {\r\n        if (!this.item) return;\r\n\r\n        this.updateLabels();\r\n        this.updateNodes();\r\n    }\r\n\r\n    @autoUnitConvert\r\n    private updateLabels() {\r\n        this.boostCostLabel.string = this.item.boostCost.toString();\r\n        this.boostTipsLabel.string = \"\\\\L[SBattle23]\";\r\n        this.coldTimeLabel.string = \"0\";\r\n    }\r\n\r\n    private updateNodes() {\r\n        this.boostButton.interactable = this.canBoost;\r\n        this.coldTimeBar.progress = this.restSecondRate;\r\n    }\r\n\r\n    // endregion\r\n\r\n}\r\n","import {field} from \"../../CoreModule/Data/BaseData\";\r\nimport {Effect} from \"../../BattleModule/Data/Effect\";\r\nimport {BaseRepository, getRepository, repository} from \"../../CoreModule/Data/BaseRepository\";\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\nimport {HurtMotionGroupId, motionGroupRepo} from \"../../BattleModule/Data/MotionGroup\";\r\nimport {cache} from \"../../../Utils/DecoratorUtils\";\r\nimport {data, StaticData} from \"../../CoreModule/Data/StaticData\";\r\nimport {HeroRace} from \"./HeroType\";\r\nimport {Trait} from \"../../BattleModule/Data/Trait\";\r\n\r\nexport enum TargetType {\r\n\tSelf, // 自己\r\n\tFriendsNotSelf, // 己方（不包括自己）\r\n\tFriends, // 己方（包括自己）\r\n\tEnemies, // 敌方\r\n\tAllNotSelf, // 全体（不包括自己）\r\n\tAll // 全体（包括自己）\r\n}\r\n\r\n// 主属性：1 => POW, 2 => INT, 3 => 无\r\nexport type MainParam = 1 | 2 | 3;\r\n\r\nexport const NormalAttackId = 0;\r\nexport const PartAttackId = -1;\r\n\r\n@data(\"Skill\")\r\nexport class Skill extends StaticData {\r\n\r\n\t@field\r\n\tpublic freezeTime: number = -1; // 冻结时间（以回合为单位，-1为不冻结）\r\n\t@field\r\n\tpublic boostCost: number = 0; // 加速花费（为0表示不可加速，用于被动技能）\r\n\r\n\t@field(Number)\r\n\tpublic subjectMotionId: number = PartAttackId;\r\n\t@field(Number)\r\n\tpublic targetMotionId: number = HurtMotionGroupId;\r\n\r\n\t@field\r\n\tpublic race: HeroRace = HeroRace.None; // 种族（表示元素类型）\r\n\t@field\r\n\tpublic mainParam: MainParam = 3; // 主属性\r\n\r\n\t// TODO: 完善目标系统\r\n\t@field\r\n\tpublic targetType: TargetType = TargetType.Enemies; // 目标类型\r\n\t@field(Number)\r\n\tpublic targetCount: number = 1; // 目标个数（最大数目，为0表示全部，在符合条件的目标中随机抽取指定数量的目标）\r\n\r\n\t@field([Effect])\r\n\tpublic effects: Effect[] = []; // 效果\r\n\t@field([Trait])\r\n\tpublic traits: Trait[] = []; // 特性\r\n\r\n\t@field\r\n\tpublic isPassive: boolean = false; // 被动技能\r\n\t@field\r\n\tpublic mustHit: boolean = false; // 必定命中\r\n\r\n\t@cache\r\n\tpublic subjectMotion() {\r\n\t\treturn motionGroupRepo().getById(this.subjectMotionId);\r\n\t}\r\n\t@cache\r\n\tpublic targetMotion() {\r\n\t\treturn motionGroupRepo().getById(this.targetMotionId);\r\n\t}\r\n\r\n}\r\n\r\nexport function skillRepo() {\r\n\treturn getRepository(SkillRepo);\r\n}\r\n\r\n@repository\r\nexport class SkillRepo extends BaseRepository<Skill> {\r\n\r\n\tget clazz(): Constructor<Skill> { return Skill; }\r\n\r\n\tpublic normalAttack() {\r\n\t\treturn this.getById(NormalAttackId);\r\n\t}\r\n\r\n}\r\n\r\n","import {battleScene} from \"../../../../Scenes/BattleScene\";\r\nimport Label = cc.Label;\r\nimport ProgressBar = cc.ProgressBar;\r\nimport {BattleInterface} from \"../../BattleCommon\";\r\nimport {copyMgr} from \"../../../CopyModule/Managers/CopyManager\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class SpeedButtonController extends cc.Component {\r\n\r\n    @property(ProgressBar)\r\n    speedUpProgress: ProgressBar = null;\r\n    @property(Label)\r\n    tipsLabel: Label = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    update (dt) {\r\n        if (!copyMgr().getMainPlayerCopySettings()) return;\r\n        let lastTime = (copyMgr().getMainPlayerCopySettings().speedUpTime - Date.now()) / 1000;\r\n        if (lastTime < 0) {\r\n            this.tipsLabel.string = \"\\\\L[SMain1]\";\r\n            this.speedUpProgress.progress = 1;\r\n            return;\r\n        }\r\n        this.tipsLabel.string = this.toTime(lastTime);\r\n        this.speedUpProgress.progress = Math.max(lastTime / 120, 0.08);\r\n    }\r\n\r\n    speedUp() {\r\n        if (Date.now() > copyMgr().getMainPlayerCopySettings().speedUpTime)\r\n            BattleInterface.BoostMainBattle().then(res => copyMgr().getMainPlayerCopySettings().speedUpTime = Date.now() + 1000 * 120);\r\n    }\r\n\r\n    toTime(time: number) {\r\n        let min = Math.floor(time / 60);\r\n        let sec = Math.floor(time % 60);\r\n        return (min < 10 ? \"0\" + min : min) + \":\" + (sec < 10 ? \"0\" + sec : sec);\r\n    }\r\n}\r\n","import {PartType, partTypeRepo, SpecialPartType} from \"../Modules/HeroModule/Data/PartType\";\r\nimport {HeroType, heroTypeRepo} from \"../Modules/HeroModule/Data/HeroType\";\r\nimport {Part, partRepo} from \"../Modules/HeroModule/Data/Part\";\r\nimport {BaseData} from \"../Modules/CoreModule/Data/BaseData\";\r\nimport {partId2NftMakeId} from \"../Modules/NFTModule/Managers/NFTManager\";\r\nimport {PromiseUtils} from \"./PromiseUtils\";\r\nimport {configMgr} from \"../Modules/CoreModule/Managers/ConfigManager\";\r\nimport PartConfig from \"../Modules/HeroModule/Configs/PartConfig\";\r\nimport {editorMgr} from \"../Modules/HeroModule/Managers/EditorManager\";\r\nimport Slot = sp.spine.Slot;\r\nimport Skeleton = sp.spine.Skeleton;\r\nimport SlotData = sp.spine.SlotData;\r\nimport Bone = sp.spine.Bone;\r\nimport RegionAttachment = sp.spine.RegionAttachment;\r\nimport BoneData = sp.spine.BoneData;\r\nimport Vec2 = cc.Vec2;\r\nimport Texture2D = cc.Texture2D;\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport {PartSetting} from \"../Modules/HeroModule/Data/Hero\";\r\n\r\nconst StandardMinY = -4;\r\n\r\n// 重写位置更新函数\r\nconst oriUpdateWorldTransformWith = Bone.prototype.updateWorldTransformWith;\r\nBone.prototype.updateWorldTransformWith = function(\r\n\tx, y, rotation, scaleX, scaleY, shearX, shearY) {\r\n\r\n\tscaleX *= this.scaleX2 == undefined ? 1 : this.scaleX2; // * (this.scaleX3 || 1);\r\n\tscaleY *= this.scaleY2 == undefined ? 1 : this.scaleY2; // * (this.scaleY3 || 1);\r\n\r\n\toriUpdateWorldTransformWith.call(this, x, y, rotation, scaleX, scaleY, shearX, shearY);\r\n\r\n\tthis.worldX += this.offsetX || 0;\r\n\tthis.worldY += this.offsetY || 0;\r\n\t// this.worldX += this.offsetX2 || 0;\r\n\t// this.worldY += this.offsetY2 || 0;\r\n};\r\n\r\nexport class HeroSkeleton extends BaseData {\r\n\r\n\tpublic sk: sp.Skeleton;\r\n\tpublic tmpSk: sp.Skeleton;\r\n\r\n\tpublic constructor(sk: sp.Skeleton,\r\n\t\t\t\t\t\t\t\t\t\t tmpSk: sp.Skeleton,\r\n\t\t\t\t\t\t\t\t\t\t heroTypeId: number = 0) {\r\n\t\tsuper();\r\n\t\tthis.sk = sk; this.tmpSk = tmpSk;\r\n\t\tthis.setHeroTypeId(heroTypeId);\r\n\t\tthis.refresh();\r\n\t}\r\n\r\n\t// region 数据封装\r\n\r\n\t/**\r\n\t * 骨骼数据实例\r\n\t */\r\n\tpublic get skeleton(): Skeleton {\r\n\t\treturn this.sk[\"_skeleton\"];\r\n\t}\r\n\t/**\r\n\t * 骨骼数据实例\r\n\t */\r\n\tpublic get tmpSkeleton(): Skeleton {\r\n\t\treturn this.tmpSk[\"_skeleton\"];\r\n\t}\r\n\r\n\t/**\r\n\t * 英雄类型数据\r\n\t */\r\n\tprivate _heroTypeId: number;\r\n\tpublic get heroType() {\r\n\t\treturn heroTypeRepo().getById(this._heroTypeId);\r\n\t}\r\n\tpublic get heroTypeId() { return this._heroTypeId; }\r\n\r\n\t/**\r\n\t * 部件数据\r\n\t */\r\n\tprivate _partSettings: PartSetting[] = [];\r\n\t// private _partIds: number[] = [];\r\n\tpublic get partSettings() { return this._partSettings; }\r\n\t// public get partIds() { return this._partSettings.map(ps => ps.partId); }\r\n\tpublic get nftPartIds() {\r\n\t\treturn this._partSettings.filter(ps => !ps.part().isEmpty)\r\n\t\t\t.map(ps => partId2NftMakeId(ps.partId));\r\n\t}\r\n\tpublic get parts() {\r\n\t\treturn this._partSettings.map(ps => partRepo().getById(ps.partId));\r\n\t}\r\n\r\n\t/**\r\n\t * 获取部件设置\r\n\t */\r\n\tpublic getPartSetting(partId: number) {\r\n\t\treturn this._partSettings.find(ps => ps.partId == partId);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 基本操作\r\n\r\n\t/**\r\n\t * 设置英雄类型\r\n\t */\r\n\tpublic setHeroTypeId(heroTypeId: number) {\r\n\t\tthis._heroTypeId = heroTypeId;\r\n\t\tthis.removeExclusionParts();\r\n\r\n\t\tthis.sk.skeletonData = this.heroType.defaultSkeleton;\r\n\t\tthis.removeNotExistParts();\r\n\r\n\t\tthis.adjustDrawOrder();\r\n\t\t// this.initSkeleton();\r\n\t}\r\n\r\n\t/**\r\n\t * 添加部件\r\n\t */\r\n\tpublic addPart(part: Part, force = false) {\r\n\t\t// console.error(\"[addPart]\", {part, name: part.name, force});\r\n\t\tif (!part || part.partType.isBackground) return; // 背景不会被添加\r\n\r\n\t\tlet ps = this.getPartSetting(part.id);\r\n\t\tif (!ps) {\r\n\t\t\tps = PartSetting.create(part.id);\r\n\t\t\tlet idx = this.parts.findIndex(p => p.partTypeId == part.partTypeId);\r\n\t\t\tidx == -1 ? this._partSettings.push(ps) : this._partSettings[idx] = ps;\r\n\t\t}\r\n\r\n\t\tconsole.log(\"addPart\", this._partSettings);\r\n\r\n\t\t// 考虑互斥\r\n\t\tif (!force) this.removeExclusionParts(part);\r\n\t}\r\n\r\n\t/**\r\n\t * 移除部件\r\n\t */\r\n\tpublic removePart(part: Part, force = false) {\r\n\t\t// console.error(\"[removePart]\", {part, name: part.name, force});\r\n\t\tif (!part) return;\r\n\t\tif (!force && !part.partType.optional) // 如果必选\r\n\t\t\tthis.addPart(partRepo().getByPartTypeId(part.partTypeId));\r\n\t\telse {\r\n\t\t\tlet idx = this.parts.findIndex(p => p.partTypeId == part.partTypeId);\r\n\t\t\tthis._partSettings.splice(idx, 1);\r\n\r\n\t\t\tpart.slotNames.forEach(sName =>\r\n\t\t\t\tthis.skeleton?.findSlot(sName)?.setAttachment(null)\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 寻找部件\r\n\t */\r\n\tpublic findPart(partTypeOrId: PartType | number) {\r\n\t\tconst ptId = (typeof partTypeOrId == \"number\" ? partTypeOrId : partTypeOrId.id);\r\n\t\treturn this.parts.find(p => p.partTypeId == ptId);\r\n\t}\r\n\r\n\t/**\r\n\t * 移除没有被装备上的部件（扒光）\r\n\t */\r\n\tprivate removeNotExistParts() {\r\n\t\tpartTypeRepo().find().forEach(pt => {\r\n\t\t\tif (pt.special == SpecialPartType.Background) return;\r\n\t\t\tif (this.parts.find(p => p.partType == pt)) return;\r\n\t\t\tlet temp = partRepo().find({partTypeId: pt.id})[0];\r\n\t\t\tthis.addPart(temp, true); this.removePart(temp);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * 调整绘制顺序\r\n\t */\r\n\tprivate adjustDrawOrder() {\r\n\t\tconst orders = configMgr().config(PartConfig).slotOrders;\r\n\t\tthis.skeleton?.drawOrder.sort((a, b) =>\r\n\t\t\torders[a.data.name] - orders[b.data.name]);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 缩放处理\r\n\r\n\t/**\r\n\t * 计算缩放\r\n\t */\r\n\tpublic calcScale(part: Part) {\r\n\t\tconst ht = part.heroType, cht = this.heroType;\r\n\t\tconst pt = part.partType, bptId = pt.baseTypeId;\r\n\r\n\t\tlet res = cht.scale / ht.scale; // pt.isBody ? ht.scale : (cht.scale / ht.scale);\r\n\r\n\t\tconst ps = this.getPartSetting(part.id);\r\n\t\tres *= ps?.scale || 1;\r\n\r\n\t\tif (bptId == -1) // 如果是根\r\n\t\t\t// 只考虑 Part → HeroType 缩放\r\n\t\t\tres *= editorMgr().getPHtScale(pt.id, cht.id, ht.id);\r\n\t\telse {\r\n\t\t\tconst bp = pt.isWeapon ?\r\n\t\t\t\tthis.findPart(partTypeRepo().body) :\r\n\t\t\t\tthis.findPart(pt.basePartType);\r\n\r\n\t\t\t// 考虑 Part → HeroType 缩放\r\n\t\t\tconst htId = part.heroTypeId, bhtId = bp?.heroTypeId;\r\n\t\t\tconst scale1 = editorMgr().getPHtScale(pt.id, bhtId, htId);\r\n\t\t\tconst scale2 = editorMgr().getPtBptScale(part.oriId, bp?.oriId);\r\n\t\t\tres *= scale1 * scale2;\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 计算偏移\r\n\t */\r\n\tpublic calcOffset(part: Part) {\r\n\t\tconst pt = part.partType, bptId = pt.baseTypeId;\r\n\t\tif (bptId == -1) return [0, 0];\r\n\r\n\t\tconst bpt = pt.basePartType, bp = this.findPart(bpt);\r\n\t\treturn editorMgr().getPtBptOffset(part.oriId, bp?.oriId);\r\n\t}\r\n\r\n\t/**\r\n\t * 计算隐藏\r\n\t */\r\n\tpublic calcHidden(part: Part) {\r\n\t\tconst pt = part.partType, bptId = pt.baseTypeId;\r\n\t\tif (bptId == -1) return [];\r\n\r\n\t\tconst bpt = pt.basePartType, bp = this.findPart(bpt);\r\n\t\treturn editorMgr().getPtBptHidden(part.oriId, bp?.oriId);\r\n\t}\r\n\r\n\t/**\r\n\t * 计算Clothes6问题\r\n\t */\r\n\tpublic calcClothes6(part: Part) {\r\n\t\t// if (!part.partType.isClothes) return false;\r\n\t\tconst hp = this.findPart(partTypeRepo().head);\r\n\t\treturn editorMgr().getClothes6Problem(part.oriId, hp?.oriId);\r\n\t}\r\n\r\n\t/**\r\n\t * 计算Weapon3问题\r\n\t */\r\n\tpublic calcWeapon3(part: Part) {\r\n\t\t// if (!part.partType.isClothes) return false;\r\n\t\tconst bp = this.findPart(partTypeRepo().body);\r\n\t\treturn editorMgr().getWeapon3Problem(part.oriId, bp?.oriId);\r\n\t}\r\n\r\n\t/**\r\n\t * 计算偏移\r\n\t */\r\n\tpublic calcFootOffset(part: Part) {\r\n\t\tconst isFoot = part.partType.isFoot;\r\n\t\tif (!isFoot) return [0, 0];\r\n\t\treturn editorMgr().getFootOffset(part.oriId);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 互斥处理\r\n\r\n\t/**\r\n\t * 移除互斥的部件\r\n\t * @param part 父Part，不填则会从根Part开始遍历\r\n\t */\r\n\tprivate removeExclusionParts(part?: Part) {\r\n\t\tif (part === undefined) { // 如果没有该参数\r\n\t\t\tconst roots = partTypeRepo().rootPartTypes();\r\n\t\t\tconst rParts = roots.map(pt => this.findPart(pt));\r\n\t\t\tfor (const rPart of rParts)\r\n\t\t\t\trPart && this.removeExclusionParts(rPart)\r\n\t\t} else {\r\n\t\t\tconst pt = part.partType;\r\n\r\n\t\t\tconst subs = pt.subPartTypes;\r\n\t\t\tfor (const sub of subs) {\r\n\t\t\t\tconst sPart = this.findPart(sub);\r\n\t\t\t\tif (!sPart) continue;\r\n\r\n\t\t\t\tif (this.calcScale(sPart) == 0)\r\n\t\t\t\t\tthis.removePart(sPart);\r\n\t\t\t\telse\r\n\t\t\t\t\tthis.removeExclusionParts(sPart); // 继续处理sub\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 骨头操作\r\n\r\n\t/**\r\n\t * 查找骨骼\r\n\t */\r\n\tpublic findBone(boneOrName: Bone | string, tmp = false): Bone {\r\n\t\tif (!boneOrName) return null;\r\n\t\tif (typeof boneOrName === \"string\")\r\n\t\t\treturn (tmp ? this.tmpSk : this.sk).findBone(boneOrName);\r\n\t\treturn this.findBone(boneOrName.data.name, tmp);\r\n\t}\r\n\r\n\t/**\r\n\t * 查找所有Children\r\n\t */\r\n\tpublic findAllChildren(boneOrName: Bone | string, tmp = false): Bone[] {\r\n\t\tconst bone = this.findBone(boneOrName, tmp);\r\n\t\tif (!bone) return [];\r\n\r\n\t\tlet res = [bone, ...bone.children];\r\n\t\tfor (const child of bone.children)\r\n\t\t\tres = res.concat(this.findAllChildren(child, tmp));\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 应用骨骼\r\n\t */\r\n\tpublic applyBone(bone: Bone, tBoneOrAssign?: Bone | boolean, assign = true) {\r\n\t\tlet tBone: Bone;\r\n\t\tif (typeof tBoneOrAssign == \"boolean\") assign = tBoneOrAssign;\r\n\t\telse tBone = tBoneOrAssign;\r\n\r\n\t\tconst sBone = tBone || this.findBone(bone);\r\n\t\tif (!sBone) return;\r\n\t\tif (assign) SpineUtils.assignBone(bone, sBone);\r\n\r\n\t\tbone.children.forEach(c => this.applyBone(c));\r\n\t\treturn sBone;\r\n\t}\r\n\r\n\t/**\r\n\t * 变换骨头\r\n\t */\r\n\tprivate transformBone(bone: Bone, scale = 1, offset = [0, 0]) {\r\n\t\tconst sBone = this.findBone(bone);\r\n\t\tif (!sBone) return;\r\n\r\n\t\t// sBone.scaleX = sBone.data.scaleX * scale;\r\n\t\t// sBone.scaleY = sBone.data.scaleY * scale;\r\n\r\n\t\tsBone[\"scaleX2\"] = scale;\r\n\t\tsBone[\"scaleY2\"] = scale;\r\n\t\tsBone[\"offsetX\"] = offset[0];\r\n\t\tsBone[\"offsetY\"] = offset[1];\r\n\r\n\t\t// const children = this.findAllChildren(bone);\r\n\t\t//\r\n\t\t// if (children.length <= 0) return;\r\n\t\t//\r\n\t\t// children[0][\"scaleX2\"] = scale;\r\n\t\t// children[0][\"scaleY2\"] = scale;\r\n\t\t// children[0][\"offsetX\"] = offset[0];\r\n\t\t// children[0][\"offsetY\"] = offset[1];\r\n\r\n\t\t// children.slice(1).forEach(bone => {\r\n\t\t// \tif (bone.data.transformMode == TransformMode.NoScale ||\r\n\t\t// \t\tbone.data.transformMode == TransformMode.NoScaleOrReflection) {\r\n\t\t//\r\n\t\t// \t\tbone[\"scaleX3\"] = scale;\r\n\t\t// \t\tbone[\"scaleY3\"] = scale;\r\n\t\t// \t}\r\n\t\t// })\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 槽操作\r\n\r\n\t/**\r\n\t * 查找槽\r\n\t */\r\n\tpublic findSlot(slotOrName: Slot | string, tmp = false): sp.spine.Slot {\r\n\t\tif (!slotOrName) return null;\r\n\t\tif (typeof slotOrName === \"string\")\r\n\t\t\treturn (tmp ? this.tmpSk : this.sk).findSlot(slotOrName);\r\n\t\treturn this.findSlot(slotOrName.data.name, tmp);\r\n\t}\r\n\r\n\t/**\r\n\t * 应用槽\r\n\t */\r\n\tpublic applySlot(slot: Slot, tSlot?: Slot) {\r\n\t\tconst res = tSlot || this.findSlot(slot);\r\n\t\tif (res) SpineUtils.assignSlot(slot, res);\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 槽点击测试\r\n\t */\r\n\tpublic slotTouchTest(slotName: string, dt: Vec2) {\r\n\t\tconst res = this.findSlot(slotName);\r\n\r\n\t\tif (!res) return;\r\n\t\t// @ts-ignore\r\n\t\tconst lLoc = res.bone.worldToLocal({x: dt.x, y: dt.y});\r\n\t\tconst attach = res.getAttachment() as sp.spine.RegionAttachment;\r\n\t\tif (!attach) return;\r\n\r\n\t\tconst aLoc = {x: lLoc.x - attach.x, y: lLoc.y - attach.y};\r\n\r\n\t\t// 当前点与当前坐标系的夹角\r\n\t\tconst dist = Math.sqrt(aLoc.x * aLoc.x + aLoc.y * aLoc.y);\r\n\t\tconst ang = Math.atan(aLoc.y / aLoc.x) / Math.PI * 180;\r\n\t\tconst newAng = ang - attach.rotation;\r\n\t\tconst newRad = newAng / 180 * Math.PI;\r\n\t\tconst newLoc = {\r\n\t\t\tx: dist * Math.cos(newRad), y: dist * Math.sin(newRad)\r\n\t\t};\r\n\t\tconst aw = attach.width * attach.scaleX;\r\n\t\tconst ah = attach.height * attach.scaleY;\r\n\r\n\t\treturn newLoc.x >= -aw / 2 && newLoc.x <= aw / 2\r\n\t\t\t&& newLoc.y >= -ah / 2 && newLoc.y <= ah / 2 ? res : null;\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 附件操作\r\n\r\n\t/**\r\n\t * 将某插槽内attachment的贴图替换为指定图片\r\n\t */\r\n\tprivate setAttachment(slot: Slot, texture: SpriteFrame) {\r\n\t\tlet att = slot.getAttachment();\r\n\t\tconst region = SpineUtils.changeTexture2DToRegion(texture.getTexture());\r\n\r\n\t\tif (!att) slot.setAttachment(att = new RegionAttachment(texture.name))\r\n\r\n\t\tatt[\"region\"] = region;\r\n\t\tatt[\"setRegion\"](region);\r\n\t\tatt[\"updateOffset\"]();\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// // region 骨骼操作\r\n\t//\r\n\t// /**\r\n\t//  * 初始化骨骼\r\n\t//  */\r\n\t// public initSkeleton() {\r\n\t// \t// this.skeleton.slots.forEach(slot => slot.setAttachment(null));\r\n\t// }\r\n\t//\r\n\t// // endregion\r\n\r\n\t// region 绘制控制\r\n\r\n\tpublic drawing = false;\r\n\r\n\t/**\r\n\t * 刷新\r\n\t */\r\n\tpublic async refresh(editorMode = false) {\r\n\t\tawait PromiseUtils.waitFor(() => !this.drawing);\r\n\t\tthis.drawing = true;\r\n\t\tawait this.drawParts(editorMode);\r\n\t\t// TODO: 待优化，不知道为啥如果不setTimeout，第二次选择的情况下autoY会为NaN从而就无法显示\r\n\t\tsetTimeout(() => this.adjustSkeleton(), 100);\r\n\t\tthis.drawing = false;\r\n\t}\r\n\tprivate adjustSkeleton() {\r\n\t\tconst footPart = this.findPart(partTypeRepo().foot);\r\n\t\tconst footOffset = this.calcFootOffset(footPart);\r\n\t\tconst autoY = this.getAutoOffsetY(footPart);\r\n\r\n\t\tthis.skeleton.scaleX = this.skeleton.scaleY = this.heroType.scale;\r\n\t\tthis.skeleton.x = footOffset[0];\r\n\t\tthis.skeleton.y = footOffset[1] + autoY;\r\n\t}\r\n\tprivate getAutoOffsetY(footPart) {\r\n\t\tlet minY = 99999;\r\n\t\tfootPart.slotNames.forEach(name => {\r\n\t\t\tconst slot = this.findSlot(name);\r\n\t\t\tconst root = this.findBone(\"root\");\r\n\t\t\tconst attach = slot.getAttachment() as RegionAttachment;\r\n\t\t\tif (!attach) return;\r\n\r\n\t\t\tconst bone = slot.bone;\r\n\t\t\t// root.update();\r\n\r\n\t\t\t// @ts-ignore\r\n\t\t\tlet wLoc = bone.localToWorld({x: attach.x, y: attach.y});\r\n\t\t\twLoc = root.worldToLocal(wLoc);\r\n\t\t\t// wLoc.y -= this.skeleton.y;\r\n\r\n\t\t\tconst aw = attach.width * attach.scaleX;\r\n\t\t\tconst ah = attach.height * attach.scaleY;\r\n\t\t\tconst ang = attach.rotation + slot.bone.data.rotation;\r\n\t\t\tconst rad = ang / 180 * Math.PI;\r\n\r\n\t\t\tconst newH = aw * Math.sin(rad) + ah * Math.cos(rad);\r\n\t\t\tminY = Math.min(minY, wLoc.y - newH / 2);\r\n\t\t});\r\n\t\treturn StandardMinY - minY;\r\n\t}\r\n\tprivate async drawParts(partOrEditorMode: Part | boolean = false,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\teditorMode = false) {\r\n\t\tif (typeof partOrEditorMode == \"boolean\")\r\n\t\t\treturn this.drawParts(null, partOrEditorMode);\r\n\r\n\t\tconst part = partOrEditorMode;\r\n\t\tif (part == undefined) { // 如果没有该参数\r\n\t\t\tconst roots = partTypeRepo().rootPartTypes();\r\n\t\t\tconst rParts = roots.map(pt => this.findPart(pt));\r\n\t\t\tfor (const rPart of rParts)\r\n\t\t\t\trPart && await this.drawParts(rPart, editorMode);\r\n\t\t} else {\r\n\t\t\tconst pt = part.partType;\r\n\t\t\tawait this.drawPart(part, editorMode);\r\n\r\n\t\t\t// 考虑 PartType → Base PartType 缩放\r\n\t\t\t// 查询配置表中，当前装备的所有互斥子装备\r\n\t\t\t// const scales = config.ptBptScale.filter(\r\n\t\t\t// \titem => item[1] == part.oriId && item[2] > 0);\r\n\r\n\t\t\tconst subs = pt.subPartTypes;\r\n\t\t\tfor (const sub of subs) {\r\n\t\t\t\tconst sPart = this.findPart(sub);\r\n\t\t\t\tif (!sPart) continue;\r\n\r\n\t\t\t\tawait this.drawParts(sPart, editorMode);\r\n\t\t\t}\r\n\r\n\t\t\t// const subs = pt.subPartTypes();\r\n\t\t\t// for (const sub of subs) {\r\n\t\t\t// }\r\n\t\t}\r\n\t}\r\n\tprivate async drawPart(part: Part, editorMode = false) {\r\n\t\tif (part.isEmpty) {\r\n\t\t\tconst names = part.slotNames;\r\n\t\t\tnames.forEach(name => {\r\n\t\t\t\tconst slot = this.findSlot(name);\r\n\t\t\t\tslot.setAttachment(null);\r\n\t\t\t})\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.tmpSk.skeletonData = await part.skeleton();\r\n\r\n\t\tconst scale = this.calcScale(part);\r\n\t\tconst offset = this.calcOffset(part);\r\n\t\tconst hidden = this.calcHidden(part);\r\n\r\n\t\tif (part.partType.isBody) {\r\n\t\t\tconst bone = this.findBone(\"center\", true);\r\n\t\t\tthis.applyBone(bone, false);\r\n\t\t\tthis.transformBone(bone, scale, offset);\r\n\t\t}\r\n\r\n\t\tlet visNames = [], names = part.boneNames;\r\n\r\n\t\tnames.forEach(name => {\r\n\r\n\t\t\tif (visNames.includes(name)) return;\r\n\r\n\t\t\tconst children = this.findAllChildren(name, true);\r\n\t\t\tchildren.forEach(child => {\r\n\t\t\t\tif (!names.includes(child.data.name)) return;\r\n\t\t\t\tvisNames.push(child.data.name);\r\n\t\t\t\tthis.transformBone(child);\r\n\t\t\t});\r\n\r\n\t\t\tconst bone = children[0];\r\n\t\t\t// 处理Clothes6问题\r\n\t\t\t// if (this.isClothes6(name)) {\r\n\t\t\t// \tconst curBone = this.findBone(name);\r\n\t\t\t// \tconst subBone = this.findBone(name == \"clothes_6\" ? \"clothes_1\" : \"clothes_6\");\r\n\t\t\t//\r\n\t\t\t// \tthis.applyBone(bone, clothes6 ? subBone : curBone, false);\r\n\t\t\t// } else this.applyBone(bone, false);\r\n\r\n\t\t\tconst sBone = this.applyBone(bone, false);\r\n\r\n\t\t\tif (part.partType.isWeapon) {\r\n\t\t\t\tconst rScale = scale / (sBone.parent['scaleX2'] || 1);\r\n\t\t\t\tthis.transformBone(bone, rScale, offset);\r\n\t\t\t} else\r\n\t\t\t\tthis.transformBone(bone, scale, offset);\r\n\t\t})\r\n\r\n\t\t// part.boneNames.forEach(name => this.applyBone(\r\n\t\t// \tthis.findBone(name, true), false, scale, offset)\r\n\t\t// );\r\n\r\n\t\t// part.slotNames.forEach(name => {\r\n\t\t// \tconst slot = this.applySlot(this.findSlot(name, true))\r\n\t\t// \tif (hidden.includes(name)) slot.color.a = editorMode ? 0.5 : 0;\r\n\t\t// });\r\n\r\n\t\t// const attachments = await part.allPictures();\r\n\t\tnames = part.slotNames;\r\n\t\tnames.forEach(name => {\r\n\t\t\t// let slot;\r\n\t\t\t// const sSlot = this.findSlot(name, true);\r\n\t\t\t// // slot = this.applySlot(sSlot);\r\n\t\t\t//\r\n\t\t\t// // 处理Clothes6问题\r\n\t\t\t// if (this.isClothes6(name)) {\r\n\t\t\t// \tconst curSlot = this.findSlot(name);\r\n\t\t\t// \tconst subSlot = this.findSlot(name == \"clothes_6\" ? \"clothes_1\" : \"clothes_6\");\r\n\t\t\t//\r\n\t\t\t// \tif (clothes6) {\r\n\t\t\t// \t\tslot = this.applySlot(sSlot, subSlot);\r\n\t\t\t// \t\tcurSlot.setAttachment(null);\r\n\t\t\t// \t} else {\r\n\t\t\t// \t\tslot = this.applySlot(sSlot);\r\n\t\t\t// \t\tsubSlot.setAttachment(null);\r\n\t\t\t// \t}\r\n\t\t\t// } else slot = this.applySlot(sSlot);\r\n\r\n\t\t\tconst slot = this.applySlot(this.findSlot(name, true));\r\n\t\t\t// 处理隐藏\r\n\t\t\tif (hidden.includes(name))\r\n\t\t\t\tslot.color.a = slot.data.color.a = editorMode ? 0.5 : 0;\r\n\t\t\telse if (slot) slot.color.a = slot.data.color.a = 1;\r\n\t\t\t// else {\r\n\t\t\t// \tconst attachment = attachments.get(name);\r\n\t\t\t// \tif (attachment) this.setAttachment(slot, attachment);\r\n\t\t\t// }\r\n\t\t});\r\n\r\n\t\t// 处理变色\r\n\t\tconst attachments = await part.allPictures();\r\n\t\tnames.forEach(name => {\r\n\t\t\t// if (name == \"clothes_1\" && clothes6) return;\r\n\t\t\t// const slot = this.findSlot(this.isClothes6(name) ?\r\n\t\t\t// \tclothes6 ? \"clothes_1\" : \"clothes_6\" : name);\r\n\r\n\t\t\tconst slot = this.findSlot(name);\r\n\t\t\tconst attachment = attachments.get(name);\r\n\t\t\tif (attachment) this.setAttachment(slot, attachment);\r\n\t\t})\r\n\r\n\t\t// 处理Weapon3问题\r\n\t\tif (part.partType.isWeapon) {\r\n\t\t\tconst w1 = \"weapon_1\", w6 = \"weapon_6\", w3 = \"weapon_3\";\r\n\t\t\tconst isW1 = !!this.findSlot(w1).getAttachment();\r\n\t\t\tconst isW6 = !!this.findSlot(w6).getAttachment();\r\n\t\t\tif ((isW1 || isW6) && !(isW1 && isW6)) { // 不能同时存在\r\n\r\n\t\t\t\tconst weapon3 = this.calcWeapon3(part);\r\n\r\n\t\t\t\tconst sw6Bone = this.findBone(w6, true), sw1Bone = this.findBone(w1, true);\r\n\t\t\t\tconst sw3Bone = this.findBone(w3, true);\r\n\t\t\t\tconst sw6Slot = this.findSlot(w6, true), sw1Slot = this.findSlot(w1, true);\r\n\t\t\t\tconst sw3Slot = this.findSlot(w3, true);\r\n\r\n\t\t\t\tconst w6Bone = this.findBone(w6), w1Bone = this.findBone(w1);\r\n\t\t\t\tconst w3Bone = this.findBone(w3);\r\n\t\t\t\tconst w6Slot = this.findSlot(w6), w1Slot = this.findSlot(w1);\r\n\t\t\t\tconst w3Slot = this.findSlot(w3);\r\n\r\n\t\t\t\tif (isW1) {\r\n\t\t\t\t\tthis.applyBone(sw1Bone, weapon3 ? w3Bone : w1Bone, false);\r\n\t\t\t\t\tthis.applyBone(sw3Bone, weapon3 ? w1Bone : w3Bone, false);\r\n\r\n\t\t\t\t\tthis.applySlot(sw1Slot, weapon3 ? w3Slot : w1Slot);\r\n\t\t\t\t\tthis.applySlot(sw3Slot, weapon3 ? w1Slot : w3Slot);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.applyBone(sw6Bone, weapon3 ? w3Bone : w6Bone, false);\r\n\t\t\t\t\tthis.applyBone(sw3Bone, weapon3 ? w6Bone : w3Bone, false);\r\n\r\n\t\t\t\t\tthis.applySlot(sw6Slot, weapon3 ? w3Slot : w6Slot);\r\n\t\t\t\t\tthis.applySlot(sw3Slot, weapon3 ? w6Slot : w3Slot);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 处理Clothes6问题\r\n\t\tif (part.partType.isClothes) {\r\n\t\t\tconst c6 = \"clothes_6\", c4 = \"clothes_4\";\r\n\t\t\tconst isC6 = !!this.findSlot(c6).getAttachment();\r\n\t\t\tconst isC1 = !!this.findSlot(c4).getAttachment();\r\n\t\t\tif ((isC6 || isC1) && !(isC6 && isC1)) {\r\n\t\t\t\tconst clothes6 = this.calcClothes6(part);\r\n\r\n\t\t\t\tconst sc6Bone = this.findBone(c6, true), sc1Bone = this.findBone(c4, true);\r\n\t\t\t\tconst sc6Slot = this.findSlot(c6, true), sc1Slot = this.findSlot(c4, true);\r\n\r\n\t\t\t\tconst c6Bone = this.findBone(c6), c1Bone = this.findBone(c4);\r\n\t\t\t\tconst c6Slot = this.findSlot(c6), c1Slot = this.findSlot(c4);\r\n\r\n\t\t\t\tthis.applyBone(sc6Bone, clothes6 ? c1Bone : c6Bone, false);\r\n\t\t\t\tthis.applyBone(sc1Bone, clothes6 ? c6Bone : c1Bone, false);\r\n\r\n\t\t\t\tthis.applySlot(sc6Slot, clothes6 ? c1Slot : c6Slot);\r\n\t\t\t\tthis.applySlot(sc1Slot, clothes6 ? c6Slot : c1Slot);\r\n\r\n\t\t\t\tif (isC1 && clothes6) { // 失败的尝试\r\n\t\t\t\t\t// c6Bone.data.x = c1Bone.data.x; // SpineUtils.assignBone(c6Bone, c1Bone);\r\n\t\t\t\t\t// c6Bone.data.y = c1Bone.data.y;\r\n\t\t\t\t}\r\n\t\t\t\tif (isC6 && clothes6) { // 失败的尝试\r\n\t\t\t\t\t// c1Bone.data.x = c6Bone.data.x; // SpineUtils.assignBone(c6Bone, c1Bone);\r\n\t\t\t\t\t// c1Bone.data.y = c6Bone.data.y;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// this.transformBone(c1Bone, scale, offset);\r\n\t\t\t\t// this.transformBone(c6Bone, scale, offset);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// endregion\r\n\r\n}\r\n\r\nexport class SpineUtils {\r\n\r\n\t// region 槽控制\r\n\r\n\t// region 槽名称控制\r\n\r\n\t/**\r\n\t * 获取指定类型指定骨骼的槽名字序列\r\n\t */\r\n\tpublic static getSlotNames(partType: PartType) {\r\n\r\n\t\tconst res = [];\r\n\t\tconst config = configMgr().config(PartConfig);\r\n\t\tconst orders = config.slotOrders;\r\n\t\tconst map = config.slotNameMap;\r\n\r\n\t\tconst slots = Object.keys(orders).map(\r\n\t\t\tkey => [key, map[key] || key]);\r\n\r\n\t\t// 在不影响骨骼名情况下添加部件\r\n\t\tslots.forEach(slot => {\r\n\t\t\tif (partType.name == slot[1].split('_')[0])\r\n\t\t\t\tres.push(slot[0]);\r\n\t\t});\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取指定类型指定索引的槽名字\r\n\t */\r\n\tpublic static getSlotName(partType: PartType, index: number = 0) {\r\n\t\treturn partType.name + \"_\" + index;\r\n\t}\r\n\r\n\t// /**\r\n\t//  * 获取指定类型指定索引的槽名字\r\n\t//  */\r\n\t// public static getHeroSlotName(heroTypeOrId: HeroType | number,\r\n\t// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpartTypeOrName: PartType | string, index: number = 0) {\r\n\t//\r\n\t// \tconst hid = (typeof heroTypeOrId === \"number\" ?\r\n\t// \t\theroTypeOrId : heroTypeOrId.id) + 1;\r\n\t// \tconst name = typeof partTypeOrName === \"string\" ?\r\n\t// \t\tpartTypeOrName : this.getSlotName(partTypeOrName, index)\r\n\t//\r\n\t// \treturn hid + \"_\" + name;\r\n\t// }\r\n\r\n\t// endregion\r\n\r\n\t// region 槽动态控制\r\n\r\n\t/**\r\n\t * 赋值骨头变换信息\r\n\t */\r\n\tpublic static assignSlot(slot: Slot, targetSlot: Slot) {\r\n\t\tif (!targetSlot || slot == targetSlot) return targetSlot;\r\n\r\n\t\tconst dataKeys: (keyof SlotData)[] = [\r\n\t\t\t\"color\", \"darkColor\", \"blendMode\"];\r\n\r\n\t\ttargetSlot.data = Object.assign({}, targetSlot.data);\r\n\t\t// @ts-ignore\r\n\t\tdataKeys.forEach(key => targetSlot.data[key] = slot.data[key]);\r\n\t\ttargetSlot.setToSetupPose();\r\n\r\n\t\ttargetSlot.setAttachment(slot.getAttachment()?.copy())\r\n\r\n\t\treturn targetSlot;\r\n\t}\r\n\r\n\t/**\r\n\t * 判断绘制顺序\r\n\t */\r\n\tpublic static judgeDrawOrder(slot: Slot, skeleton: Skeleton) {\r\n\t\tconst sOrder = skeleton.drawOrder;\r\n\t\tconst sSlot = skeleton.findSlot(slot.data.name);\r\n\t\tif (sSlot) return sOrder.indexOf(sSlot);\r\n\r\n\t\tconst order = slot.getSkeleton().drawOrder;\r\n\t\tconst index = order.indexOf(slot);\r\n\r\n\t\tlet downMax = 0, upMin = sOrder.length - 1;\r\n\t\tfor (let i = index - 1; i >= 0; --i) {\r\n\t\t\tconst sName = order[i].data.name;\r\n\t\t\tconst tmpSlot = skeleton.findSlot(sName);\r\n\t\t\tif (!tmpSlot) continue;\r\n\r\n\t\t\tdownMax = Math.max(downMax, sOrder.indexOf(tmpSlot));\r\n\t\t}\r\n\t\tfor (let i = index + 1; i < order.length; ++i) {\r\n\t\t\tconst sName = order[i].data.name;\r\n\t\t\tconst tmpSlot = skeleton.findSlot(sName);\r\n\t\t\tif (!tmpSlot) continue;\r\n\r\n\t\t\tupMin = Math.min(upMin, sOrder.indexOf(tmpSlot));\r\n\t\t}\r\n\r\n\t\treturn Math.ceil((downMax + upMin) / 2);\r\n\t}\r\n\r\n\t/**\r\n\t * 复制槽到骨骼中\r\n\t */\r\n\tpublic static copySlotToSkeleton(\r\n\t\tslot: Slot, skeleton: Skeleton, drawOrder?: number) {\r\n\t\tif (drawOrder === undefined)\r\n\t\t\tdrawOrder = this.judgeDrawOrder(slot, skeleton);\r\n\r\n\t\tlet sSlot = skeleton.findSlot(slot.data.name);\r\n\t\tif (!sSlot) { // 如果没有指定的槽\r\n\t\t\tconst sBone = skeleton.findBone(slot.bone.data.name);\r\n\t\t\tif (!sBone) return null; // 如果没有指定的骨头\r\n\r\n\t\t\tsSlot = this.createSlot(skeleton,\r\n\t\t\t\tsBone, slot.data.name, drawOrder);\r\n\t\t}\r\n\t\treturn sSlot;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个Slot\r\n\t */\r\n\tpublic static createSlot(skeleton: Skeleton, bone: Bone, name: string, drawOrder?: number) {\r\n\t\tconst len = skeleton.slots.length;\r\n\t\tconst data = new SlotData(len, name, bone.data);\r\n\t\tconst res = new Slot(data, bone);\r\n\r\n\t\tif (drawOrder === undefined)\r\n\t\t\tskeleton.drawOrder.push(res);\r\n\t\telse skeleton.drawOrder.splice(drawOrder, 0, res);\r\n\t\tskeleton.slots.push(res);\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 复制一个Slot\r\n\t */\r\n\tpublic static copySlot(skeleton: Skeleton, slot: Slot, name: string) {\r\n\t\treturn this.createSlot(skeleton, slot.bone, name,\r\n\t\t\tskeleton.drawOrder.indexOf(slot) + 1);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// endregion\r\n\r\n\t// region 附件控制\r\n\r\n\t/**\r\n\t * 调整附件缩放\r\n\t */\r\n\tpublic static scaleAttachment(bone: Bone, att: RegionAttachment,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscaleX: number, scaleY: number) {\r\n\t\tatt.scaleX = scaleX;\r\n\t\tatt.scaleY = scaleY;\r\n\r\n\t\tthis.updateAttachmentOffset(bone, att);\r\n\t}\r\n\t// 参考源码为RegionAttachment.updateOffset\r\n\tprivate static updateAttachmentOffset(bone: Bone, att: RegionAttachment) {\r\n\t\tconst regionScaleX = att.width / att.region.originalWidth * att.scaleX;\r\n\t\tconst regionScaleY = att.height / att.region.originalHeight * att.scaleY;\r\n\r\n\t\tconst localX = -att.width / 2 * att.scaleX + att.region.offsetX * regionScaleX;\r\n\t\tconst localY = -att.height / 2 * att.scaleY + att.region.offsetY * regionScaleY;\r\n\t\tconst localX2 = localX + att.region.width * regionScaleX;\r\n\t\tconst localY2 = localY + att.region.height * regionScaleY;\r\n\t\tconst radians = att.rotation * Math.PI / 180;\r\n\t\tconst cos = Math.cos(radians);\r\n\t\tconst sin = Math.sin(radians);\r\n\r\n\t\t// const bonePos = this.boneDataWorldPos(bone);\r\n\t\t// const dx = att.x - bone.data.x;\r\n\t\t// const dy = att.y - bone.data.y;\r\n\r\n\t\tconst x = att.scaleX * att.x; // + (att.scaleX - 1) * att.x;\r\n\t\tconst y = att.scaleY * att.y; // + (att.scaleY - 1) * att.y;\r\n\r\n\t\tconst localXCos = localX * cos + x;\r\n\t\tconst localXSin = localX * sin;\r\n\t\tconst localYCos = localY * cos + y;\r\n\t\tconst localYSin = localY * sin;\r\n\t\tconst localX2Cos = localX2 * cos + x;\r\n\t\tconst localX2Sin = localX2 * sin;\r\n\t\tconst localY2Cos = localY2 * cos + y;\r\n\t\tconst localY2Sin = localY2 * sin;\r\n\t\tconst offset = att.offset;\r\n\t\toffset[RegionAttachment.OX1] = localXCos - localYSin;\r\n\t\toffset[RegionAttachment.OY1] = localYCos + localXSin;\r\n\t\toffset[RegionAttachment.OX2] = localXCos - localY2Sin;\r\n\t\toffset[RegionAttachment.OY2] = localY2Cos + localXSin;\r\n\t\toffset[RegionAttachment.OX3] = localX2Cos - localY2Sin;\r\n\t\toffset[RegionAttachment.OY3] = localY2Cos + localX2Sin;\r\n\t\toffset[RegionAttachment.OX4] = localX2Cos - localYSin;\r\n\t\toffset[RegionAttachment.OY4] = localYCos + localX2Sin;\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 骨头控制\r\n\r\n\t// region 骨头名称控制\r\n\r\n\t/**\r\n\t * 获取指定类型指定骨骼的骨头名字序列\r\n\t */\r\n\tpublic static getBoneNames(partType: PartType) {\r\n\r\n\t\tconst res = [];\r\n\r\n\t\tconst config = configMgr().config(PartConfig);\r\n\t\tconst orders = config.slotOrders;\r\n\t\tconst map = config.slotNameMap;\r\n\r\n\t\tconst slots = Object.keys(orders).map(\r\n\t\t\tkey => [key, map[key] || key]);\r\n\r\n\t\t// 在不影响骨骼名情况下添加部件\r\n\t\tslots.forEach(slot => {\r\n\t\t\tif (partType.name == slot[1].split('_')[0])\r\n\t\t\t\tres.push(slot[0]);\r\n\t\t});\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取指定类型指定索引的骨头名字\r\n\t */\r\n\tpublic static getBoneName(partType: PartType, index: number = 0) {\r\n\t\treturn partType.name + \"_\" + index;\r\n\t}\r\n\r\n\t// /**\r\n\t//  * 获取指定类型指定索引的槽名字\r\n\t//  */\r\n\t// public static getHeroSlotName(heroTypeOrId: HeroType | number,\r\n\t// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpartTypeOrName: PartType | string, index: number = 0) {\r\n\t//\r\n\t// \tconst hid = (typeof heroTypeOrId === \"number\" ?\r\n\t// \t\theroTypeOrId : heroTypeOrId.id) + 1;\r\n\t// \tconst name = typeof partTypeOrName === \"string\" ?\r\n\t// \t\tpartTypeOrName : this.getSlotName(partTypeOrName, index)\r\n\t//\r\n\t// \treturn hid + \"_\" + name;\r\n\t// }\r\n\r\n\t// endregion\r\n\r\n\t/**\r\n\t * 获取骨骼的绝对世界坐标\r\n\t */\r\n\tpublic static boneDataWorldPos(bone: Bone | BoneData) {\r\n\t\tif (bone instanceof Bone) bone = bone.data;\r\n\t\tconst res = Vec2.ZERO.clone();\r\n\t\tdo {\r\n\t\t\tres.x += bone.x; res.y += bone.y;\r\n\t\t\tbone = bone.parent;\r\n\t\t} while (bone.parent);\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取Skeleton中的spine.Skeleton数据\r\n\t */\r\n\tpublic static skeleton(sk: sp.Skeleton): Skeleton {\r\n\t\treturn sk[\"_skeleton\"];\r\n\t}\r\n\r\n\t/**\r\n\t * 寻找骨头的父亲\r\n\t */\r\n\tpublic static findBoneParent(bone: Bone, skeleton: Skeleton)\r\n\t\t: {bone?: Bone, parent?: Bone, sParent?: Bone} {\r\n\t\tconst parent = bone.parent;\r\n\t\tif (!parent) return null;\r\n\t\tconst sParent = skeleton.findBone(parent.data.name);\r\n\t\treturn sParent ? {bone, parent, sParent} :\r\n\t\t\tthis.findBoneParent(parent, skeleton);\r\n\t}\r\n\r\n\t/**\r\n\t * 赋值骨头变换信息\r\n\t */\r\n\tpublic static assignBone(bone: Bone, targetBone: Bone) {\r\n\t\tif (!targetBone || bone == targetBone) return targetBone;\r\n\r\n\t\tconst dataKeys: (keyof BoneData)[] = [\r\n\t\t\t\"x\", \"y\", \"length\", \"rotation\", \"scaleX\", \"scaleY\",\r\n\t\t\t\"shearX\", \"shearY\", \"color\", \"transformMode\", \"skinRequired\"];\r\n\r\n\t\ttargetBone.data = Object.assign({}, targetBone.data);\r\n\t\t// @ts-ignore\r\n\t\tdataKeys.forEach(key => targetBone.data[key] = bone.data[key]);\r\n\t\ttargetBone.setToSetupPose();\r\n\t\treturn targetBone;\r\n\t}\r\n\r\n\t/**\r\n\t * 复制骨头到骨骼中\r\n\t */\r\n\tpublic static copyBoneToSkeleton(bone: Bone, skeleton: Skeleton) {\r\n\t\t// 判断需要复制的骨头是否已经在骨骼中存在\r\n\t\tconst sBone = skeleton.findBone(bone.data.name);\r\n\t\tif (!sBone) { // 如果不存在，寻找骨骼中的父节点\r\n\t\t\tconst parentInfo = this.findBoneParent(bone, skeleton);\r\n\t\t\tif (!parentInfo) return; // 如果找不到父节点，终止操作\r\n\r\n\t\t\t// 执行copy操作，因为所有子节点均为空，直接copy即可\r\n\t\t\treturn this.copyBone(parentInfo.bone, parentInfo.sParent);\r\n\t\t} else // 如果存在，执行replace操作\r\n\t\t\treturn this.replaceBone(bone, sBone, false);\r\n\t}\r\n\r\n\t/**\r\n\t * 复制骨头\r\n\t */\r\n\tpublic static copyBone(bone: Bone, parent: Bone) {\r\n\t\tconst target = parent.skeleton;\r\n\r\n\t\tconst res = new Bone(bone.data, target, parent);\r\n\t\tbone.children.forEach(cBone => this.copyBone(cBone, res));\r\n\r\n\t\tparent.children.push(res);\r\n\r\n\t\ttarget.bones.push(res);\r\n\t\ttarget.sortBone(res);\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 替换骨头\r\n\t */\r\n\tpublic static replaceBone(bone: Bone, targetBone: Bone, assign: boolean = true) {\r\n\t\tif (!targetBone.parent) throw \"无法替换根骨骼\";\r\n\r\n\t\tif (assign) this.assignBone(bone, targetBone);\r\n\r\n\t\ttargetBone.active = true;\r\n\t\t// 先将所有孩子禁用\r\n\t\ttargetBone.children.forEach(c => c.active = false);\r\n\r\n\t\tbone.children.forEach(c => {\r\n\t\t\tconst name = c.data.name;\r\n\t\t\tconst tc = targetBone.children.find(tc => tc.data.name == name);\r\n\t\t\tif (tc) // 如果存在名字相同的孩子，使用replace\r\n\t\t\t\tthis.replaceBone(c, tc);\r\n\t\t\telse // 否则，使用copy\r\n\t\t\t\tthis.copyBone(c, targetBone);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * 添加部件\r\n\t */\r\n\tpublic static addPart(heroType: HeroType,\r\n\t\t\t\t\t\t\t\t\t\t\t\ttarget: Skeleton, source: Skeleton, part: Part) {\r\n\t\tconst pHeroType = part.heroType;\r\n\t\tconst scale = heroType.scale / pHeroType.scale;\r\n\r\n\t\tpart.slotNames.forEach(name => {\r\n\t\t\tconst sSlot = source.findSlot(name);\r\n\t\t\tlet tSlot = target.findSlot(name), tBone;\r\n\t\t\tif (!tSlot) {\r\n\t\t\t\ttBone = target.findBone(sSlot.bone.data.name);\r\n\t\t\t\tif (!tBone) return;\r\n\r\n\t\t\t\ttSlot = this.createSlot(target, tBone, name);\r\n\t\t\t} else tBone = tSlot.bone;\r\n\r\n\t\t\tconst att = sSlot.getAttachment().copy() as RegionAttachment;\r\n\t\t\t// this.scaleAttachment(tBone, att, scale, scale);\r\n\t\t\ttSlot.setAttachment(att);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * 添加部件\r\n\t */\r\n\tpublic static removePart(target: Skeleton, part: Part) {\r\n\t\tpart.slotNames.forEach(name =>\r\n\t\t\ttarget.findSlot(name)?.setAttachment(null)\r\n\t\t);\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 附件控制\r\n\r\n\t/*\r\n\t * Texture2D转化为TextureAtlasRegion\r\n\t */\r\n \tpublic static changeTexture2DToRegion(texture: Texture2D) {\r\n\r\n\t\t// texture[\"_premultiplyAlpha\"] = (true);\r\n\t\tlet skeletonTexture = new sp[\"SkeletonTexture\"]();\r\n\t\tskeletonTexture.setRealTexture(texture);\r\n\r\n\t\tlet page = new sp.spine.TextureAtlasPage();\r\n\t\tpage.name = texture.name;\r\n\t\tpage.uWrap = sp.spine.TextureWrap.ClampToEdge;\r\n\t\tpage.vWrap = sp.spine.TextureWrap.ClampToEdge;\r\n\t\tpage.texture = skeletonTexture;\r\n\t\tpage.texture.setWraps(page.uWrap, page.vWrap);\r\n\t\tpage.width = texture.width;\r\n\t\tpage.height = texture.height;\r\n\r\n\t\tlet region = new sp.spine.TextureAtlasRegion();\r\n\t\tregion.page = page;\r\n\t\tregion.width = texture.width;\r\n\t\tregion.height = texture.height;\r\n\t\tregion.originalWidth = texture.width;\r\n\t\tregion.originalHeight = texture.height;\r\n\r\n\t\tregion.rotate = false;\r\n\t\tregion.u = 0;\r\n\t\tregion.v = 0;\r\n\t\tregion.u2 = 1;\r\n\t\tregion.v2 = 1;\r\n\t\tregion.texture = skeletonTexture;\r\n\r\n\t\treturn region;\r\n\t}\r\n\r\n\t// endregion\r\n\r\n}\r\n","import Label = cc.Label;\r\nimport Animation = cc.Animation;\r\nimport Node = cc.Node;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class StageProgressController extends cc.Component {\r\n\r\n    @property(Animation)\r\n    animation: Animation = null;\r\n    @property(Label)\r\n    value: Label = null;\r\n    @property([Node])\r\n    enemies: Node[] = [];\r\n\r\n    @property(Number)\r\n    speed: number = 2.5; // 配置移动速度，完整移动动画时间 1s / speed\r\n    stageIndex: number = 1;\r\n    enemyIndex: number = 0;\r\n    private isCurrent: boolean = false;\r\n    private position: number = 2;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    init(index: number, position: number = 2) {\r\n        this.stageIndex = index;\r\n        this.value.string = this.stageIndex + \"\";\r\n        this.position = position;\r\n        this.node.x = 80 * position;\r\n        this.node.y = 0;\r\n    }\r\n\r\n    update (dt) {\r\n        this.updateNode(dt);\r\n        this.updateAnimation();\r\n        this.updateEnemies();\r\n    }\r\n\r\n    updateNode(dt: number) {\r\n        if (this.node.x > 80 * this.position) this.node.x = Math.max(this.node.x - 80 * dt * this.speed, 80 * this.position);\r\n        else this.node.x = Math.min(this.node.x + 80 * dt * this.speed, 80 * this.position);\r\n        let currentPosition = Math.abs(this.node.x);\r\n        this.node.scale = 1 - 3 * currentPosition / 1600;\r\n        this.node.opacity = 255 - 255 * Math.pow(currentPosition / 160, 2);\r\n    }\r\n\r\n    updateAnimation() {\r\n        if (Math.abs(this.node.x) <= 32) {\r\n            if (!this.isCurrent) {\r\n                this.animation.play(\"stageEnter\", 0);\r\n                this.isCurrent = true;\r\n            }\r\n        }\r\n        else {\r\n            if (this.isCurrent) {\r\n                this.animation.play(\"stageLeave\", 0);\r\n                this.isCurrent = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    updateEnemies() {\r\n        this.enemies.forEach((e, i) => e.active = i < this.enemyIndex);\r\n    }\r\n\r\n    nextStage() {\r\n        this.position--;\r\n        if (this.position < -2 && this.node.opacity == 0) this.node.destroy();\r\n    }\r\n\r\n    lastStage() {\r\n        this.position++;\r\n        if (this.position > 2 && this.node.opacity == 0) this.node.destroy();\r\n    }\r\n\r\n}\r\n","import HeroInfoDisplay from \"../HeroInfoDisplay\";\r\nimport CultivateWindowController from \"../CultivateWindowController\";\r\nimport {autoUnitConvert} from \"../../../../../Utils/NumberUtils\";\r\nimport {playerMgr} from \"../../../../PlayerModule/Managers/PlayerManager\";\r\nimport {PlayerMoney} from \"../../../../EconomicModule/Data/PlayerMoney\";\r\nimport Sprite = cc.Sprite;\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport Node = cc.Node;\r\nimport Label = cc.Label;\r\nimport {heroMgr} from \"../../../../HeroModule/Managers/HeroManager\";\r\nimport Button = cc.Button;\r\nimport {battleScene} from \"../../../../../Scenes/BattleScene\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class StarUpWindowDisplay extends cc.Component {\r\n\r\n    // region Background中组件及资源引用\r\n\r\n    @property(HeroInfoDisplay)\r\n    heroInfo: HeroInfoDisplay = null;\r\n\r\n    // endregion\r\n\r\n    // region Content中组件及资源引用\r\n\r\n    @property([Sprite])\r\n    currentStarSprites: Sprite[] = [];\r\n    @property([Sprite])\r\n    nextStarSprites: Sprite[] = [];\r\n    @property(Label)\r\n    tipsValue: Label = null;\r\n    @property([SpriteFrame])\r\n    starPictures: SpriteFrame[] = [];\r\n    @property([Node])\r\n    skillPictureNodes: Node[] = [];\r\n    @property([Node])\r\n    skillLevelNodes: Node[] = [];\r\n    @property(Label)\r\n    fragmentLabel: Label = null;\r\n    @property(Node)\r\n    starUpNode: Node = null;\r\n    starUpSprite: Sprite = null;\r\n    starUpButton: Button = null;\r\n    @property([SpriteFrame])\r\n    upgradePictures: SpriteFrame[] = [];\r\n\r\n    // endregion\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    private cultivateController: CultivateWindowController = null;\r\n\r\n    start () {\r\n        this.cultivateController = battleScene().cultivateWindow;\r\n        this.starUpSprite = this.starUpNode.getComponent(Sprite);\r\n        this.starUpButton = this.starUpNode.getComponent(Button);\r\n    }\r\n\r\n    // region 更新控制\r\n\r\n    update (dt) {\r\n        if (this.cultivateController.refreshHero) {\r\n            this.heroInfo.refresh();\r\n            this.updateLabels();\r\n            this.updatePictures();\r\n            this.cultivateController.refreshHero = false;\r\n        }\r\n    }\r\n\r\n    @autoUnitConvert\r\n    updateLabels() {\r\n        let hero = this.cultivateController.currentHero;\r\n        if (!hero) return;\r\n        this.tipsValue.string = hero.star.level * 20 + \"%\";\r\n        const pDiamond = playerMgr().getPlayerData(PlayerMoney).diamond;\r\n        if (hero.star.level == 5) {\r\n            this.fragmentLabel.string = pDiamond.toString() + \"/0\";\r\n            return;\r\n        }\r\n        const diamond = hero.star.costs().diamond.value;\r\n        this.fragmentLabel.string = pDiamond.toString() + \"/\" + diamond.toString();\r\n    }\r\n\r\n    updatePictures() {\r\n        let hero = this.cultivateController.currentHero;\r\n        if (!hero) return;\r\n        this.currentStarSprites.forEach((s, i) => {\r\n            s.spriteFrame = this.starPictures[i < hero.star.level ? 1 : 0];\r\n        });\r\n        this.nextStarSprites.forEach((s, i) => {\r\n            s.spriteFrame = this.starPictures[i < hero.star.level + 1 ? 1 : 0];\r\n        });\r\n        this.skillLevelNodes.forEach((s, i) => {\r\n            s.active = i >= hero.star.level;\r\n        });\r\n        this.skillPictureNodes.forEach((s, i) => {\r\n            s.active = i >= hero.star.level;\r\n        });\r\n\r\n        const cond = hero.star.conditions().judge();\r\n        this.starUpButton.interactable = cond;\r\n        this.starUpSprite.spriteFrame = this.upgradePictures[cond ? 0 : 1];\r\n    }\r\n\r\n    protected onEnable() {\r\n        this.heroInfo.node.active = true;\r\n        this.heroInfo.refresh();\r\n    }\r\n\r\n    // endregion\r\n\r\n    onHeroChange() {\r\n        this.cultivateController.refreshHero = true;\r\n    }\r\n\r\n    // region 按钮点击回调\r\n\r\n    starUpBtn() {\r\n        heroMgr().starUp(this.cultivateController.currentHero).then(res => {\r\n            this.onHeroChange();\r\n            this.heroInfo.playAnimation(\"effectStarUp\");\r\n        });\r\n    }\r\n\r\n    // endregion\r\n\r\n}\r\n","import {dataPK, field, GameData} from \"./BaseData\";\r\nimport {Constructor} from \"../../../Utils/BaseContext\";\r\nimport {dataMgr} from \"../Managers/DataManager\";\r\nimport {DataLoader} from \"../Utils/DataLoader\";\r\n\r\nexport function data<T extends GameData>(name: string): any {\r\n\treturn (clazz: Constructor<T>) => {\r\n\t\tdataMgr().registerData(clazz, name).then();\r\n\t}\r\n}\r\n\r\nexport abstract class StaticData extends GameData {\r\n\r\n\t@field @dataPK\r\n\tpublic id: number = -1;\r\n\t@field(String)\r\n\tpublic displayName: string = null;\r\n\r\n\t/**\r\n\t * 业务主键\r\n\t */\r\n\tpublic get dataId(): number { return this.id }\r\n\r\n\t/**\r\n\t * 多语言键（默认使用类名）\r\n\t */\r\n\tpublic get languageKey(): string {\r\n\t\t// @ts-ignore\r\n\t\treturn dataMgr().getDataName(this.constructor);\r\n\t}\r\n\r\n\t/**\r\n\t * 实际显示名称\r\n\t */\r\n\tpublic getDisplayName() {\r\n\t\treturn this.displayName || `\\\\L[${this.languageKey + this.id}]`;\r\n\t}\r\n\r\n}\r\n","import HeroInfoDisplay from \"../HeroInfoDisplay\";\r\nimport Label = cc.Label;\r\nimport CultivateWindowController from \"../CultivateWindowController\";\r\nimport {battleScene} from \"../../../../../Scenes/BattleScene\";\r\nimport Slider = cc.Slider;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class SummonWindowDisplay extends cc.Component {\r\n\r\n    // region Background中组件及资源引用\r\n\r\n    @property(HeroInfoDisplay)\r\n    heroInfo: HeroInfoDisplay = null;\r\n    @property(Label)\r\n    stablePrice: Label = null;\r\n\r\n    // endregion\r\n\r\n    // region Content中组件及资源引用\r\n\r\n    @property(Label)\r\n    USTDValues: Label[] = [];\r\n    @property(Label)\r\n    USTDBalance: Label = null;\r\n    @property(Label)\r\n    HCTValues: Label[] = [];\r\n    @property(Label)\r\n    HCTBalance: Label = null;\r\n    @property(Label)\r\n    pricePercent: Label = null;\r\n    @property(Slider)\r\n    priceSlider: Slider = null;\r\n\r\n    // endregion\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    private cultivateController: CultivateWindowController = null;\r\n\r\n    start () {\r\n        this.cultivateController = battleScene().cultivateWindow;\r\n    }\r\n\r\n    // region 更新控制\r\n\r\n    update (dt) {\r\n        this.updateLabels();\r\n        this.updatePictures();\r\n    }\r\n\r\n    updateLabels() {\r\n        let percent = this.priceSlider.progress;\r\n        this.USTDValues.forEach(v => v.string = Math.floor(20 * percent).toString());\r\n        this.HCTValues.forEach(v => v.string = Math.floor(400 * percent).toString());\r\n\r\n        this.pricePercent.string = Math.floor(100 * percent) + \"%\";\r\n    }\r\n\r\n    updatePictures() {\r\n\r\n    }\r\n\r\n    protected onEnable() {\r\n        this.heroInfo.node.active = false;\r\n    }\r\n\r\n    // endregion\r\n\r\n    // region 组件点击回调\r\n\r\n    summonBtn() {\r\n\r\n    }\r\n\r\n    // endregion\r\n}\r\n","import {PlayerJob} from \"../Modules/EconomicModule/Data/PlayerJob\";\r\nimport {playerMgr} from \"../Modules/PlayerModule/Managers/PlayerManager\";\r\n\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class TestAutoProfit extends cc.Component {\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    addTime() {\r\n        playerMgr().getPlayerData(PlayerJob).autoProfitTime = 15000 + Math.max(Date.now(), playerMgr().getPlayerData(PlayerJob).autoProfitTime);\r\n    }\r\n\r\n}\r\n","import BattleDisplay from \"../Modules/BattleModule/Components/BattleDisplay\";\r\nimport Prefab = cc.Prefab;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class TestGetHero extends cc.Component {\r\n\r\n\t@property(BattleDisplay)\r\n\tbd: BattleDisplay = null;\r\n\t@property(Prefab)\r\n\thit: Prefab = null;\r\n\t@property(Boolean)\r\n\tshouldUpdate: boolean = false;\r\n\r\n\tpublic getOne(){\r\n\t\tconsole.log(\"One Hero:\", heroMgr().getOneFromServer(\"140\"));\r\n\t}\r\n\r\n\tpublic getList(){\r\n\t\tconsole.log(\"Hero List:\", heroMgr().getListFromServer());\r\n\t}\r\n\r\n\tpublic getCount(){\r\n\t\tconsole.log(\"Hero Count\", heroMgr().getCountFromServer());\r\n\t}\r\n\r\n\tpublic trySynchronize(){\r\n\t\theroMgr().synchronizeAllHeroes().then();\r\n\t}\r\n\r\n\tpublic async testBattle() {\r\n\r\n\t\tawait heroMgr().getOneFromServer(\"99\");\r\n\t\tawait heroMgr().getOneFromServer(\"118\");\r\n\t\tawait heroMgr().getOneFromServer(\"121\");\r\n\r\n\t\tconst battle = await battleMgr().startMainBattle();\r\n\t\tthis.bd.setItem(battle);\r\n\t}\r\n\r\n\tpublic async testCopy() {\r\n\t\tawait heroMgr().getOneFromServer(\"121\");\r\n\t\tconst battle = await battleMgr().startCopy();\r\n\t\tthis.bd.setItem(battle);\r\n\t}\r\n\r\n\tpublic testHit(){\r\n\t\tlet hitNode = cc.instantiate(this.hit);\r\n\t\thitNode.parent = this.node;\r\n\t\thitNode.getComponent(HitDamage).setRange(200, 200);\r\n\t}\r\n\r\n\tprotected update(dt: number) {\r\n\t\t// if (this.shouldUpdate)\r\n\t\t// \tupdateContext(dt);\r\n\t}\r\n\r\n\tpublic testRealBattle() {\r\n\t\theroMgr().getListFromServer().then(res => {\r\n\t\t\tthis.testBattle().then();\r\n\t\t})\r\n\t}\r\n\r\n\tpublic testRefreshRank() {\r\n\t\t// HeroInterface.RefreshAllRank().then(res => console.log(res));\r\n\t\tHeroInterface.EmptyCache().then(res => console.log(res));\r\n\t}\r\n}\r\n\r\nimport {heroMgr} from \"../Modules/HeroModule/Managers/HeroManager\";\r\nimport {battleMgr} from \"../Modules/BattleModule/Managers/BattleManager\";\r\nimport {HeroInterface} from \"../Modules/HeroModule/Common/HeroCommon\";\r\nimport HitDamage from \"../Modules/BattleModule/Components/IndependentController/HitDamage\";\r\n","import {BaseData, field} from \"../Modules/CoreModule/Data/BaseData\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class TestHeroItem extends BaseData {\r\n\r\n    @field\r\n    name: string = null;\r\n    @field\r\n    atk: number = 0;\r\n    @field\r\n    def: number = 0;\r\n    @field\r\n    mhp: number = 0;\r\n    @field\r\n    level: number = 1;\r\n\r\n    @field\r\n    quality: number = 0;\r\n    @field\r\n    stars: number = 1;\r\n    @field\r\n    scissorsType: number = 0;\r\n\r\n    getRealUpgrade(): number {\r\n        return this.level * 1000 + 2500;\r\n    }\r\n\r\n    getRealAttack(): number {\r\n        return this.atk * this.level;\r\n    }\r\n\r\n    getRealDefense(): number {\r\n        return this.def * this.level;\r\n    }\r\n\r\n    getRealHealth(): number {\r\n        return this.mhp * this.level;\r\n    }\r\n\r\n\r\n    public static testData(): TestHeroItem {\r\n        let res = new TestHeroItem();\r\n        res.name = \"Little Y\";\r\n        res.atk = 400;\r\n        res.def = 120;\r\n        res.mhp = 15000;\r\n        res.quality = Math.floor(Math.random() * 4);\r\n        res.stars = Math.floor(Math.random() * 6);\r\n        res.scissorsType = Math.floor(Math.random() * 3);\r\n        return res;\r\n    }\r\n\r\n}\r\n","import {BasePlatform, platform} from \"./BasePlatform\";\r\nimport {Platform} from \"../Modules/CoreModule/Managers/PlatformManager\";\r\nimport {MathUtils} from \"../Utils/MathUtils\";\r\n\r\nconst OpenidKey = \"openid\";\r\n\r\n@platform('test')\r\nexport class TestPlatform extends BasePlatform {\r\n\r\n\tpublic constructor(type: Platform) {\r\n\t\tsuper(type);\r\n\t}\r\n\r\n\t// region 用户信息\r\n\r\n\t/**\r\n\t * 获取Openid\r\n\t */\r\n\tpublic async getOpenid() : Promise<string> {\r\n\t\tlet openid = cc.sys.localStorage.getItem(OpenidKey);\r\n\t\tif (!openid) {\r\n\t\t\topenid = \"test_\" + MathUtils.randomString()\r\n\t\t\tcc.sys.localStorage.setItem(OpenidKey, openid);\r\n\t\t}\r\n\t\treturn openid;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取用户信息\r\n\t */\r\n\tpublic async getUserInfo() : Promise<any> {\r\n\t\treturn {}; // 空对象\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\t// region 广告\r\n\r\n\t// initAds() {}\r\n\r\n\tprotected async doShowAds() : Promise<boolean> {\r\n\t\tif (!await super.doShowAds()) return false;\r\n\r\n\t\treturn await new Promise((resolve) => {\r\n\t\t\talert(\"当前平台为浏览器，假装这是广告窗口。关闭后过2秒就当作看完了广告\");\r\n\t\t\t// 假设2s后看完了广告\r\n\t\t\tsetTimeout(() => resolve(true), 2000);\r\n\t\t});\r\n\t}\r\n\r\n\t// endregion\r\n\r\n}\r\n","import Skeleton = sp.Skeleton;\r\nimport {SpineUtils} from \"../Utils/SpineUtils\";\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport Texture2D = cc.Texture2D;\r\nimport {partRepo} from \"../Modules/HeroModule/Data/Part\";\r\nimport {partTypeRepo} from \"../Modules/HeroModule/Data/PartType\";\r\nimport {heroTypeRepo} from \"../Modules/HeroModule/Data/HeroType\";\r\nimport EditBox = cc.EditBox;\r\nimport {EditorInterface} from \"../Modules/HeroModule/Common/EditorCommon\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class TestSpine extends cc.Component {\r\n\r\n\t@property(Skeleton)\r\n\tsk: Skeleton = null;\r\n\t@property(SpriteFrame)\r\n\tpic1: SpriteFrame = null;\r\n\t@property(SpriteFrame)\r\n\tpic2: SpriteFrame = null;\r\n\r\n\t@property(EditBox)\r\n\tsource: EditBox = null;\r\n\t@property(EditBox)\r\n\tout: EditBox = null;\r\n\r\n\tstart () {\r\n\t\t// this.sk.setAnimation(0, \"stand\", true);\r\n\t\t// this.node.on(\"touchstart\", this.onTouchStart, this);\r\n\t}\r\n\r\n\t// region Import\r\n\r\n\tpublic import() {\r\n\t\tEditorInterface.ImportParts({\r\n\t\t\tsource: this.source.string,\r\n\t\t\tout: this.out.string,\r\n\t\t\tdoImport: true\r\n\t\t})\r\n\t}\r\n\r\n\t// endregion\r\n\r\n\tonTouchStart(e) {\r\n\t\tconst skPos = this.sk.node.getPosition();\r\n\t\tconst touch: cc.Touch = e.currentTouch;\r\n\t\tconst loc = touch.getLocation().clone();\r\n\t\tconst dt = loc.sub(skPos);\r\n\r\n\t\tconsole.log(\"Delta\", e, dt.x, dt.y, this.sk, cc);\r\n\r\n\t\tconst sk: sp.spine.Skeleton = this.sk[\"_skeleton\"];\r\n\r\n\t\t// const tSlot = sk.findSlot(\"hand_1\");\r\n\t\t// // @ts-ignore\r\n\t\t// const tLoc = tSlot.bone.worldToLocal({x: dt.x, y: dt.y});\r\n\t\t// console.log(\"tLoc\", tLoc, tLoc.x, tLoc.y);\r\n\t\t// const tAttach = tSlot.getAttachment() as sp.spine.RegionAttachment;\r\n\t\t// console.log(\"tAttach\", tAttach, tAttach.x, tAttach.y, tAttach.width, tAttach.height);\r\n\t\t// const tALoc = {x: tLoc.x - tAttach.x, y: tLoc.y - tAttach.y};\r\n\t\t// const dist = Math.sqrt(tALoc.x * tALoc.x + tALoc.y * tALoc.y);\r\n\t\t// const ang = Math.atan(tALoc.y / tALoc.x) / Math.PI * 180;\r\n\t\t// const newAng = ang - tAttach.rotation;\r\n\t\t// const newRad = newAng / 180 * Math.PI;\r\n\t\t// const tNewLoc = {\r\n\t\t// \tx: dist * Math.cos(newRad), y: dist * Math.sin(newRad)\r\n\t\t// };\r\n\t\t// console.log(\"tNewLoc\", tNewLoc);\r\n\r\n\t\tsk.slots.forEach((slot, i) => {\r\n\t\t\t// @ts-ignore\r\n\t\t\tconst lLoc = slot.bone.worldToLocal({x: dt.x, y: dt.y});\r\n\t\t\tconst attach = slot.getAttachment() as sp.spine.RegionAttachment;\r\n\t\t\tif (!attach) return;\r\n\r\n\t\t\tconst aLoc = {x: lLoc.x - attach.x, y: lLoc.y - attach.y};\r\n\r\n\t\t\t// const newLoc = lLoc;\r\n\r\n\t\t\t// 当前点与当前坐标系的夹角\r\n\t\t\tconst dist = Math.sqrt(aLoc.x * aLoc.x + aLoc.y * aLoc.y);\r\n\t\t\tconst ang = Math.atan(aLoc.y / aLoc.x) / Math.PI * 180;\r\n\t\t\tconst newAng = ang - attach.rotation;\r\n\t\t\tconst newRad = newAng / 180 * Math.PI;\r\n\t\t\tconst newLoc = {\r\n\t\t\t\tx: dist * Math.cos(newRad), y: dist * Math.sin(newRad)\r\n\t\t\t};\r\n\r\n\t\t\t// console.log(\"Slot1\", slot.data.name, newLoc);\r\n\t\t\t// console.log(\"Slot2\", slot.data.name, attach.x, attach.y, attach.width, attach.height);\r\n\r\n\t\t\tif (newLoc.x >= -attach.width / 2 && newLoc.x <= attach.width / 2\r\n\t\t\t\t&& newLoc.y >= -attach.height / 2 && newLoc.y <= attach.height / 2)\r\n\t\t\t\tslot.color.a = 0.5;\r\n\t\t\telse\r\n\t\t\t\tslot.color.a = 1;\r\n\r\n\t\t\t// if (newLoc.x >= attach.x && newLoc.x <= newLoc.x + attach.width\r\n\t\t\t// \t&& newLoc.y >= attach.y && newLoc.y <= newLoc.y + attach.height) {\r\n\t\t\t// \tslot.color.a = 0.5;\r\n\t\t\t// } else\r\n\t\t\t// \tslot.color.a = 1;\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tpublic color1() {\r\n\t\tconsole.log(1);\r\n\t\tthis.sk.findSlot(\"head_1\").getAttachment()[\"setRegion\"](this.CreateRegion(this.pic1.getTexture()));\r\n\t}\r\n\r\n\tpublic color2() {\r\n\t\tconsole.log(2);\r\n\t\tthis.sk.findSlot(\"head_1\").getAttachment()[\"setRegion\"](this.CreateRegion(this.pic2.getTexture()));\r\n\t}\r\n\r\n\tCreateRegion(texture: Texture2D) {\r\n\t\tlet skeletonTexture = new sp[\"SkeletonTexture\"]();\r\n\t\tskeletonTexture.setRealTexture(texture);\r\n\t\tlet page = new sp.spine.TextureAtlasPage();\r\n\t\tpage.name = texture.name;\r\n\t\tpage.uWrap = sp.spine.TextureWrap.ClampToEdge;\r\n\t\tpage.vWrap = sp.spine.TextureWrap.ClampToEdge;\r\n\t\tpage.texture = skeletonTexture;\r\n\t\tpage.texture.setWraps(page.uWrap, page.vWrap);\r\n\t\tpage.width = texture.width;\r\n\t\tpage.height = texture.height;\r\n\r\n\t\tlet region = new sp.spine.TextureAtlasRegion();\r\n\t\tregion.page = page;\r\n\t\tregion.width = texture.width;\r\n\t\tregion.height = texture.height;\r\n\t\tregion.originalWidth = texture.width;\r\n\t\tregion.originalHeight = texture.height;\r\n\r\n\t\tregion.rotate = false;\r\n\t\tregion.u = 0;\r\n\t\tregion.v = 0;\r\n\t\tregion.u2 = 1;\r\n\t\tregion.v2 = 1;\r\n\t\tregion.texture = skeletonTexture;\r\n\t\treturn region;\r\n\t}\r\n}\r\n","import {BaseData, field} from \"../../CoreModule/Data/BaseData\";\r\n\r\nexport enum TraitType {\r\n\tNone = \"None\",\r\n\tBonusParam = \"BonusParam\", // 属性附加：pid 属性ID, rate 百分比\r\n}\r\n\r\nclass LevelSetting extends BaseData {\r\n\t@field(Number)\r\n\tpublic idx: number = 0;\r\n\t@field(Number)\r\n\tpublic value: number = 0;\r\n\t@field(String)\r\n\tpublic method: \"add\" | \"mult\" = \"add\";\r\n}\r\n\r\nexport class Trait extends BaseData {\r\n\r\n\t@field(String)\r\n\tpublic type: TraitType = TraitType.None;\r\n\t@field([Object])\r\n\tpublic params: any[] = [];\r\n\t@field([LevelSetting])\r\n\tpublic levelSettings: LevelSetting[] = [];\r\n\r\n\t/**\r\n\t * 创建\r\n\t */\r\n\tpublic static create(type: TraitType, params: any[]) {\r\n\t\tconst res = new Trait();\r\n\t\tres.type = type;\r\n\t\tres.params = params;\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * 应用等级\r\n\t */\r\n\tpublic applyLevel(level) {\r\n\t\tconst params = this.params.slice();\r\n\t\tthis.levelSettings.forEach(ls => {\r\n\t\t\tswitch (ls.method) {\r\n\t\t\t\tcase \"add\": params[ls.idx] += ls.value * level; break;\r\n\t\t\t\tcase \"mult\": params[ls.idx] *= ls.value * level; break;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn Trait.create(this.type, params);\r\n\t}\r\n\r\n}\r\n\r\nexport class TraitGroup {\r\n\r\n\tpublic traits: Trait[] = [];\r\n\r\n\tconstructor(...traits: Trait[]) {\r\n\t\tthis.traits = traits;\r\n\t}\r\n\r\n\tpublic add(...traits: Trait[]) {\r\n\t\tthis.traits.push(...traits);\r\n\t}\r\n\r\n\tpublic filter(type: TraitType, idx?, val?) {\r\n\t\treturn new TraitGroup(...this.traits.filter(\r\n\t\t\tt => t.type == type && (!idx || t.params[idx] == val)));\r\n\t}\r\n\tpublic sum(idx, default_ = 0) {\r\n\t\treturn this.traits.reduce((res, t) =>\r\n\t\t\tres + t.params[idx], default_);\r\n\t}\r\n\tpublic prod(idx, default_ = 1) {\r\n\t\treturn this.traits.reduce((res, t) =>\r\n\t\t\tres * t.params[idx], default_);\r\n\t}\r\n}\r\n","const { ccclass, property } = cc._decorator;\r\n\r\n/**\r\n * TransformUtil\r\n * 变换工具类\r\n * @ author: SlowFeather\r\n * @ wechat: BackedByTheWT\r\n * @ data: 2020-07-14 13:44\r\n */\r\nexport default class TransformUtil {\r\n\r\n\t/**\r\n\t * 拿到世界坐标\r\n\t *\r\n\t * @static\r\n\t * @param {cc.Node} node\r\n\t * @returns {cc.Vec2}\r\n\t * @memberof TransformUtil\r\n\t */\r\n\tpublic static getWorldPosition2(node: cc.Node): cc.Vec2 {\r\n\t\tif (node.parent == null) return node.getPosition()\r\n\t\treturn node.parent.convertToWorldSpaceAR(node.getPosition())\r\n\t}\r\n\r\n\t/**\r\n\t * 拿到世界坐标\r\n\t *\r\n\t * @static\r\n\t * @param {cc.Node} node\r\n\t * @returns {cc.Vec3}\r\n\t * @memberof TransformUtil\r\n\t */\r\n\tpublic static getWorldPosition3(node: cc.Node): cc.Vec3 {\r\n\t\tif (node.parent == null) return node.position\r\n\t\treturn node.parent.convertToWorldSpaceAR(node.position)\r\n\t}\r\n\r\n\t/**\r\n\t * 将世界坐标转换为当前node的坐标\r\n\t *\r\n\t * @static\r\n\t * @param {cc.Node} node 当前的node\r\n\t * @param {cc.Vec2} worldPos 世界坐标\r\n\t * @returns {cc.Vec2}\r\n\t * @memberof TransformUtil\r\n\t */\r\n\tpublic static getNodePosition2(node: cc.Node, worldPos: cc.Vec2): cc.Vec2 {\r\n\t\tif (node.parent == null) return worldPos;\r\n\t\treturn node.parent.convertToNodeSpaceAR(worldPos)\r\n\t}\r\n\r\n}\r\n","\r\n/**\r\n * 获取/创建元数据\r\n */\r\nexport function getMetaData<T>(type, key, default_?: T): T {\r\n\tlet res = type[key] ||= default_;\r\n\tif (res?.type != type) {\r\n\t\tconst keys = res ? Object.keys(res) : [];\r\n\t\ttype[key] = keys.reduce((_res, key) => {\r\n\t\t\tconst val = res[key];\r\n\t\t\tif (val instanceof Array)\r\n\t\t\t\t_res[key] = val.slice(0); // 复制数组\r\n\t\t\telse if (typeof val == \"object\")\r\n\t\t\t\t_res[key] = Object.assign({}, val); // 复制对象（浅复制）\r\n\t\t\telse\r\n\t\t\t\t_res[key] = val;\r\n\t\t\treturn _res;\r\n\t\t}, {});\r\n\t\ttype[key].type = type\r\n\t}\r\n\treturn type[key];\r\n}\r\n","import Label = cc.Label;\r\nimport Sprite = cc.Sprite;\r\nimport SpriteFrame = cc.SpriteFrame;\r\nimport CultivateWindowController from \"../CultivateWindowController\";\r\nimport Node = cc.Node;\r\nimport Button = cc.Button;\r\nimport {playerMgr} from \"../../../../PlayerModule/Managers/PlayerManager\";\r\nimport {PlayerMoney} from \"../../../../EconomicModule/Data/PlayerMoney\";\r\nimport {autoUnitConvert} from \"../../../../../Utils/NumberUtils\";\r\nimport HeroInfoDisplay from \"../HeroInfoDisplay\";\r\nimport {heroMgr} from \"../../../../HeroModule/Managers/HeroManager\";\r\nimport {battleScene} from \"../../../../../Scenes/BattleScene\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class UpgradeWindowDisplay extends cc.Component {\r\n\r\n    // region Background中组件及资源引用\r\n\r\n    @property(HeroInfoDisplay)\r\n    heroInfo: HeroInfoDisplay = null;\r\n\r\n    @property([Sprite])\r\n    contentSelectCards: Sprite[] = [];\r\n    @property([SpriteFrame])\r\n    selectCardsPictures: SpriteFrame[] = [];\r\n\r\n    // endregion\r\n\r\n    // region Content中组件及资源引用\r\n\r\n    @property(Node)\r\n    heroProperty: Node = null;\r\n    @property(Node)\r\n    heroGrow: Node = null;\r\n    @property(Node)\r\n    skillsNode: Node = null;\r\n    @property(Label)\r\n    attackLabel: Label = null;\r\n    @property(Label)\r\n    defenceLabel: Label = null;\r\n    @property(Label)\r\n    healthLabel: Label = null;\r\n    @property(Label)\r\n    atkSpeedLabel: Label = null;\r\n    @property(Label)\r\n    criticalLabel: Label = null;\r\n    @property(Label)\r\n    evasionLabel: Label = null;\r\n    @property([Label])\r\n    skillNames: Label[] = [];\r\n    @property([Label])\r\n    skillLevels: Label[] = [];\r\n    @property([Label])\r\n    skillDescriptions: Label[] = [];\r\n    @property(Label)\r\n    medalLabel: Label = null;\r\n    @property(Node)\r\n    upgradeNode: Node = null;\r\n    upgradeSprite: Sprite = null;\r\n    upgradeButton: Button = null;\r\n    @property([SpriteFrame])\r\n    upgradePictures: SpriteFrame[] = [];\r\n\r\n    // endregion\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    private cultivateController: CultivateWindowController = null;\r\n\r\n    start () {\r\n        this.cultivateController = battleScene().cultivateWindow;\r\n        this.upgradeSprite = this.upgradeNode.getComponent(Sprite);\r\n        this.upgradeButton = this.upgradeNode.getComponent(Button);\r\n    }\r\n\r\n    // region 更新控制\r\n\r\n    update (dt) {\r\n        if (this.cultivateController.refreshHero) {\r\n            this.heroInfo.refresh();\r\n            this.updateLabels();\r\n            this.updatePictures();\r\n            this.cultivateController.refreshHero = false;\r\n        }\r\n    }\r\n\r\n    @autoUnitConvert\r\n    updateLabels() {\r\n        let hero = this.cultivateController.currentHero;\r\n        if (!hero) return;\r\n        this.attackLabel.string = hero.atk.toString();\r\n        this.defenceLabel.string = hero.def.toString();\r\n        this.healthLabel.string = hero.mhp.toString();\r\n        this.atkSpeedLabel.string = hero.spd.toString();\r\n        this.criticalLabel.string = hero.cri.toString();\r\n        this.evasionLabel.string = hero.eva.toString();\r\n\r\n        // this.skillNames.forEach((l, i) => { l.string = \"Skill\" + i; })\r\n        // this.skillDescriptions.forEach((l, i) => { l.string = \"Description\" + i; })\r\n        this.skillLevels.forEach(l => { l.string = \"Lv.\" + hero.star.level; })\r\n\r\n        this.medalLabel.string = playerMgr().getPlayerData(PlayerMoney).medal.toString();\r\n    }\r\n\r\n    updatePictures() {\r\n        let hero = this.cultivateController.currentHero;\r\n        if (!hero) return;\r\n\r\n        const cond = hero.strengthen.conditions().judge();\r\n        this.upgradeButton.interactable = cond;\r\n        this.upgradeSprite.spriteFrame = this.upgradePictures[cond ? 0 : 1];\r\n    }\r\n\r\n    protected onEnable() {\r\n        this.showHeroProperty();\r\n        this.heroInfo.node.active = true;\r\n        this.heroInfo.refresh();\r\n    }\r\n\r\n    // endregion\r\n\r\n    onHeroChange() {\r\n        this.cultivateController.refreshHero = true;\r\n    }\r\n\r\n    // region 选项卡及按钮点击回调\r\n\r\n    showHeroProperty() {\r\n        this.contentSelectCards[0].spriteFrame = this.selectCardsPictures[1];\r\n        this.contentSelectCards[1].spriteFrame = this.selectCardsPictures[0];\r\n        this.contentSelectCards[1].node.parent = this.node;\r\n        this.contentSelectCards[0].node.parent = this.contentSelectCards[1].node;\r\n        this.contentSelectCards[0].node.x = -150; this.contentSelectCards[0].node.y = 0;\r\n        this.contentSelectCards[1].node.x = -60; this.contentSelectCards[1].node.y = -195;\r\n        this.heroGrow.active = false;\r\n        this.skillsNode.y = 170;\r\n    }\r\n\r\n    showHeroGrow() {\r\n        this.contentSelectCards[0].spriteFrame = this.selectCardsPictures[0];\r\n        this.contentSelectCards[1].spriteFrame = this.selectCardsPictures[1];\r\n        this.contentSelectCards[0].node.parent = this.node;\r\n        this.contentSelectCards[1].node.parent = this.contentSelectCards[0].node;\r\n        this.contentSelectCards[0].node.x = -210; this.contentSelectCards[0].node.y = -195;\r\n        this.contentSelectCards[1].node.x = 150; this.contentSelectCards[1].node.y = 0;\r\n        this.heroGrow.active = true;\r\n        this.skillsNode.y = 140;\r\n    }\r\n\r\n    upgradeBtn() {\r\n        heroMgr().strengthen(this.cultivateController.currentHero).then(res => {\r\n            this.onHeroChange();\r\n            this.heroInfo.playAnimation(\"effectUpgrade\");\r\n        });\r\n    }\r\n\r\n    // endregion\r\n\r\n}\r\n","/****************************************************************************\r\n Copyright (c) 2013-2016 Chukong Technologies Inc.\r\n Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated engine source code (the \"Software\"), a limited,\r\n  worldwide, royalty-free, non-assignable, revocable and non-exclusive license\r\n to use Cocos Creator solely to develop games on your target platforms. You shall\r\n  not use Cocos Creator software for developing other software or tools that's\r\n  used for developing games. You are not granted to publish, distribute,\r\n  sublicense, and/or sell copies of Cocos Creator.\r\n\r\n The software or tools in this License Agreement are licensed, not sold.\r\n Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n ****************************************************************************/\r\nimport ValueType = cc.ValueType;\r\nimport misc = cc.misc;\r\nimport Mat4 = cc.Mat4;\r\nimport EPSILON = cc.EPSILON;\r\n\r\nlet _x: number = 0.0;\r\nlet _y: number = 0.0;\r\n\r\nexport interface IVec1Like {\r\n\tx: number;\r\n}\r\n\r\n/**\r\n * !#en Representation of 1D vectors and points.\r\n * !#zh 表示 1D 向量和坐标\r\n *\r\n * @class Vec1\r\n * @extends ValueType\r\n */\r\nexport class Vec1 extends ValueType {\r\n\t// deprecated\r\n\tstatic sub   = Vec1.subtract;\r\n\tstatic mul   = Vec1.multiply;\r\n\tstatic scale = Vec1.multiplyScalar;\r\n\tstatic mag   = Vec1.len;\r\n\tstatic squaredMagnitude = Vec1.lengthSqr;\r\n\tstatic div = Vec1.divide;\r\n\t/**\r\n\t * !#en Returns the length of this vector.\r\n\t * !#zh 返回该向量的长度。\r\n\t * @method mag\r\n\t * @return {number} the result\r\n\t * @example\r\n\t * var v = cc.v2(10, 10);\r\n\t * v.mag(); // return 14.142135623730951;\r\n\t */\r\n\tmag  = Vec1.prototype.len;\r\n\t/**\r\n\t * !#en Returns the squared length of this vector.\r\n\t * !#zh 返回该向量的长度平方。\r\n\t * @method magSqr\r\n\t * @return {number} the result\r\n\t * @example\r\n\t * var v = cc.v2(10, 10);\r\n\t * v.magSqr(); // return 200;\r\n\t */\r\n\tmagSqr = Vec1.prototype.lengthSqr;\r\n\t/**\r\n\t * !#en Subtracts one vector from this. If you want to save result to another vector, use sub() instead.\r\n\t * !#zh 向量减法。如果你想保存结果到另一个向量，可使用 sub() 代替。\r\n\t * @method subSelf\r\n\t * @param {Vec1} vector\r\n\t * @return {Vec1} returns this\r\n\t * @chainable\r\n\t * @example\r\n\t * var v = cc.v2(10, 10);\r\n\t * v.subSelf(cc.v2(5, 5));// return Vec1 {x: 5, y: 5};\r\n\t */\r\n\tsubSelf  = Vec1.prototype.subtract;\r\n\t/**\r\n\t * !#en Subtracts one vector from this, and returns the new result.\r\n\t * !#zh 向量减法，并返回新结果。\r\n\t * @method sub\r\n\t * @param {Vec1} vector\r\n\t * @param {Vec1} [out] - optional, the receiving vector, you can pass the same Vec1 to save result to itself, if not provided, a new Vec1 will be created\r\n\t * @return {Vec1} the result\r\n\t * @example\r\n\t * var v = cc.v2(10, 10);\r\n\t * v.sub(cc.v2(5, 5));      // return Vec1 {x: 5, y: 5};\r\n\t * var v1 = new Vec1;\r\n\t * v.sub(cc.v2(5, 5), v1);  // return Vec1 {x: 5, y: 5};\r\n\t */\r\n\tsub (vector: Vec1, out?: Vec1): Vec1 {\r\n\t\treturn Vec1.subtract(out || new Vec1(), this, vector);\r\n\t}\r\n\t/**\r\n\t * !#en Multiplies this by a number. If you want to save result to another vector, use mul() instead.\r\n\t * !#zh 缩放当前向量。如果你想结果保存到另一个向量，可使用 mul() 代替。\r\n\t * @method mulSelf\r\n\t * @param {number} num\r\n\t * @return {Vec1} returns this\r\n\t * @chainable\r\n\t * @example\r\n\t * var v = cc.v2(10, 10);\r\n\t * v.mulSelf(5);// return Vec1 {x: 50, y: 50};\r\n\t */\r\n\tmulSelf  = Vec1.prototype.multiplyScalar;\r\n\t/**\r\n\t * !#en Multiplies by a number, and returns the new result.\r\n\t * !#zh 缩放向量，并返回新结果。\r\n\t * @method mul\r\n\t * @param {number} num\r\n\t * @param {Vec1} [out] - optional, the receiving vector, you can pass the same Vec1 to save result to itself, if not provided, a new Vec1 will be created\r\n\t * @return {Vec1} the result\r\n\t * @example\r\n\t * var v = cc.v2(10, 10);\r\n\t * v.mul(5);      // return Vec1 {x: 50, y: 50};\r\n\t * var v1 = new Vec1;\r\n\t * v.mul(5, v1);  // return Vec1 {x: 50, y: 50};\r\n\t */\r\n\tmul (num: number, out?: Vec1): Vec1 {\r\n\t\treturn Vec1.multiplyScalar(out || new Vec1(), this, num);\r\n\t}\r\n\t/**\r\n\t * !#en Divides by a number. If you want to save result to another vector, use div() instead.\r\n\t * !#zh 向量除法。如果你想结果保存到另一个向量，可使用 div() 代替。\r\n\t * @method divSelf\r\n\t * @param {number} num\r\n\t * @return {Vec1} returns this\r\n\t * @chainable\r\n\t * @example\r\n\t * var v = cc.v2(10, 10);\r\n\t * v.divSelf(5); // return Vec1 {x: 2, y: 2};\r\n\t */\r\n\tdivSelf  = Vec1.prototype.divide;\r\n\t/**\r\n\t * !#en Divides by a number, and returns the new result.\r\n\t * !#zh 向量除法，并返回新的结果。\r\n\t * @method div\r\n\t * @param {number} num\r\n\t * @param {Vec1} [out] - optional, the receiving vector, you can pass the same Vec1 to save result to itself, if not provided, a new Vec1 will be created\r\n\t * @return {Vec1} the result\r\n\t * @example\r\n\t * var v = cc.v2(10, 10);\r\n\t * v.div(5);      // return Vec1 {x: 2, y: 2};\r\n\t * var v1 = new Vec1;\r\n\t * v.div(5, v1);  // return Vec1 {x: 2, y: 2};\r\n\t */\r\n\tdiv (num: number, out?: Vec1): Vec1 {\r\n\t\treturn Vec1.multiplyScalar(out || new Vec1(), this, 1/num);\r\n\t}\r\n\t/**\r\n\t * !#en Multiplies two vectors.\r\n\t * !#zh 分量相乘。\r\n\t * @method scaleSelf\r\n\t * @param {Vec1} vector\r\n\t * @return {Vec1} returns this\r\n\t * @chainable\r\n\t * @example\r\n\t * var v = cc.v2(10, 10);\r\n\t * v.scaleSelf(cc.v2(5, 5));// return Vec1 {x: 50, y: 50};\r\n\t */\r\n\tscaleSelf = Vec1.prototype.multiply;\r\n\t/**\r\n\t * !#en Multiplies two vectors, and returns the new result.\r\n\t * !#zh 分量相乘，并返回新的结果。\r\n\t * @method scale\r\n\t * @param {Vec1} vector\r\n\t * @param {Vec1} [out] - optional, the receiving vector, you can pass the same Vec1 to save result to itself, if not provided, a new Vec1 will be created\r\n\t * @return {Vec1} the result\r\n\t * @example\r\n\t * var v = cc.v2(10, 10);\r\n\t * v.scale(cc.v2(5, 5));      // return Vec1 {x: 50, y: 50};\r\n\t * var v1 = new Vec1;\r\n\t * v.scale(cc.v2(5, 5), v1);  // return Vec1 {x: 50, y: 50};\r\n\t */\r\n\tscale (vector: Vec1, out?: Vec1): Vec1 {\r\n\t\treturn Vec1.multiply(out || new Vec1(), this, vector);\r\n\t}\r\n\t/**\r\n\t * !#en Negates the components. If you want to save result to another vector, use neg() instead.\r\n\t * !#zh 向量取反。如果你想结果保存到另一个向量，可使用 neg() 代替。\r\n\t * @method negSelf\r\n\t * @return {Vec1} returns this\r\n\t * @chainable\r\n\t * @example\r\n\t * var v = cc.v2(10, 10);\r\n\t * v.negSelf(); // return Vec1 {x: -10, y: -10};\r\n\t */\r\n\tnegSelf = Vec1.prototype.negate;\r\n\t/**\r\n\t * !#en Negates the components, and returns the new result.\r\n\t * !#zh 返回取反后的新向量。\r\n\t * @method neg\r\n\t * @param {Vec1} [out] - optional, the receiving vector, you can pass the same Vec1 to save result to itself, if not provided, a new Vec1 will be created\r\n\t * @return {Vec1} the result\r\n\t * @example\r\n\t * var v = cc.v2(10, 10);\r\n\t * var v1 = new Vec1;\r\n\t * v.neg(v1);  // return Vec1 {x: -10, y: -10};\r\n\t */\r\n\tneg (out?: Vec1): Vec1 {\r\n\t\treturn Vec1.negate(out || new Vec1(), this);\r\n\t}\r\n\r\n\t/**\r\n\t * !#en return a Vec1 object with x = 1 and y = 1.\r\n\t * !#zh 新 Vec1 对象。\r\n\t * @property ONE\r\n\t * @type Vec1\r\n\t * @static\r\n\t */\r\n\tstatic get ONE () { return new Vec1(1) };\r\n\tstatic readonly ONE_R = Vec1.ONE;\r\n\r\n\t/**\r\n\t * !#en return a Vec1 object with x = 0 and y = 0.\r\n\t * !#zh 返回 x = 0 和 y = 0 的 Vec1 对象。\r\n\t * @property {Vec1} ZERO\r\n\t * @static\r\n\t */\r\n\tstatic get ZERO () { return new Vec1(0) };\r\n\t/**\r\n\t * !#en return a readonly Vec1 object with x = 0 and y = 0.\r\n\t * !#zh 返回一个 x = 0 和 y = 0 的 Vec1 只读对象。\r\n\t * @property {Vec1} ZERO_R\r\n\t * @readonly\r\n\t * @static\r\n\t */\r\n\tstatic readonly ZERO_R = Vec1.ZERO;\r\n\r\n\t/**\r\n\t * !#en return a readonly Vec1 object with x = 1 and y = 0.\r\n\t * !#zh 返回 x = 1 和 y = 0 的 Vec1 只读对象。\r\n\t * @property {Vec1} RIGHT\r\n\t * @static\r\n\t */\r\n\tstatic get RIGHT () { return new Vec1(1) };\r\n\t/**\r\n\t * !#en return a Vec1 object with x = 1 and y = 0.\r\n\t * !#zh 返回 x = 1 和 y = 0 的 Vec1 对象。\r\n\t * @property {Vec1} RIGHT_R\r\n\t * @static\r\n\t * @readonly\r\n\t */\r\n\tstatic readonly RIGHT_R = Vec1.RIGHT;\r\n\r\n\t/**\r\n\t * !#zh 获得指定向量的拷贝\r\n\t * @method clone\r\n\t * @typescript\r\n\t * clone <Out extends IVec1Like> (a: Out): Vec1\r\n\t * @static\r\n\t */\r\n\tstatic clone <Out extends IVec1Like> (a: Out) {\r\n\t\treturn new Vec1(a.x);\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 复制指定向量的值\r\n\t * @method copy\r\n\t * @typescript\r\n\t * copy <Out extends IVec1Like> (out: Out, a: Out): Out\r\n\t * @static\r\n\t */\r\n\tstatic copy <Out extends IVec1Like> (out: Out, a: Out) {\r\n\t\tout.x = a.x;\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh  设置向量值\r\n\t * @method set\r\n\t * @typescript\r\n\t * set <Out extends IVec1Like> (out: Out, x: number, y: number): Out\r\n\t * @static\r\n\t */\r\n\tstatic set <Out extends IVec1Like> (out: Out, x: number, y: number) {\r\n\t\tout.x = x;\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 逐元素向量加法\r\n\t * @method add\r\n\t * @typescript\r\n\t * add <Out extends IVec1Like> (out: Out, a: Out, b: Out): Out\r\n\t * @static\r\n\t */\r\n\tstatic add <Out extends IVec1Like> (out: Out, a: Out, b: Out) {\r\n\t\tout.x = a.x + b.x;\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 逐元素向量减法\r\n\t * @method subtract\r\n\t * @typescript\r\n\t * subtract <Out extends IVec1Like> (out: Out, a: Out, b: Out): Out\r\n\t * @static\r\n\t */\r\n\tstatic subtract <Out extends IVec1Like> (out: Out, a: Out, b: Out) {\r\n\t\tout.x = a.x - b.x;\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 逐元素向量乘法\r\n\t * @method multiply\r\n\t * @typescript\r\n\t * multiply <Out extends IVec1Like> (out: Out, a: Out, b: Out): Out\r\n\t * @static\r\n\t */\r\n\tstatic multiply <Out extends IVec1Like> (out: Out, a: Out, b: Out) {\r\n\t\tout.x = a.x * b.x;\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 逐元素向量除法\r\n\t * @method divide\r\n\t * @typescript\r\n\t * divide <Out extends IVec1Like> (out: Out, a: Out, b: Out): Out\r\n\t * @static\r\n\t */\r\n\tstatic divide <Out extends IVec1Like> (out: Out, a: Out, b: Out) {\r\n\t\tout.x = a.x / b.x;\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 逐元素向量向上取整\r\n\t * @method ceil\r\n\t * @typescript\r\n\t * ceil <Out extends IVec1Like> (out: Out, a: Out): Out\r\n\t * @static\r\n\t */\r\n\tstatic ceil <Out extends IVec1Like> (out: Out, a: Out) {\r\n\t\tout.x = Math.ceil(a.x);\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 逐元素向量向下取整\r\n\t * @method floor\r\n\t * @typescript\r\n\t * floor <Out extends IVec1Like> (out: Out, a: Out): Out\r\n\t * @static\r\n\t */\r\n\tstatic floor <Out extends IVec1Like> (out: Out, a: Out) {\r\n\t\tout.x = Math.floor(a.x);\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 逐元素向量最小值\r\n\t * @method min\r\n\t * @typescript\r\n\t * min <Out extends IVec1Like> (out: Out, a: Out, b: Out): Out\r\n\t * @static\r\n\t */\r\n\tstatic min <Out extends IVec1Like> (out: Out, a: Out, b: Out) {\r\n\t\tout.x = Math.min(a.x, b.x);\r\n\t\treturn out;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * !#zh 逐元素向量最大值\r\n\t * @method max\r\n\t * @typescript\r\n\t * max <Out extends IVec1Like> (out: Out, a: Out, b: Out): Out\r\n\t * @static\r\n\t */\r\n\tstatic max <Out extends IVec1Like> (out: Out, a: Out, b: Out) {\r\n\t\tout.x = Math.max(a.x, b.x);\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 逐元素向量四舍五入取整\r\n\t * @method round\r\n\t * @typescript\r\n\t * round <Out extends IVec1Like> (out: Out, a: Out): Out\r\n\t * @static\r\n\t */\r\n\tstatic round <Out extends IVec1Like> (out: Out, a: Out) {\r\n\t\tout.x = Math.round(a.x);\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 向量标量乘法\r\n\t * @method multiplyScalar\r\n\t * @typescript\r\n\t * multiplyScalar <Out extends IVec1Like> (out: Out, a: Out, b: number): Out\r\n\t * @static\r\n\t */\r\n\tstatic multiplyScalar <Out extends IVec1Like> (out: Out, a: Out, b: number) {\r\n\t\tout.x = a.x * b;\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 逐元素向量乘加: A + B * scale\r\n\t * @method scaleAndAdd\r\n\t * @typescript\r\n\t * scaleAndAdd <Out extends IVec1Like> (out: Out, a: Out, b: Out, scale: number): Out\r\n\t * @static\r\n\t */\r\n\tstatic scaleAndAdd <Out extends IVec1Like> (out: Out, a: Out, b: Out, scale: number) {\r\n\t\tout.x = a.x + (b.x * scale);\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 求两向量的欧氏距离\r\n\t * @method distance\r\n\t * @typescript\r\n\t * distance <Out extends IVec1Like> (a: Out, b: Out): number\r\n\t * @static\r\n\t */\r\n\tstatic distance <Out extends IVec1Like> (a: Out, b: Out) {\r\n\t\treturn b.x - a.x;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 求两向量的欧氏距离平方\r\n\t * @method squaredDistance\r\n\t * @typescript\r\n\t * squaredDistance <Out extends IVec1Like> (a: Out, b: Out): number\r\n\t * @static\r\n\t */\r\n\tstatic squaredDistance <Out extends IVec1Like> (a: Out, b: Out) {\r\n\t\t_x = b.x - a.x;\r\n\t\treturn _x * _x;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 求向量长度\r\n\t * @method len\r\n\t * @typescript\r\n\t * len <Out extends IVec1Like> (a: Out): number\r\n\t * @static\r\n\t */\r\n\tstatic len <Out extends IVec1Like> (a: Out) {\r\n\t\treturn a.x;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 求向量长度平方\r\n\t * @method lengthSqr\r\n\t * @typescript\r\n\t * lengthSqr <Out extends IVec1Like> (a: Out): number\r\n\t * @static\r\n\t */\r\n\tstatic lengthSqr <Out extends IVec1Like> (a: Out) {\r\n\t\treturn a.x * a.x;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 逐元素向量取负\r\n\t * @method negate\r\n\t * @typescript\r\n\t * negate <Out extends IVec1Like> (out: Out, a: Out): Out\r\n\t * @static\r\n\t */\r\n\tstatic negate <Out extends IVec1Like> (out: Out, a: Out) {\r\n\t\tout.x = -a.x;\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 逐元素向量取倒数，接近 0 时返回 Infinity\r\n\t * @method inverse\r\n\t * @typescript\r\n\t * inverse <Out extends IVec1Like> (out: Out, a: Out): Out\r\n\t * @static\r\n\t */\r\n\tstatic inverse <Out extends IVec1Like> (out: Out, a: Out) {\r\n\t\tout.x = 1.0 / a.x;\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 逐元素向量取倒数，接近 0 时返回 0\r\n\t * @method inverseSafe\r\n\t * @typescript\r\n\t * inverseSafe <Out extends IVec1Like> (out: Out, a: Out): Out\r\n\t * @static\r\n\t */\r\n\tstatic inverseSafe <Out extends IVec1Like> (out: Out, a: Out) {\r\n\t\t_x = a.x;\r\n\r\n\t\tif (Math.abs(_x) < EPSILON) {\r\n\t\t\tout.x = 0;\r\n\t\t} else {\r\n\t\t\tout.x = 1.0 / _x;\r\n\t\t}\r\n\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 归一化向量\r\n\t * @method normalize\r\n\t * @typescript\r\n\t * normalize <Out extends IVec1Like, Vec1Like extends IVec1Like> (out: Out, a: Vec1Like): Out\r\n\t * @static\r\n\t */\r\n\tstatic normalize <Out extends IVec1Like, Vec1Like extends IVec1Like> (out: Out, a: Vec1Like) {\r\n\t\tout.x = 1;\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 向量点积（数量积）\r\n\t * @method dot\r\n\t * @typescript\r\n\t * dot <Out extends IVec1Like> (a: Out, b: Out): number\r\n\t * @static\r\n\t */\r\n\tstatic dot <Out extends IVec1Like> (a: Out, b: Out) {\r\n\t\treturn a.x * b.x;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 逐元素向量线性插值： A + t * (B - A)\r\n\t * @method lerp\r\n\t * @typescript\r\n\t * lerp <Out extends IVec1Like> (out: Out, a: Out, b: Out, t: number): Out\r\n\t * @static\r\n\t */\r\n\tstatic lerp <Out extends IVec1Like> (out: Out, a: Out, b: Out, t: number) {\r\n\t\t_x = a.x;\r\n\t\tout.x = _x + t * (b.x - _x);\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 生成一个在单位圆上均匀分布的随机向量\r\n\t * @method random\r\n\t * @typescript\r\n\t * random <Out extends IVec1Like> (out: Out, scale?: number): Out\r\n\t * @static\r\n\t */\r\n\tstatic random <Out extends IVec1Like> (out: Out, scale?: number) {\r\n\t\tscale = scale || 1.0;\r\n\t\tout.x = Math.random() * scale;\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 向量与三维矩阵乘法，默认向量第三位为 1。\r\n\t * @method transformMat3\r\n\t * @typescript\r\n\t * transformMat3 <Out extends IVec1Like, MatLike extends IMat3Like> (out: Out, a: Out, mat: IMat3Like): Out\r\n\t * @static\r\n\t */\r\n\tstatic transformMat3 <Out extends IVec1Like, MatLike extends IMat3Like> (out: Out, a: Out, mat: MatLike) {\r\n\t\t_x = a.x;\r\n\t\tlet m = mat.m;\r\n\t\tout.x = m[0] * _x + m[3] * _y + m[6];\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 向量与四维矩阵乘法，默认向量第三位为 0，第四位为 1。\r\n\t * @method transformMat4\r\n\t * @typescript\r\n\t * transformMat4 <Out extends IVec1Like, MatLike extends IMat4Like> (out: Out, a: Out, mat: MatLike): Out\r\n\t * @static\r\n\t */\r\n\tstatic transformMat4 <Out extends IVec1Like, MatLike extends IMat4Like> (out: Out, a: Out, mat: MatLike) {\r\n\t\t_x = a.x;\r\n\t\tlet m = mat.m;\r\n\t\tout.x = m[0] * _x + m[4] * _y + m[12];\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 向量等价判断\r\n\t * @method strictEquals\r\n\t * @typescript\r\n\t * strictEquals <Out extends IVec1Like> (a: Out, b: Out): boolean\r\n\t * @static\r\n\t */\r\n\tstatic strictEquals <Out extends IVec1Like> (a: Out, b: Out) {\r\n\t\treturn a.x === b.x;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 排除浮点数误差的向量近似等价判断\r\n\t * @method equals\r\n\t * @typescript\r\n\t * equals <Out extends IVec1Like> (a: Out, b: Out,  epsilon?: number): boolean\r\n\t * @static\r\n\t */\r\n\tstatic equals <Out extends IVec1Like> (a: Out, b: Out,  epsilon = EPSILON) {\r\n\t\treturn (\r\n\t\t\tMath.abs(a.x - b.x) <=\r\n\t\t\tepsilon * Math.max(1.0, Math.abs(a.x), Math.abs(b.x))\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 向量转数组\r\n\t * @method toArray\r\n\t * @typescript\r\n\t * toArray <Out extends IWritableArrayLike<number>> (out: Out, v: IVec1Like, ofs?: number): Out\r\n\t * @static\r\n\t */\r\n\tstatic toArray <Out extends IWritableArrayLike<number>> (out: Out, v: IVec1Like, ofs = 0) {\r\n\t\tout[ofs] = v.x;\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#zh 数组转向量\r\n\t * @method fromArray\r\n\t * @typescript\r\n\t * fromArray <Out extends IVec1Like> (out: Out, arr: IWritableArrayLike<number>, ofs?: number): Out\r\n\t * @static\r\n\t */\r\n\tstatic fromArray <Out extends IVec1Like> (out: Out, arr: IWritableArrayLike<number>, ofs = 0) {\r\n\t\tout.x = arr[ofs];\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * @property {Number} x\r\n\t */\r\n\tx: number;\r\n\r\n\t// compatible with vec2\r\n\ty: number = 0;\r\n\r\n\t// compatible with vec3\r\n\t// z: number = 0;\r\n\r\n\t/**\r\n\t * !#en\r\n\t * Constructor\r\n\t * see {{#crossLink \"cc/Vec1:method\"}}cc.v2{{/crossLink}} or {{#crossLink \"cc/p:method\"}}cc.p{{/crossLink}}\r\n\t * !#zh\r\n\t * 构造函数，可查看 {{#crossLink \"cc/Vec1:method\"}}cc.v2{{/crossLink}} 或者 {{#crossLink \"cc/p:method\"}}cc.p{{/crossLink}}\r\n\t * @method constructor\r\n\t * @param {Number} [x=0]\r\n\t * @param {Number} [y=0]\r\n\t */\r\n\tconstructor (x: number | Vec1 = 0) {\r\n\t\tsuper();\r\n\r\n\t\tif (x && typeof x === 'object') {\r\n\t\t\tthis.x = x.x || 0;\r\n\t\t} else {\r\n\t\t\tthis.x = x as number || 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * !#en clone a Vec1 object\r\n\t * !#zh 克隆一个 Vec1 对象\r\n\t * @method clone\r\n\t * @return {Vec1}\r\n\t */\r\n\tclone (): Vec1 {\r\n\t\treturn new Vec1(this.x);\r\n\t}\r\n\r\n\t/**\r\n\t * !#en Sets vector with another's value\r\n\t * !#zh 设置向量值。\r\n\t * @method set\r\n\t * @param {Vec1} newValue - !#en new value to set. !#zh 要设置的新值\r\n\t * @return {Vec1} returns this\r\n\t * @chainable\r\n\t */\r\n\tset (newValue: Vec1): this {\r\n\t\tthis.x = newValue.x;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * !#en Check whether two vector equal\r\n\t * !#zh 当前的向量是否与指定的向量相等。\r\n\t * @method equals\r\n\t * @param {Vec1} other\r\n\t * @return {Boolean}\r\n\t */\r\n\tequals (other: Vec1): boolean {\r\n\t\treturn other && this.x === other.x;\r\n\t}\r\n\r\n\t/**\r\n\t * !#en Check whether two vector equal with some degree of variance.\r\n\t * !#zh\r\n\t * 近似判断两个点是否相等。<br/>\r\n\t * 判断 2 个向量是否在指定数值的范围之内，如果在则返回 true，反之则返回 false。\r\n\t * @method fuzzyEquals\r\n\t * @param {Vec1} other\r\n\t * @param {Number} variance\r\n\t * @return {Boolean}\r\n\t */\r\n\tfuzzyEquals (other: Vec1, variance): boolean {\r\n\t\treturn this.x - variance <= other.x && other.x <= this.x + variance;\r\n\t}\r\n\r\n\t/**\r\n\t * !#en Transform to string with vector informations\r\n\t * !#zh 转换为方便阅读的字符串。\r\n\t * @method toString\r\n\t * @return {string}\r\n\t */\r\n\ttoString (): string {\r\n\t\treturn \"(\" +\r\n\t\t\tthis.x.toFixed(2) + \")\"\r\n\t\t\t;\r\n\t}\r\n\r\n\t/**\r\n\t * !#en Calculate linear interpolation result between this vector and another one with given ratio\r\n\t * !#zh 线性插值。\r\n\t * @method lerp\r\n\t * @param {Vec1} to\r\n\t * @param {Number} ratio - the interpolation coefficient\r\n\t * @param {Vec1} [out] - optional, the receiving vector, you can pass the same Vec1 to save result to itself, if not provided, a new Vec1 will be created\r\n\t * @return {Vec1}\r\n\t */\r\n\tlerp (to: Vec1, ratio: number, out?: Vec1): Vec1 {\r\n\t\tconst x = this.x;\r\n\t\tout = out || new Vec1();\r\n\t\tout.x = x + (to.x - x) * ratio;\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#en Clamp the vector between from float and to float.\r\n\t * !#zh\r\n\t * 返回指定限制区域后的向量。<br/>\r\n\t * 向量大于 max_inclusive 则返回 max_inclusive。<br/>\r\n\t * 向量小于 min_inclusive 则返回 min_inclusive。<br/>\r\n\t * 否则返回自身。\r\n\t * @method clampf\r\n\t * @param {Vec1} min_inclusive\r\n\t * @param {Vec1} max_inclusive\r\n\t * @return {Vec1}\r\n\t * @example\r\n\t * var min_inclusive = cc.v2(0, 0);\r\n\t * var max_inclusive = cc.v2(20, 20);\r\n\t * var v1 = cc.v2(20, 20).clampf(min_inclusive, max_inclusive); // Vec1 {x: 20, y: 20};\r\n\t * var v2 = cc.v2(0, 0).clampf(min_inclusive, max_inclusive);   // Vec1 {x: 0, y: 0};\r\n\t * var v3 = cc.v2(10, 10).clampf(min_inclusive, max_inclusive); // Vec1 {x: 10, y: 10};\r\n\t */\r\n\tclampf (min_inclusive: Vec1, max_inclusive: Vec1): this {\r\n\t\tthis.x = misc.clampf(this.x, min_inclusive.x, max_inclusive.x);\r\n\t\tthis.y = misc.clampf(this.y, min_inclusive.y, max_inclusive.y);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * !#en Adds this vector.\r\n\t * !#zh 向量加法。\r\n\t * @method add\r\n\t * @param {Vec1} vector\r\n\t * @param {Vec1} [out]\r\n\t * @return {Vec1} returns this\r\n\t * @chainable\r\n\t * @example\r\n\t * var v = cc.v2(10, 10);\r\n\t * v.add(cc.v2(5, 5));// return Vec1 {x: 15, y: 15};\r\n\t */\r\n\tadd (vector: Vec1, out?: Vec1): Vec1 {\r\n\t\tout = out || new Vec1();\r\n\t\tout.x = this.x + vector.x;\r\n\t\tout.y = this.y + vector.y;\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#en Adds this vector. If you want to save result to another vector, use add() instead.\r\n\t * !#zh 向量加法。如果你想保存结果到另一个向量，使用 add() 代替。\r\n\t * @method addSelf\r\n\t * @param {Vec1} vector\r\n\t * @return {Vec1} returns this\r\n\t * @chainable\r\n\t */\r\n\taddSelf (vector: Vec1): this {\r\n\t\tthis.x += vector.x;\r\n\t\tthis.y += vector.y;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * !#en Subtracts one vector from this.\r\n\t * !#zh 向量减法。\r\n\t * @method subtract\r\n\t * @param {Vec1} vector\r\n\t * @return {Vec1} returns this\r\n\t * @chainable\r\n\t * @example\r\n\t * var v = cc.v2(10, 10);\r\n\t * v.subSelf(cc.v2(5, 5));// return Vec1 {x: 5, y: 5};\r\n\t */\r\n\tsubtract (vector: Vec1): this {\r\n\t\tthis.x -= vector.x;\r\n\t\tthis.y -= vector.y;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * !#en Multiplies this by a number.\r\n\t * !#zh 缩放当前向量。\r\n\t * @method multiplyScalar\r\n\t * @param {number} num\r\n\t * @return {Vec1} returns this\r\n\t * @chainable\r\n\t * @example\r\n\t * var v = cc.v2(10, 10);\r\n\t * v.multiply(5);// return Vec1 {x: 50, y: 50};\r\n\t */\r\n\tmultiplyScalar (num: number): this {\r\n\t\tthis.x *= num;\r\n\t\tthis.y *= num;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * !#en Multiplies two vectors.\r\n\t * !#zh 分量相乘。\r\n\t * @method multiply\r\n\t * @param {Vec1} vector\r\n\t * @return {Vec1} returns this\r\n\t * @chainable\r\n\t * @example\r\n\t * var v = cc.v2(10, 10);\r\n\t * v.multiply(cc.v2(5, 5));// return Vec1 {x: 50, y: 50};\r\n\t */\r\n\tmultiply (vector: Vec1): this {\r\n\t\tthis.x *= vector.x;\r\n\t\tthis.y *= vector.y;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * !#en Divides by a number.\r\n\t * !#zh 向量除法。\r\n\t * @method divide\r\n\t * @param {number} num\r\n\t * @return {Vec1} returns this\r\n\t * @chainable\r\n\t * @example\r\n\t * var v = cc.v2(10, 10);\r\n\t * v.divide(5); // return Vec1 {x: 2, y: 2};\r\n\t */\r\n\tdivide (num: number): this {\r\n\t\tthis.x /= num;\r\n\t\tthis.y /= num;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * !#en Negates the components.\r\n\t * !#zh 向量取反。\r\n\t * @method negate\r\n\t * @return {Vec1} returns this\r\n\t * @chainable\r\n\t * @example\r\n\t * var v = cc.v2(10, 10);\r\n\t * v.negate(); // return Vec1 {x: -10, y: -10};\r\n\t */\r\n\tnegate (): this {\r\n\t\tthis.x = -this.x;\r\n\t\tthis.y = -this.y;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * !#en Dot product\r\n\t * !#zh 当前向量与指定向量进行点乘。\r\n\t * @method dot\r\n\t * @param {Vec1} [vector]\r\n\t * @return {number} the result\r\n\t * @example\r\n\t * var v = cc.v2(10, 10);\r\n\t * v.dot(cc.v2(5, 5)); // return 100;\r\n\t */\r\n\tdot (vector: Vec1): number {\r\n\t\treturn this.x * vector.x + this.y * vector.y;\r\n\t}\r\n\r\n\t/**\r\n\t * !#en Cross product\r\n\t * !#zh 当前向量与指定向量进行叉乘。\r\n\t * @method cross\r\n\t * @param {Vec1} [vector]\r\n\t * @return {number} the result\r\n\t * @example\r\n\t * var v = cc.v2(10, 10);\r\n\t * v.cross(cc.v2(5, 5)); // return 0;\r\n\t */\r\n\tcross (vector: Vec1): number {\r\n\t\treturn this.x * vector.y - this.y * vector.x;\r\n\t}\r\n\r\n\t/**\r\n\t * !#en Returns the length of this vector.\r\n\t * !#zh 返回该向量的长度。\r\n\t * @method len\r\n\t * @return {number} the result\r\n\t * @example\r\n\t * var v = cc.v2(10, 10);\r\n\t * v.len(); // return 14.142135623730951;\r\n\t */\r\n\tlen (): number {\r\n\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\r\n\t}\r\n\r\n\t/**\r\n\t * !#en Returns the squared length of this vector.\r\n\t * !#zh 返回该向量的长度平方。\r\n\t * @method lengthSqr\r\n\t * @return {number} the result\r\n\t * @example\r\n\t * var v = cc.v2(10, 10);\r\n\t * v.lengthSqr(); // return 200;\r\n\t */\r\n\tlengthSqr (): number {\r\n\t\treturn this.x * this.x + this.y * this.y;\r\n\t}\r\n\r\n\t/**\r\n\t * !#en Make the length of this vector to 1.\r\n\t * !#zh 向量归一化，让这个向量的长度为 1。\r\n\t * @method normalizeSelf\r\n\t * @return {Vec1} returns this\r\n\t * @chainable\r\n\t * @example\r\n\t * var v = cc.v2(10, 10);\r\n\t * v.normalizeSelf(); // return Vec1 {x: 0.7071067811865475, y: 0.7071067811865475};\r\n\t */\r\n\tnormalizeSelf (): Vec1 {\r\n\t\tvar magSqr = this.x * this.x + this.y * this.y;\r\n\t\tif (magSqr === 1.0)\r\n\t\t\treturn this;\r\n\r\n\t\tif (magSqr === 0.0) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tvar invsqrt = 1.0 / Math.sqrt(magSqr);\r\n\t\tthis.x *= invsqrt;\r\n\t\tthis.y *= invsqrt;\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * !#en\r\n\t * Returns this vector with a magnitude of 1.<br/>\r\n\t * <br/>\r\n\t * Note that the current vector is unchanged and a new normalized vector is returned. If you want to normalize the current vector, use normalizeSelf function.\r\n\t * !#zh\r\n\t * 返回归一化后的向量。<br/>\r\n\t * <br/>\r\n\t * 注意，当前向量不变，并返回一个新的归一化向量。如果你想来归一化当前向量，可使用 normalizeSelf 函数。\r\n\t * @method normalize\r\n\t * @param {Vec1} [out] - optional, the receiving vector, you can pass the same Vec1 to save result to itself, if not provided, a new Vec1 will be created\r\n\t * @return {Vec1} result\r\n\t * var v = cc.v2(10, 10);\r\n\t * v.normalize();   // return Vec1 {x: 0.7071067811865475, y: 0.7071067811865475};\r\n\t */\r\n\tnormalize (out?: Vec1): Vec1 {\r\n\t\tout = out || new Vec1();\r\n\t\tout.x = this.x;\r\n\t\tout.y = this.y;\r\n\t\tout.normalizeSelf();\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * !#en Get angle in radian between this and vector.\r\n\t * !#zh 夹角的弧度。\r\n\t * @method angle\r\n\t * @param {Vec1} vector\r\n\t * @return {number} from 0 to Math.PI\r\n\t */\r\n\tangle (vector: Vec1): number {\r\n\t\tvar magSqr1 = this.magSqr();\r\n\t\tvar magSqr2 = vector.magSqr();\r\n\r\n\t\tif (magSqr1 === 0 || magSqr2 === 0) {\r\n\t\t\tconsole.warn(\"Can't get angle between zero vector\");\r\n\t\t\treturn 0.0;\r\n\t\t}\r\n\r\n\t\tvar dot = this.dot(vector);\r\n\t\tvar theta = dot / (Math.sqrt(magSqr1 * magSqr2));\r\n\t\ttheta = misc.clampf(theta, -1.0, 1.0);\r\n\t\treturn Math.acos(theta);\r\n\t}\r\n\r\n\t/**\r\n\t * !#en Get angle in radian between this and vector with direction.\r\n\t * !#zh 带方向的夹角的弧度。\r\n\t * @method signAngle\r\n\t * @param {Vec1} vector\r\n\t * @return {number} from -MathPI to Math.PI\r\n\t */\r\n\tsignAngle (vector: Vec1): number {\r\n\t\tlet angle = this.angle(vector);\r\n\t\treturn this.cross(vector) < 0 ? -angle : angle;\r\n\t}\r\n\r\n\t/**\r\n\t * !#en rotate\r\n\t * !#zh 返回旋转给定弧度后的新向量。\r\n\t * @method rotate\r\n\t * @param {number} radians\r\n\t * @param {Vec1} [out] - optional, the receiving vector, you can pass the same Vec1 to save result to itself, if not provided, a new Vec1 will be created\r\n\t * @return {Vec1} the result\r\n\t */\r\n\trotate (radians: number, out?: Vec1): Vec1 {\r\n\t\tout = out || new Vec1();\r\n\t\tout.x = this.x;\r\n\t\tout.y = this.y;\r\n\t\treturn out.rotateSelf(radians);\r\n\t}\r\n\r\n\t/**\r\n\t * !#en rotate self\r\n\t * !#zh 按指定弧度旋转向量。\r\n\t * @method rotateSelf\r\n\t * @param {number} radians\r\n\t * @return {Vec1} returns this\r\n\t * @chainable\r\n\t */\r\n\trotateSelf (radians: number): Vec1 {\r\n\t\tvar sin = Math.sin(radians);\r\n\t\tvar cos = Math.cos(radians);\r\n\t\tvar x = this.x;\r\n\t\tthis.x = cos * x - sin * this.y;\r\n\t\tthis.y = sin * x + cos * this.y;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * !#en Calculates the projection of the current vector over the given vector.\r\n\t * !#zh 返回当前向量在指定 vector 向量上的投影向量。\r\n\t * @method project\r\n\t * @param {Vec1} vector\r\n\t * @return {Vec1}\r\n\t * @example\r\n\t * var v1 = cc.v2(20, 20);\r\n\t * var v2 = cc.v2(5, 5);\r\n\t * v1.project(v2); // Vec1 {x: 20, y: 20};\r\n\t */\r\n\tproject (vector: Vec1): Vec1 {\r\n\t\treturn vector.multiplyScalar(this.dot(vector) / vector.dot(vector));\r\n\t}\r\n\r\n\t/**\r\n\t * Transforms the Vec1 with a mat4. 3rd vector component is implicitly '0', 4th vector component is implicitly '1'\r\n\t * @method transformMat4\r\n\t * @param {Mat4} m matrix to transform with\r\n\t * @param {Vec1} [out] the receiving vector, you can pass the same Vec1 to save result to itself, if not provided, a new Vec1 will be created\r\n\t * @returns {Vec1} out\r\n\t */\r\n\ttransformMat4 (m: Mat4, out?: Vec1): Vec1 {\r\n\t\tout = out || new Vec1();\r\n\t\tVec1.transformMat4(out, this, m);\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the maximum value in x, y.\r\n\t * @method maxAxis\r\n\t * @returns {number}\r\n\t */\r\n\tmaxAxis (): number {\r\n\t\treturn Math.max(this.x, this.y);\r\n\t}\r\n}\r\n","import requireComponent = cc._decorator.requireComponent;\r\nimport VideoPlayer = cc.VideoPlayer;\r\nimport menu = cc._decorator.menu;\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\n@requireComponent(VideoPlayer)\r\n@menu(\"其他组件/视频自动播放\")\r\nexport default class VideoAutoPlay extends cc.Component {\r\n\r\n    player: VideoPlayer = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n        this.player = this.getComponent(VideoPlayer);\r\n\r\n        //自动开始播放\r\n\r\n        this.player.node.on('ready-to-play', this.play, this);\r\n\r\n        //监听视频是否播放完毕，如果播放完毕再次播放\r\n\r\n        this.player.node.on('completed', this.replay, this);\r\n\r\n    }\r\n\r\n    play() {\r\n        if (this.player) {\r\n            this.player.play();\r\n        }\r\n    }\r\n\r\n    replay() {\r\n        this.player.play();//再次播放\r\n    }\r\n\r\n    // onStopped () {\r\n    //\r\n    //     cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, EventType.STOPPED);\r\n    //\r\n    //     this.node.emit('stopped', this);\r\n    //\r\n    // }\r\n\r\n    // update (dt) {}\r\n}\r\n","import {nftMgr} from \"../../../Modules/NFTModule/Managers/NFTManager\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class WalletController extends cc.Component {\r\n\r\n    @property(cc.Label)\r\n    USTD: cc.Label = null;\r\n\r\n    protected start() {\r\n        nftMgr().getUSTDBalance().then(res => {\r\n            this.USTD.string = res.toString();\r\n        })\r\n    }\r\n\r\n}\r\n","/*Copyrights for code authored by Yahoo Inc. is licensed under the following terms:\r\nMIT License\r\nCopyright  2017 Yahoo Inc.\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n;(function(window, document, navigator, undefined) {\r\n\"use strict\";\r\n\r\n/*\r\n  utils.js\r\n  ========\r\n*/\r\n\r\n/* Copyright  2017 Yahoo Inc.\r\n * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.\r\n*/\r\n\r\nvar utils = {\r\n    URL: window.URL || window.webkitURL || window.mozURL || window.msURL,\r\n    getUserMedia: function () {\r\n        var getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;\r\n\r\n        return getUserMedia ? getUserMedia.bind(navigator) : getUserMedia;\r\n    }(),\r\n    requestAnimFrame: window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame,\r\n    requestTimeout: function requestTimeout(callback, delay) {\r\n        callback = callback || utils.noop;\r\n        delay = delay || 0;\r\n\r\n        if (!utils.requestAnimFrame) {\r\n            return setTimeout(callback, delay);\r\n        }\r\n\r\n        var start = new Date().getTime();\r\n        var handle = new Object();\r\n        var requestAnimFrame = utils.requestAnimFrame;\r\n\r\n        var loop = function loop() {\r\n            var current = new Date().getTime();\r\n            var delta = current - start;\r\n\r\n            delta >= delay ? callback.call() : handle.value = requestAnimFrame(loop);\r\n        };\r\n\r\n        handle.value = requestAnimFrame(loop);\r\n\r\n        return handle;\r\n    },\r\n    Blob: window.Blob || window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder,\r\n    btoa: function () {\r\n        var btoa = window.btoa || function (input) {\r\n            var output = '';\r\n            var i = 0;\r\n            var l = input.length;\r\n            var key = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\n            var chr1 = void 0;\r\n            var chr2 = void 0;\r\n            var chr3 = void 0;\r\n            var enc1 = void 0;\r\n            var enc2 = void 0;\r\n            var enc3 = void 0;\r\n            var enc4 = void 0;\r\n\r\n            while (i < l) {\r\n                chr1 = input.charCodeAt(i++);\r\n                chr2 = input.charCodeAt(i++);\r\n                chr3 = input.charCodeAt(i++);\r\n                enc1 = chr1 >> 2;\r\n                enc2 = (chr1 & 3) << 4 | chr2 >> 4;\r\n                enc3 = (chr2 & 15) << 2 | chr3 >> 6;\r\n                enc4 = chr3 & 63;\r\n\r\n                if (isNaN(chr2)) {\r\n                    enc3 = enc4 = 64;\r\n                } else if (isNaN(chr3)) {\r\n                    enc4 = 64;\r\n                }\r\n\r\n                output = output + key.charAt(enc1) + key.charAt(enc2) + key.charAt(enc3) + key.charAt(enc4);\r\n            }\r\n\r\n            return output;\r\n        };\r\n\r\n        return btoa ? btoa.bind(window) : utils.noop;\r\n    }(),\r\n    isObject: function isObject(obj) {\r\n        return obj && Object.prototype.toString.call(obj) === '[object Object]';\r\n    },\r\n    isEmptyObject: function isEmptyObject(obj) {\r\n        return utils.isObject(obj) && !Object.keys(obj).length;\r\n    },\r\n    isArray: function isArray(arr) {\r\n        return arr && Array.isArray(arr);\r\n    },\r\n    isFunction: function isFunction(func) {\r\n        return func && typeof func === 'function';\r\n    },\r\n    isElement: function isElement(elem) {\r\n        return elem && elem.nodeType === 1;\r\n    },\r\n    isString: function isString(value) {\r\n        return typeof value === 'string' || Object.prototype.toString.call(value) === '[object String]';\r\n    },\r\n    isSupported: {\r\n        canvas: function canvas() {\r\n            var el = document.createElement('canvas');\r\n\r\n            return el && el.getContext && el.getContext('2d');\r\n        },\r\n        webworkers: function webworkers() {\r\n            return window.Worker;\r\n        },\r\n        blob: function blob() {\r\n            return utils.Blob;\r\n        },\r\n        Uint8Array: function Uint8Array() {\r\n            return window.Uint8Array;\r\n        },\r\n        Uint32Array: function Uint32Array() {\r\n            return window.Uint32Array;\r\n        },\r\n        videoCodecs: function () {\r\n            var testEl = document.createElement('video');\r\n            var supportObj = {\r\n                'mp4': false,\r\n                'h264': false,\r\n                'ogv': false,\r\n                'ogg': false,\r\n                'webm': false\r\n            };\r\n\r\n            try {\r\n                if (testEl && testEl.canPlayType) {\r\n                    // Check for MPEG-4 support\r\n                    supportObj.mp4 = testEl.canPlayType('video/mp4; codecs=\"mp4v.20.8\"') !== '';\r\n\r\n                    // Check for h264 support\r\n                    supportObj.h264 = (testEl.canPlayType('video/mp4; codecs=\"avc1.42E01E\"') || testEl.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"')) !== '';\r\n\r\n                    // Check for Ogv support\r\n                    supportObj.ogv = testEl.canPlayType('video/ogg; codecs=\"theora\"') !== '';\r\n\r\n                    // Check for Ogg support\r\n                    supportObj.ogg = testEl.canPlayType('video/ogg; codecs=\"theora\"') !== '';\r\n\r\n                    // Check for Webm support\r\n                    supportObj.webm = testEl.canPlayType('video/webm; codecs=\"vp8, vorbis\"') !== -1;\r\n                }\r\n            } catch (e) {}\r\n\r\n            return supportObj;\r\n        }()\r\n    },\r\n    noop: function noop() {},\r\n    each: function each(collection, callback) {\r\n        var x = void 0;\r\n        var len = void 0;\r\n\r\n        if (utils.isArray(collection)) {\r\n            x = -1;\r\n            len = collection.length;\r\n\r\n            while (++x < len) {\r\n                if (callback(x, collection[x]) === false) {\r\n                    break;\r\n                }\r\n            }\r\n        } else if (utils.isObject(collection)) {\r\n            for (x in collection) {\r\n                if (collection.hasOwnProperty(x)) {\r\n                    if (callback(x, collection[x]) === false) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    mergeOptions: function mergeOptions(defaultOptions, userOptions) {\r\n        if (!utils.isObject(defaultOptions) || !utils.isObject(userOptions) || !Object.keys) {\r\n            return;\r\n        }\r\n\r\n        var newObj = {};\r\n\r\n        utils.each(defaultOptions, function (key, val) {\r\n            newObj[key] = defaultOptions[key];\r\n        });\r\n\r\n        utils.each(userOptions, function (key, val) {\r\n            var currentUserOption = userOptions[key];\r\n\r\n            if (!utils.isObject(currentUserOption)) {\r\n                newObj[key] = currentUserOption;\r\n            } else {\r\n                if (!defaultOptions[key]) {\r\n                    newObj[key] = currentUserOption;\r\n                } else {\r\n                    newObj[key] = utils.mergeOptions(defaultOptions[key], currentUserOption);\r\n                }\r\n            }\r\n        });\r\n\r\n        return newObj;\r\n    },\r\n    setCSSAttr: function setCSSAttr(elem, attr, val) {\r\n        if (!utils.isElement(elem)) {\r\n            return;\r\n        }\r\n\r\n        if (utils.isString(attr) && utils.isString(val)) {\r\n            elem.style[attr] = val;\r\n        } else if (utils.isObject(attr)) {\r\n            utils.each(attr, function (key, val) {\r\n                elem.style[key] = val;\r\n            });\r\n        }\r\n    },\r\n    removeElement: function removeElement(node) {\r\n        if (!utils.isElement(node)) {\r\n            return;\r\n        }\r\n        if (node.parentNode) {\r\n            node.parentNode.removeChild(node);\r\n        }\r\n    },\r\n    createWebWorker: function createWebWorker(content) {\r\n        if (!utils.isString(content)) {\r\n            return {};\r\n        }\r\n\r\n        try {\r\n            var blob = new utils.Blob([content], {\r\n                'type': 'text/javascript'\r\n            });\r\n            var objectUrl = utils.URL.createObjectURL(blob);\r\n            var worker = new Worker(objectUrl);\r\n\r\n            return {\r\n                'objectUrl': objectUrl,\r\n                'worker': worker\r\n            };\r\n        } catch (e) {\r\n            return '' + e;\r\n        }\r\n    },\r\n    getExtension: function getExtension(src) {\r\n        return src.substr(src.lastIndexOf('.') + 1, src.length);\r\n    },\r\n    getFontSize: function getFontSize() {\r\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n\r\n        if (!document.body || options.resizeFont === false) {\r\n            return options.fontSize;\r\n        }\r\n\r\n        var text = options.text;\r\n        var containerWidth = options.gifWidth;\r\n        var fontSize = parseInt(options.fontSize, 10);\r\n        var minFontSize = parseInt(options.minFontSize, 10);\r\n        var div = document.createElement('div');\r\n        var span = document.createElement('span');\r\n\r\n        div.setAttribute('width', containerWidth);\r\n        div.appendChild(span);\r\n\r\n        span.innerHTML = text;\r\n        span.style.fontSize = fontSize + 'px';\r\n        span.style.textIndent = '-9999px';\r\n        span.style.visibility = 'hidden';\r\n\r\n        document.body.appendChild(span);\r\n\r\n        while (span.offsetWidth > containerWidth && fontSize >= minFontSize) {\r\n            span.style.fontSize = --fontSize + 'px';\r\n        }\r\n\r\n        document.body.removeChild(span);\r\n\r\n        return fontSize + 'px';\r\n    },\r\n    webWorkerError: false\r\n};\r\n\r\n\r\n\r\nvar utils$2 = Object.freeze({\r\n\tdefault: utils\r\n});\r\n\r\n/*\r\n  error.js\r\n  ========\r\n*/\r\n\r\n/* Copyright  2017 Yahoo Inc.\r\n * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.\r\n*/\r\n\r\n// Dependencies\r\nvar error = {\r\n    validate: function validate(skipObj) {\r\n        skipObj = utils.isObject(skipObj) ? skipObj : {};\r\n\r\n        var errorObj = {};\r\n\r\n        utils.each(error.validators, function (indece, currentValidator) {\r\n            var errorCode = currentValidator.errorCode;\r\n\r\n            if (!skipObj[errorCode] && !currentValidator.condition) {\r\n                errorObj = currentValidator;\r\n                errorObj.error = true;\r\n\r\n                return false;\r\n            }\r\n        });\r\n\r\n        delete errorObj.condition;\r\n\r\n        return errorObj;\r\n    },\r\n    isValid: function isValid(skipObj) {\r\n        var errorObj = error.validate(skipObj);\r\n        var isValid = errorObj.error !== true ? true : false;\r\n\r\n        return isValid;\r\n    },\r\n    validators: [{\r\n        condition: utils.isFunction(utils.getUserMedia),\r\n        errorCode: 'getUserMedia',\r\n        errorMsg: 'The getUserMedia API is not supported in your browser'\r\n    }, {\r\n        condition: utils.isSupported.canvas(),\r\n        errorCode: 'canvas',\r\n        errorMsg: 'Canvas elements are not supported in your browser'\r\n    }, {\r\n        condition: utils.isSupported.webworkers(),\r\n        errorCode: 'webworkers',\r\n        errorMsg: 'The Web Workers API is not supported in your browser'\r\n    }, {\r\n        condition: utils.isFunction(utils.URL),\r\n        errorCode: 'window.URL',\r\n        errorMsg: 'The window.URL API is not supported in your browser'\r\n    }, {\r\n        condition: utils.isSupported.blob(),\r\n        errorCode: 'window.Blob',\r\n        errorMsg: 'The window.Blob File API is not supported in your browser'\r\n    }, {\r\n        condition: utils.isSupported.Uint8Array(),\r\n        errorCode: 'window.Uint8Array',\r\n        errorMsg: 'The window.Uint8Array function constructor is not supported in your browser'\r\n    }, {\r\n        condition: utils.isSupported.Uint32Array(),\r\n        errorCode: 'window.Uint32Array',\r\n        errorMsg: 'The window.Uint32Array function constructor is not supported in your browser'\r\n    }],\r\n    messages: {\r\n        videoCodecs: {\r\n            errorCode: 'videocodec',\r\n            errorMsg: 'The video codec you are trying to use is not supported in your browser'\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\nvar error$2 = Object.freeze({\r\n\tdefault: error\r\n});\r\n\r\n/*\r\n  defaultOptions.js\r\n  =================\r\n*/\r\n\r\n/* Copyright  2017 Yahoo Inc.\r\n * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.\r\n*/\r\n\r\n// Helpers\r\nvar noop = function noop() {};\r\n\r\nvar defaultOptions = {\r\n    sampleInterval: 10,\r\n    numWorkers: 2,\r\n    filter: '',\r\n    gifWidth: 200,\r\n    gifHeight: 200,\r\n    interval: 0.1,\r\n    numFrames: 10,\r\n    frameDuration: 1,\r\n    keepCameraOn: false,\r\n    images: [],\r\n    video: null,\r\n    webcamVideoElement: null,\r\n    cameraStream: null,\r\n    text: '',\r\n    fontWeight: 'normal',\r\n    fontSize: '16px',\r\n    minFontSize: '10px',\r\n    resizeFont: false,\r\n    fontFamily: 'sans-serif',\r\n    fontColor: '#ffffff',\r\n    textAlign: 'center',\r\n    textBaseline: 'bottom',\r\n    textXCoordinate: null,\r\n    textYCoordinate: null,\r\n    progressCallback: noop,\r\n    completeCallback: noop,\r\n    saveRenderingContexts: false,\r\n    savedRenderingContexts: [],\r\n    showFrameText: true,\r\n    crossOrigin: 'Anonymous',\r\n    waterMark: null,\r\n    waterMarkHeight: null,\r\n    waterMarkWidth: null,\r\n    waterMarkXCoordinate: 1,\r\n    waterMarkYCoordinate: 1\r\n};\r\n\r\n\r\n\r\nvar defaultOptions$2 = Object.freeze({\r\n\tdefault: defaultOptions\r\n});\r\n\r\n/*\r\n  isSupported.js\r\n  ==============\r\n*/\r\n\r\n/* Copyright  2017 Yahoo Inc.\r\n * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.\r\n*/\r\n\r\n// Dependencies\r\nfunction isSupported() {\r\n  return error.isValid();\r\n}\r\n\r\n/*\r\n  isWebCamGIFSupported.js\r\n  =======================\r\n*/\r\n\r\n/* Copyright  2017 Yahoo Inc.\r\n * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.\r\n*/\r\n\r\nfunction isWebCamGIFSupported() {\r\n  return error.isValid();\r\n}\r\n\r\n/*\r\n  isSupported.js\r\n  ==============\r\n*/\r\n\r\n/* Copyright  2017 Yahoo Inc.\r\n * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.\r\n*/\r\n\r\n// Dependencies\r\nfunction isSupported$1() {\r\n    var options = {\r\n        getUserMedia: true\r\n    };\r\n\r\n    return error.isValid(options);\r\n}\r\n\r\n/*\r\n  isExistingVideoGIFSupported.js\r\n  ==============================\r\n*/\r\n\r\n/* Copyright  2017 Yahoo Inc.\r\n * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.\r\n*/\r\n\r\n// Dependencies\r\nfunction isExistingVideoGIFSupported(codecs) {\r\n    var hasValidCodec = false;\r\n\r\n    if (utils.isArray(codecs) && codecs.length) {\r\n        utils.each(codecs, function (indece, currentCodec) {\r\n            if (utils.isSupported.videoCodecs[currentCodec]) {\r\n                hasValidCodec = true;\r\n            }\r\n        });\r\n\r\n        if (!hasValidCodec) {\r\n            return false;\r\n        }\r\n    } else if (utils.isString(codecs) && codecs.length) {\r\n        if (!utils.isSupported.videoCodecs[codecs]) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return error.isValid({\r\n        'getUserMedia': true\r\n    });\r\n}\r\n\r\n/*\r\n  NeuQuant.js\r\n  ===========\r\n*/\r\n\r\n/*\r\n * NeuQuant Neural-Net Quantization Algorithm\r\n * ------------------------------------------\r\n *\r\n * Copyright (c) 1994 Anthony Dekker\r\n *\r\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See\r\n * \"Kohonen neural networks for optimal colour quantization\" in \"Network:\r\n * Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of\r\n * the algorithm.\r\n *\r\n * Any party obtaining a copy of these files from the author, directly or\r\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\r\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal in\r\n * this software and documentation files (the \"Software\"), including without\r\n * limitation the rights to use, copy, modify, merge, publish, distribute,\r\n * sublicense, and/or sell copies of the Software, and to permit persons who\r\n * receive copies from any such party to do so, with the only requirement being\r\n * that this copyright notice remain intact.\r\n */\r\n\r\n/*\r\n * This class handles Neural-Net quantization algorithm\r\n * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\r\n * @author Thibault Imbert (AS3 version - bytearray.org)\r\n * @version 0.1 AS3 implementation\r\n * @version 0.2 JS->AS3 \"translation\" by antimatter15\r\n * @version 0.3 JS clean up + using modern JS idioms by sole - http://soledadpenades.com\r\n * Also implement fix in color conversion described at http://stackoverflow.com/questions/16371712/neuquant-js-javascript-color-quantization-hidden-bug-in-js-conversion\r\n */\r\n\r\nfunction NeuQuant() {\r\n  var netsize = 256; // number of colours used\r\n\r\n  // four primes near 500 - assume no image has a length so large\r\n  // that it is divisible by all four primes\r\n  var prime1 = 499;\r\n  var prime2 = 491;\r\n  var prime3 = 487;\r\n  var prime4 = 503;\r\n\r\n  // minimum size for input image\r\n  var minpicturebytes = 3 * prime4;\r\n\r\n  // Network Definitions\r\n\r\n  var maxnetpos = netsize - 1;\r\n  var netbiasshift = 4; // bias for colour values\r\n  var ncycles = 100; // no. of learning cycles\r\n\r\n  // defs for freq and bias\r\n  var intbiasshift = 16; // bias for fractions\r\n  var intbias = 1 << intbiasshift;\r\n  var gammashift = 10; // gamma = 1024\r\n  var gamma = 1 << gammashift;\r\n  var betashift = 10;\r\n  var beta = intbias >> betashift; // beta = 1/1024\r\n  var betagamma = intbias << gammashift - betashift;\r\n\r\n  // defs for decreasing radius factor\r\n  // For 256 colors, radius starts at 32.0 biased by 6 bits\r\n  // and decreases by a factor of 1/30 each cycle\r\n  var initrad = netsize >> 3;\r\n  var radiusbiasshift = 6;\r\n  var radiusbias = 1 << radiusbiasshift;\r\n  var initradius = initrad * radiusbias;\r\n  var radiusdec = 30;\r\n\r\n  // defs for decreasing alpha factor\r\n  // Alpha starts at 1.0 biased by 10 bits\r\n  var alphabiasshift = 10;\r\n  var initalpha = 1 << alphabiasshift;\r\n  var alphadec;\r\n\r\n  // radbias and alpharadbias used for radpower calculation\r\n  var radbiasshift = 8;\r\n  var radbias = 1 << radbiasshift;\r\n  var alpharadbshift = alphabiasshift + radbiasshift;\r\n  var alpharadbias = 1 << alpharadbshift;\r\n\r\n  // Input image\r\n  var thepicture;\r\n  // Height * Width * 3\r\n  var lengthcount;\r\n  // Sampling factor 1..30\r\n  var samplefac;\r\n\r\n  // The network itself\r\n  var network;\r\n  var netindex = [];\r\n\r\n  // for network lookup - really 256\r\n  var bias = [];\r\n\r\n  // bias and freq arrays for learning\r\n  var freq = [];\r\n  var radpower = [];\r\n\r\n  function NeuQuantConstructor(thepic, len, sample) {\r\n\r\n    var i;\r\n    var p;\r\n\r\n    thepicture = thepic;\r\n    lengthcount = len;\r\n    samplefac = sample;\r\n\r\n    network = new Array(netsize);\r\n\r\n    for (i = 0; i < netsize; i++) {\r\n      network[i] = new Array(4);\r\n      p = network[i];\r\n      p[0] = p[1] = p[2] = (i << netbiasshift + 8) / netsize | 0;\r\n      freq[i] = intbias / netsize | 0; // 1 / netsize\r\n      bias[i] = 0;\r\n    }\r\n  }\r\n\r\n  function colorMap() {\r\n    var map = [];\r\n    var index = new Array(netsize);\r\n    for (var i = 0; i < netsize; i++) {\r\n      index[network[i][3]] = i;\r\n    }var k = 0;\r\n    for (var l = 0; l < netsize; l++) {\r\n      var j = index[l];\r\n      map[k++] = network[j][0];\r\n      map[k++] = network[j][1];\r\n      map[k++] = network[j][2];\r\n    }\r\n    return map;\r\n  }\r\n\r\n  // Insertion sort of network and building of netindex[0..255]\r\n  // (to do after unbias)\r\n  function inxbuild() {\r\n    var i;\r\n    var j;\r\n    var smallpos;\r\n    var smallval;\r\n    var p;\r\n    var q;\r\n    var previouscol;\r\n    var startpos;\r\n\r\n    previouscol = 0;\r\n    startpos = 0;\r\n\r\n    for (i = 0; i < netsize; i++) {\r\n\r\n      p = network[i];\r\n      smallpos = i;\r\n      smallval = p[1]; // index on g\r\n      // find smallest in i..netsize-1\r\n      for (j = i + 1; j < netsize; j++) {\r\n\r\n        q = network[j];\r\n\r\n        if (q[1] < smallval) {\r\n          // index on g\r\n          smallpos = j;\r\n          smallval = q[1]; // index on g\r\n        }\r\n      }\r\n\r\n      q = network[smallpos];\r\n\r\n      // swap p (i) and q (smallpos) entries\r\n      if (i != smallpos) {\r\n        j = q[0];\r\n        q[0] = p[0];\r\n        p[0] = j;\r\n        j = q[1];\r\n        q[1] = p[1];\r\n        p[1] = j;\r\n        j = q[2];\r\n        q[2] = p[2];\r\n        p[2] = j;\r\n        j = q[3];\r\n        q[3] = p[3];\r\n        p[3] = j;\r\n      }\r\n\r\n      // smallval entry is now in position i\r\n      if (smallval != previouscol) {\r\n\r\n        netindex[previouscol] = startpos + i >> 1;\r\n\r\n        for (j = previouscol + 1; j < smallval; j++) {\r\n          netindex[j] = i;\r\n        }\r\n\r\n        previouscol = smallval;\r\n        startpos = i;\r\n      }\r\n    }\r\n\r\n    netindex[previouscol] = startpos + maxnetpos >> 1;\r\n    for (j = previouscol + 1; j < 256; j++) {\r\n      netindex[j] = maxnetpos; // really 256\r\n    }\r\n  }\r\n\r\n  // Main Learning Loop\r\n\r\n  function learn() {\r\n    var i;\r\n    var j;\r\n    var b;\r\n    var g;\r\n    var r;\r\n    var radius;\r\n    var rad;\r\n    var alpha;\r\n    var step;\r\n    var delta;\r\n    var samplepixels;\r\n    var p;\r\n    var pix;\r\n    var lim;\r\n\r\n    if (lengthcount < minpicturebytes) {\r\n      samplefac = 1;\r\n    }\r\n\r\n    alphadec = 30 + (samplefac - 1) / 3;\r\n    p = thepicture;\r\n    pix = 0;\r\n    lim = lengthcount;\r\n    samplepixels = lengthcount / (3 * samplefac);\r\n    delta = samplepixels / ncycles | 0;\r\n    alpha = initalpha;\r\n    radius = initradius;\r\n\r\n    rad = radius >> radiusbiasshift;\r\n    if (rad <= 1) {\r\n      rad = 0;\r\n    }\r\n\r\n    for (i = 0; i < rad; i++) {\r\n      radpower[i] = alpha * ((rad * rad - i * i) * radbias / (rad * rad));\r\n    }\r\n\r\n    if (lengthcount < minpicturebytes) {\r\n      step = 3;\r\n    } else if (lengthcount % prime1 !== 0) {\r\n      step = 3 * prime1;\r\n    } else {\r\n\r\n      if (lengthcount % prime2 !== 0) {\r\n        step = 3 * prime2;\r\n      } else {\r\n        if (lengthcount % prime3 !== 0) {\r\n          step = 3 * prime3;\r\n        } else {\r\n          step = 3 * prime4;\r\n        }\r\n      }\r\n    }\r\n\r\n    i = 0;\r\n\r\n    while (i < samplepixels) {\r\n\r\n      b = (p[pix + 0] & 0xff) << netbiasshift;\r\n      g = (p[pix + 1] & 0xff) << netbiasshift;\r\n      r = (p[pix + 2] & 0xff) << netbiasshift;\r\n      j = contest(b, g, r);\r\n\r\n      altersingle(alpha, j, b, g, r);\r\n\r\n      if (rad !== 0) {\r\n        // Alter neighbours\r\n        alterneigh(rad, j, b, g, r);\r\n      }\r\n\r\n      pix += step;\r\n\r\n      if (pix >= lim) {\r\n        pix -= lengthcount;\r\n      }\r\n\r\n      i++;\r\n\r\n      if (delta === 0) {\r\n        delta = 1;\r\n      }\r\n\r\n      if (i % delta === 0) {\r\n        alpha -= alpha / alphadec;\r\n        radius -= radius / radiusdec;\r\n        rad = radius >> radiusbiasshift;\r\n\r\n        if (rad <= 1) {\r\n          rad = 0;\r\n        }\r\n\r\n        for (j = 0; j < rad; j++) {\r\n          radpower[j] = alpha * ((rad * rad - j * j) * radbias / (rad * rad));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Search for BGR values 0..255 (after net is unbiased) and return colour index\r\n  function map(b, g, r) {\r\n    var i;\r\n    var j;\r\n    var dist;\r\n    var a;\r\n    var bestd;\r\n    var p;\r\n    var best;\r\n\r\n    // Biggest possible distance is 256 * 3\r\n    bestd = 1000;\r\n    best = -1;\r\n    i = netindex[g]; // index on g\r\n    j = i - 1; // start at netindex[g] and work outwards\r\n\r\n    while (i < netsize || j >= 0) {\r\n\r\n      if (i < netsize) {\r\n\r\n        p = network[i];\r\n\r\n        dist = p[1] - g; // inx key\r\n\r\n        if (dist >= bestd) {\r\n          i = netsize; // stop iter\r\n        } else {\r\n\r\n          i++;\r\n\r\n          if (dist < 0) {\r\n            dist = -dist;\r\n          }\r\n\r\n          a = p[0] - b;\r\n\r\n          if (a < 0) {\r\n            a = -a;\r\n          }\r\n\r\n          dist += a;\r\n\r\n          if (dist < bestd) {\r\n            a = p[2] - r;\r\n\r\n            if (a < 0) {\r\n              a = -a;\r\n            }\r\n\r\n            dist += a;\r\n\r\n            if (dist < bestd) {\r\n              bestd = dist;\r\n              best = p[3];\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (j >= 0) {\r\n\r\n        p = network[j];\r\n\r\n        dist = g - p[1]; // inx key - reverse dif\r\n\r\n        if (dist >= bestd) {\r\n          j = -1; // stop iter\r\n        } else {\r\n\r\n          j--;\r\n          if (dist < 0) {\r\n            dist = -dist;\r\n          }\r\n          a = p[0] - b;\r\n          if (a < 0) {\r\n            a = -a;\r\n          }\r\n          dist += a;\r\n\r\n          if (dist < bestd) {\r\n            a = p[2] - r;\r\n            if (a < 0) {\r\n              a = -a;\r\n            }\r\n            dist += a;\r\n            if (dist < bestd) {\r\n              bestd = dist;\r\n              best = p[3];\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return best;\r\n  }\r\n\r\n  function process() {\r\n    learn();\r\n    unbiasnet();\r\n    inxbuild();\r\n    return colorMap();\r\n  }\r\n\r\n  // Unbias network to give byte values 0..255 and record position i\r\n  // to prepare for sort\r\n  function unbiasnet() {\r\n    var i;\r\n    var j;\r\n\r\n    for (i = 0; i < netsize; i++) {\r\n      network[i][0] >>= netbiasshift;\r\n      network[i][1] >>= netbiasshift;\r\n      network[i][2] >>= netbiasshift;\r\n      network[i][3] = i; // record colour no\r\n    }\r\n  }\r\n\r\n  // Move adjacent neurons by precomputed alpha*(1-((i-j)^2/[r]^2))\r\n  // in radpower[|i-j|]\r\n  function alterneigh(rad, i, b, g, r) {\r\n\r\n    var j;\r\n    var k;\r\n    var lo;\r\n    var hi;\r\n    var a;\r\n    var m;\r\n\r\n    var p;\r\n\r\n    lo = i - rad;\r\n    if (lo < -1) {\r\n      lo = -1;\r\n    }\r\n\r\n    hi = i + rad;\r\n\r\n    if (hi > netsize) {\r\n      hi = netsize;\r\n    }\r\n\r\n    j = i + 1;\r\n    k = i - 1;\r\n    m = 1;\r\n\r\n    while (j < hi || k > lo) {\r\n\r\n      a = radpower[m++];\r\n\r\n      if (j < hi) {\r\n\r\n        p = network[j++];\r\n\r\n        try {\r\n\r\n          p[0] -= a * (p[0] - b) / alpharadbias | 0;\r\n          p[1] -= a * (p[1] - g) / alpharadbias | 0;\r\n          p[2] -= a * (p[2] - r) / alpharadbias | 0;\r\n        } catch (e) {}\r\n      }\r\n\r\n      if (k > lo) {\r\n\r\n        p = network[k--];\r\n\r\n        try {\r\n\r\n          p[0] -= a * (p[0] - b) / alpharadbias | 0;\r\n          p[1] -= a * (p[1] - g) / alpharadbias | 0;\r\n          p[2] -= a * (p[2] - r) / alpharadbias | 0;\r\n        } catch (e) {}\r\n      }\r\n    }\r\n  }\r\n\r\n  // Move neuron i towards biased (b,g,r) by factor alpha\r\n  function altersingle(alpha, i, b, g, r) {\r\n\r\n    // alter hit neuron\r\n    var n = network[i];\r\n    var alphaMult = alpha / initalpha;\r\n    n[0] -= alphaMult * (n[0] - b) | 0;\r\n    n[1] -= alphaMult * (n[1] - g) | 0;\r\n    n[2] -= alphaMult * (n[2] - r) | 0;\r\n  }\r\n\r\n  // Search for biased BGR values\r\n  function contest(b, g, r) {\r\n\r\n    // finds closest neuron (min dist) and updates freq\r\n    // finds best neuron (min dist-bias) and returns position\r\n    // for frequently chosen neurons, freq[i] is high and bias[i] is negative\r\n    // bias[i] = gamma*((1/netsize)-freq[i])\r\n\r\n    var i;\r\n    var dist;\r\n    var a;\r\n    var biasdist;\r\n    var betafreq;\r\n    var bestpos;\r\n    var bestbiaspos;\r\n    var bestd;\r\n    var bestbiasd;\r\n    var n;\r\n\r\n    bestd = ~(1 << 31);\r\n    bestbiasd = bestd;\r\n    bestpos = -1;\r\n    bestbiaspos = bestpos;\r\n\r\n    for (i = 0; i < netsize; i++) {\r\n\r\n      n = network[i];\r\n      dist = n[0] - b;\r\n\r\n      if (dist < 0) {\r\n        dist = -dist;\r\n      }\r\n\r\n      a = n[1] - g;\r\n\r\n      if (a < 0) {\r\n        a = -a;\r\n      }\r\n\r\n      dist += a;\r\n\r\n      a = n[2] - r;\r\n\r\n      if (a < 0) {\r\n        a = -a;\r\n      }\r\n\r\n      dist += a;\r\n\r\n      if (dist < bestd) {\r\n        bestd = dist;\r\n        bestpos = i;\r\n      }\r\n\r\n      biasdist = dist - (bias[i] >> intbiasshift - netbiasshift);\r\n\r\n      if (biasdist < bestbiasd) {\r\n        bestbiasd = biasdist;\r\n        bestbiaspos = i;\r\n      }\r\n\r\n      betafreq = freq[i] >> betashift;\r\n      freq[i] -= betafreq;\r\n      bias[i] += betafreq << gammashift;\r\n    }\r\n\r\n    freq[bestpos] += beta;\r\n    bias[bestpos] -= betagamma;\r\n    return bestbiaspos;\r\n  }\r\n\r\n  NeuQuantConstructor.apply(this, arguments);\r\n\r\n  var exports = {};\r\n  exports.map = map;\r\n  exports.process = process;\r\n\r\n  return exports;\r\n}\r\n\r\n/*\r\n  processFrameWorker.js\r\n  =====================\r\n*/\r\n\r\n/* Copyright  2017 Yahoo Inc.\r\n * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.\r\n*/\r\n\r\nfunction workerCode() {\r\n    var self = this;\r\n\r\n    try {\r\n        self.onmessage = function (ev) {\r\n            var data = ev.data || {};\r\n            var response;\r\n\r\n            if (data.gifshot) {\r\n                response = workerMethods.run(data);\r\n                postMessage(response);\r\n            }\r\n        };\r\n    } catch (e) {}\r\n\r\n    var workerMethods = {\r\n        dataToRGB: function dataToRGB(data, width, height) {\r\n            var length = width * height * 4;\r\n            var i = 0;\r\n            var rgb = [];\r\n\r\n            while (i < length) {\r\n                rgb.push(data[i++]);\r\n                rgb.push(data[i++]);\r\n                rgb.push(data[i++]);\r\n                i++; // for the alpha channel which we don't care about\r\n            }\r\n\r\n            return rgb;\r\n        },\r\n        componentizedPaletteToArray: function componentizedPaletteToArray(paletteRGB) {\r\n            paletteRGB = paletteRGB || [];\r\n\r\n            var paletteArray = [];\r\n\r\n            for (var i = 0; i < paletteRGB.length; i += 3) {\r\n                var r = paletteRGB[i];\r\n                var g = paletteRGB[i + 1];\r\n                var b = paletteRGB[i + 2];\r\n\r\n                paletteArray.push(r << 16 | g << 8 | b);\r\n            }\r\n\r\n            return paletteArray;\r\n        },\r\n        // This is the \"traditional\" Animated_GIF style of going from RGBA to indexed color frames\r\n        'processFrameWithQuantizer': function processFrameWithQuantizer(imageData, width, height, sampleInterval) {\r\n            var rgbComponents = this.dataToRGB(imageData, width, height);\r\n            var nq = new NeuQuant(rgbComponents, rgbComponents.length, sampleInterval);\r\n            var paletteRGB = nq.process();\r\n            var paletteArray = new Uint32Array(this.componentizedPaletteToArray(paletteRGB));\r\n            var numberPixels = width * height;\r\n            var indexedPixels = new Uint8Array(numberPixels);\r\n            var k = 0;\r\n\r\n            for (var i = 0; i < numberPixels; i++) {\r\n                var r = rgbComponents[k++];\r\n                var g = rgbComponents[k++];\r\n                var b = rgbComponents[k++];\r\n\r\n                indexedPixels[i] = nq.map(r, g, b);\r\n            }\r\n\r\n            return {\r\n                pixels: indexedPixels,\r\n                palette: paletteArray\r\n            };\r\n        },\r\n        'run': function run(frame) {\r\n            frame = frame || {};\r\n\r\n            var _frame = frame,\r\n                height = _frame.height,\r\n                palette = _frame.palette,\r\n                sampleInterval = _frame.sampleInterval,\r\n                width = _frame.width;\r\n\r\n            var imageData = frame.data;\r\n\r\n            return this.processFrameWithQuantizer(imageData, width, height, sampleInterval);\r\n        }\r\n    };\r\n\r\n    return workerMethods;\r\n}\r\n\r\n/*\r\n  gifWriter.js\r\n  ============\r\n*/\r\n\r\n// (c) Dean McNamee <dean@gmail.com>, 2013.\r\n//\r\n// https://github.com/deanm/omggif\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to\r\n// deal in the Software without restriction, including without limitation the\r\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\n// sell copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\n// IN THE SOFTWARE.\r\n//\r\n// omggif is a JavaScript implementation of a GIF 89a encoder and decoder,\r\n// including animation and compression.  It does not rely on any specific\r\n// underlying system, so should run in the browser, Node, or Plask.\r\n\r\nfunction gifWriter(buf, width, height, gopts) {\r\n  var p = 0;\r\n\r\n  gopts = gopts === undefined ? {} : gopts;\r\n  var loop_count = gopts.loop === undefined ? null : gopts.loop;\r\n  var global_palette = gopts.palette === undefined ? null : gopts.palette;\r\n\r\n  if (width <= 0 || height <= 0 || width > 65535 || height > 65535) throw \"Width/Height invalid.\";\r\n\r\n  function check_palette_and_num_colors(palette) {\r\n    var num_colors = palette.length;\r\n\r\n    if (num_colors < 2 || num_colors > 256 || num_colors & num_colors - 1) throw \"Invalid code/color length, must be power of 2 and 2 .. 256.\";\r\n    return num_colors;\r\n  }\r\n\r\n  // - Header.\r\n  buf[p++] = 0x47;\r\n  buf[p++] = 0x49;\r\n  buf[p++] = 0x46; // GIF\r\n  buf[p++] = 0x38;\r\n  buf[p++] = 0x39;\r\n  buf[p++] = 0x61; // 89a\r\n\r\n  // Handling of Global Color Table (palette) and background index.\r\n  var gp_num_colors_pow2 = 0;\r\n  var background = 0;\r\n\r\n  // - Logical Screen Descriptor.\r\n  // NOTE(deanm): w/h apparently ignored by implementations, but set anyway.\r\n  buf[p++] = width & 0xff;\r\n  buf[p++] = width >> 8 & 0xff;\r\n  buf[p++] = height & 0xff;\r\n  buf[p++] = height >> 8 & 0xff;\r\n  // NOTE: Indicates 0-bpp original color resolution (unused?).\r\n  buf[p++] = (global_palette !== null ? 0x80 : 0) | // Global Color Table Flag.\r\n  gp_num_colors_pow2; // NOTE: No sort flag (unused?).\r\n  buf[p++] = background; // Background Color Index.\r\n  buf[p++] = 0; // Pixel aspect ratio (unused?).\r\n\r\n  if (loop_count !== null) {\r\n    // Netscape block for looping.\r\n    if (loop_count < 0 || loop_count > 65535) throw \"Loop count invalid.\";\r\n\r\n    // Extension code, label, and length.\r\n    buf[p++] = 0x21;\r\n    buf[p++] = 0xff;\r\n    buf[p++] = 0x0b;\r\n    // NETSCAPE2.0\r\n    buf[p++] = 0x4e;\r\n    buf[p++] = 0x45;\r\n    buf[p++] = 0x54;\r\n    buf[p++] = 0x53;\r\n    buf[p++] = 0x43;\r\n    buf[p++] = 0x41;\r\n    buf[p++] = 0x50;\r\n    buf[p++] = 0x45;\r\n    buf[p++] = 0x32;\r\n    buf[p++] = 0x2e;\r\n    buf[p++] = 0x30;\r\n    // Sub-block\r\n    buf[p++] = 0x03;\r\n    buf[p++] = 0x01;\r\n    buf[p++] = loop_count & 0xff;\r\n    buf[p++] = loop_count >> 8 & 0xff;\r\n    buf[p++] = 0x00; // Terminator.\r\n  }\r\n\r\n  var ended = false;\r\n\r\n  this.addFrame = function (x, y, w, h, indexed_pixels, opts) {\r\n    if (ended === true) {\r\n      --p;\r\n      ended = false;\r\n    } // Un-end.\r\n\r\n    opts = opts === undefined ? {} : opts;\r\n\r\n    // TODO(deanm): Bounds check x, y.  Do they need to be within the virtual\r\n    // canvas width/height, I imagine?\r\n    if (x < 0 || y < 0 || x > 65535 || y > 65535) throw \"x/y invalid.\";\r\n\r\n    if (w <= 0 || h <= 0 || w > 65535 || h > 65535) throw \"Width/Height invalid.\";\r\n\r\n    if (indexed_pixels.length < w * h) throw \"Not enough pixels for the frame size.\";\r\n\r\n    var using_local_palette = true;\r\n    var palette = opts.palette;\r\n    if (palette === undefined || palette === null) {\r\n      using_local_palette = false;\r\n      palette = global_palette;\r\n    }\r\n\r\n    if (palette === undefined || palette === null) throw \"Must supply either a local or global palette.\";\r\n\r\n    var num_colors = check_palette_and_num_colors(palette);\r\n\r\n    // Compute the min_code_size (power of 2), destroying num_colors.\r\n    var min_code_size = 0;\r\n    while (num_colors >>= 1) {\r\n      ++min_code_size;\r\n    }num_colors = 1 << min_code_size; // Now we can easily get it back.\r\n\r\n    var delay = opts.delay === undefined ? 0 : opts.delay;\r\n\r\n    // From the spec:\r\n    //     0 -   No disposal specified. The decoder is\r\n    //           not required to take any action.\r\n    //     1 -   Do not dispose. The graphic is to be left\r\n    //           in place.\r\n    //     2 -   Restore to background color. The area used by the\r\n    //           graphic must be restored to the background color.\r\n    //     3 -   Restore to previous. The decoder is required to\r\n    //           restore the area overwritten by the graphic with\r\n    //           what was there prior to rendering the graphic.\r\n    //  4-7 -    To be defined.\r\n    // NOTE(deanm): Dispose background doesn't really work, apparently most\r\n    // browsers ignore the background palette index and clear to transparency.\r\n    var disposal = opts.disposal === undefined ? 0 : opts.disposal;\r\n    if (disposal < 0 || disposal > 3) // 4-7 is reserved.\r\n      throw \"Disposal out of range.\";\r\n\r\n    var use_transparency = false;\r\n    var transparent_index = 0;\r\n    if (opts.transparent !== undefined && opts.transparent !== null) {\r\n      use_transparency = true;\r\n      transparent_index = opts.transparent;\r\n      if (transparent_index < 0 || transparent_index >= num_colors) throw \"Transparent color index.\";\r\n    }\r\n\r\n    if (disposal !== 0 || use_transparency || delay !== 0) {\r\n      // - Graphics Control Extension\r\n      buf[p++] = 0x21;\r\n      buf[p++] = 0xf9; // Extension / Label.\r\n      buf[p++] = 4; // Byte size.\r\n\r\n      buf[p++] = disposal << 2 | (use_transparency === true ? 1 : 0);\r\n      buf[p++] = delay & 0xff;\r\n      buf[p++] = delay >> 8 & 0xff;\r\n      buf[p++] = transparent_index; // Transparent color index.\r\n      buf[p++] = 0; // Block Terminator.\r\n    }\r\n\r\n    // - Image Descriptor\r\n    buf[p++] = 0x2c; // Image Seperator.\r\n    buf[p++] = x & 0xff;\r\n    buf[p++] = x >> 8 & 0xff; // Left.\r\n    buf[p++] = y & 0xff;\r\n    buf[p++] = y >> 8 & 0xff; // Top.\r\n    buf[p++] = w & 0xff;\r\n    buf[p++] = w >> 8 & 0xff;\r\n    buf[p++] = h & 0xff;\r\n    buf[p++] = h >> 8 & 0xff;\r\n    // NOTE: No sort flag (unused?).\r\n    // TODO(deanm): Support interlace.\r\n    buf[p++] = using_local_palette === true ? 0x80 | min_code_size - 1 : 0;\r\n\r\n    // - Local Color Table\r\n    if (using_local_palette === true) {\r\n      for (var i = 0, il = palette.length; i < il; ++i) {\r\n        var rgb = palette[i];\r\n        buf[p++] = rgb >> 16 & 0xff;\r\n        buf[p++] = rgb >> 8 & 0xff;\r\n        buf[p++] = rgb & 0xff;\r\n      }\r\n    }\r\n\r\n    p = GifWriterOutputLZWCodeStream(buf, p, min_code_size < 2 ? 2 : min_code_size, indexed_pixels);\r\n  };\r\n\r\n  this.end = function () {\r\n    if (ended === false) {\r\n      buf[p++] = 0x3b; // Trailer.\r\n      ended = true;\r\n    }\r\n    return p;\r\n  };\r\n\r\n  // Main compression routine, palette indexes -> LZW code stream.\r\n  // |index_stream| must have at least one entry.\r\n  function GifWriterOutputLZWCodeStream(buf, p, min_code_size, index_stream) {\r\n    buf[p++] = min_code_size;\r\n    var cur_subblock = p++; // Pointing at the length field.\r\n\r\n    var clear_code = 1 << min_code_size;\r\n    var code_mask = clear_code - 1;\r\n    var eoi_code = clear_code + 1;\r\n    var next_code = eoi_code + 1;\r\n\r\n    var cur_code_size = min_code_size + 1; // Number of bits per code.\r\n    var cur_shift = 0;\r\n    // We have at most 12-bit codes, so we should have to hold a max of 19\r\n    // bits here (and then we would write out).\r\n    var cur = 0;\r\n\r\n    function emit_bytes_to_buffer(bit_block_size) {\r\n      while (cur_shift >= bit_block_size) {\r\n        buf[p++] = cur & 0xff;\r\n        cur >>= 8;\r\n        cur_shift -= 8;\r\n        if (p === cur_subblock + 256) {\r\n          // Finished a subblock.\r\n          buf[cur_subblock] = 255;\r\n          cur_subblock = p++;\r\n        }\r\n      }\r\n    }\r\n\r\n    function emit_code(c) {\r\n      cur |= c << cur_shift;\r\n      cur_shift += cur_code_size;\r\n      emit_bytes_to_buffer(8);\r\n    }\r\n\r\n    // I am not an expert on the topic, and I don't want to write a thesis.\r\n    // However, it is good to outline here the basic algorithm and the few data\r\n    // structures and optimizations here that make this implementation fast.\r\n    // The basic idea behind LZW is to build a table of previously seen runs\r\n    // addressed by a short id (herein called output code).  All data is\r\n    // referenced by a code, which represents one or more values from the\r\n    // original input stream.  All input bytes can be referenced as the same\r\n    // value as an output code.  So if you didn't want any compression, you\r\n    // could more or less just output the original bytes as codes (there are\r\n    // some details to this, but it is the idea).  In order to achieve\r\n    // compression, values greater then the input range (codes can be up to\r\n    // 12-bit while input only 8-bit) represent a sequence of previously seen\r\n    // inputs.  The decompressor is able to build the same mapping while\r\n    // decoding, so there is always a shared common knowledge between the\r\n    // encoding and decoder, which is also important for \"timing\" aspects like\r\n    // how to handle variable bit width code encoding.\r\n    //\r\n    // One obvious but very important consequence of the table system is there\r\n    // is always a unique id (at most 12-bits) to map the runs.  'A' might be\r\n    // 4, then 'AA' might be 10, 'AAA' 11, 'AAAA' 12, etc.  This relationship\r\n    // can be used for an effecient lookup strategy for the code mapping.  We\r\n    // need to know if a run has been seen before, and be able to map that run\r\n    // to the output code.  Since we start with known unique ids (input bytes),\r\n    // and then from those build more unique ids (table entries), we can\r\n    // continue this chain (almost like a linked list) to always have small\r\n    // integer values that represent the current byte chains in the encoder.\r\n    // This means instead of tracking the input bytes (AAAABCD) to know our\r\n    // current state, we can track the table entry for AAAABC (it is guaranteed\r\n    // to exist by the nature of the algorithm) and the next character D.\r\n    // Therefor the tuple of (table_entry, byte) is guaranteed to also be\r\n    // unique.  This allows us to create a simple lookup key for mapping input\r\n    // sequences to codes (table indices) without having to store or search\r\n    // any of the code sequences.  So if 'AAAA' has a table entry of 12, the\r\n    // tuple of ('AAAA', K) for any input byte K will be unique, and can be our\r\n    // key.  This leads to a integer value at most 20-bits, which can always\r\n    // fit in an SMI value and be used as a fast sparse array / object key.\r\n\r\n    // Output code for the current contents of the index buffer.\r\n    var ib_code = index_stream[0] & code_mask; // Load first input index.\r\n    var code_table = {}; // Key'd on our 20-bit \"tuple\".\r\n\r\n    emit_code(clear_code); // Spec says first code should be a clear code.\r\n\r\n    // First index already loaded, process the rest of the stream.\r\n    for (var i = 1, il = index_stream.length; i < il; ++i) {\r\n      var k = index_stream[i] & code_mask;\r\n      var cur_key = ib_code << 8 | k; // (prev, k) unique tuple.\r\n      var cur_code = code_table[cur_key]; // buffer + k.\r\n\r\n      // Check if we have to create a new code table entry.\r\n      if (cur_code === undefined) {\r\n        // We don't have buffer + k.\r\n        // Emit index buffer (without k).\r\n        // This is an inline version of emit_code, because this is the core\r\n        // writing routine of the compressor (and V8 cannot inline emit_code\r\n        // because it is a closure here in a different context).  Additionally\r\n        // we can call emit_byte_to_buffer less often, because we can have\r\n        // 30-bits (from our 31-bit signed SMI), and we know our codes will only\r\n        // be 12-bits, so can safely have 18-bits there without overflow.\r\n        // emit_code(ib_code);\r\n        cur |= ib_code << cur_shift;\r\n        cur_shift += cur_code_size;\r\n        while (cur_shift >= 8) {\r\n          buf[p++] = cur & 0xff;\r\n          cur >>= 8;\r\n          cur_shift -= 8;\r\n          if (p === cur_subblock + 256) {\r\n            // Finished a subblock.\r\n            buf[cur_subblock] = 255;\r\n            cur_subblock = p++;\r\n          }\r\n        }\r\n\r\n        if (next_code === 4096) {\r\n          // Table full, need a clear.\r\n          emit_code(clear_code);\r\n          next_code = eoi_code + 1;\r\n          cur_code_size = min_code_size + 1;\r\n          code_table = {};\r\n        } else {\r\n          // Table not full, insert a new entry.\r\n          // Increase our variable bit code sizes if necessary.  This is a bit\r\n          // tricky as it is based on \"timing\" between the encoding and\r\n          // decoder.  From the encoders perspective this should happen after\r\n          // we've already emitted the index buffer and are about to create the\r\n          // first table entry that would overflow our current code bit size.\r\n          if (next_code >= 1 << cur_code_size) ++cur_code_size;\r\n          code_table[cur_key] = next_code++; // Insert into code table.\r\n        }\r\n\r\n        ib_code = k; // Index buffer to single input k.\r\n      } else {\r\n        ib_code = cur_code; // Index buffer to sequence in code table.\r\n      }\r\n    }\r\n\r\n    emit_code(ib_code); // There will still be something in the index buffer.\r\n    emit_code(eoi_code); // End Of Information.\r\n\r\n    // Flush / finalize the sub-blocks stream to the buffer.\r\n    emit_bytes_to_buffer(1);\r\n\r\n    // Finish the sub-blocks, writing out any unfinished lengths and\r\n    // terminating with a sub-block of length 0.  If we have already started\r\n    // but not yet used a sub-block it can just become the terminator.\r\n    if (cur_subblock + 1 === p) {\r\n      // Started but unused.\r\n      buf[cur_subblock] = 0;\r\n    } else {\r\n      // Started and used, write length and additional terminator block.\r\n      buf[cur_subblock] = p - cur_subblock - 1;\r\n      buf[p++] = 0;\r\n    }\r\n    return p;\r\n  }\r\n}\r\n\r\n/*\r\n  animatedGIF.js\r\n  ==============\r\n*/\r\n\r\n/* Copyright  2017 Yahoo Inc.\r\n * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.\r\n*/\r\n\r\n// Dependencies\r\n// Helpers\r\nvar noop$2 = function noop() {};\r\n\r\nvar AnimatedGIF = function AnimatedGIF(options) {\r\n    this.canvas = null;\r\n    this.ctx = null;\r\n    this.repeat = 0;\r\n    this.frames = [];\r\n    this.numRenderedFrames = 0;\r\n    this.onRenderCompleteCallback = noop$2;\r\n    this.onRenderProgressCallback = noop$2;\r\n    this.workers = [];\r\n    this.availableWorkers = [];\r\n    this.generatingGIF = false;\r\n    this.options = options;\r\n\r\n    // Constructs and initializes the the web workers appropriately\r\n    this.initializeWebWorkers(options);\r\n};\r\n\r\nAnimatedGIF.prototype = {\r\n    'workerMethods': workerCode(),\r\n    'initializeWebWorkers': function initializeWebWorkers(options) {\r\n        var self = this;\r\n        var processFrameWorkerCode = NeuQuant.toString() + '(' + workerCode.toString() + '());';\r\n        var webWorkerObj = void 0;\r\n        var objectUrl = void 0;\r\n        var webWorker = void 0;\r\n        var numWorkers = void 0;\r\n        var x = -1;\r\n        var workerError = '';\r\n\r\n        numWorkers = options.numWorkers;\r\n\r\n        while (++x < numWorkers) {\r\n            webWorkerObj = utils.createWebWorker(processFrameWorkerCode);\r\n\r\n            if (utils.isObject(webWorkerObj)) {\r\n                objectUrl = webWorkerObj.objectUrl;\r\n                webWorker = webWorkerObj.worker;\r\n\r\n                self.workers.push({\r\n                    worker: webWorker,\r\n                    objectUrl: objectUrl\r\n                });\r\n\r\n                self.availableWorkers.push(webWorker);\r\n            } else {\r\n                workerError = webWorkerObj;\r\n                utils.webWorkerError = !!webWorkerObj;\r\n            }\r\n        }\r\n\r\n        this.workerError = workerError;\r\n        this.canvas = document.createElement('canvas');\r\n        this.canvas.width = options.gifWidth;\r\n        this.canvas.height = options.gifHeight;\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.frames = [];\r\n    },\r\n    // Return a worker for processing a frame\r\n    getWorker: function getWorker() {\r\n        return this.availableWorkers.pop();\r\n    },\r\n    // Restores a worker to the pool\r\n    freeWorker: function freeWorker(worker) {\r\n        this.availableWorkers.push(worker);\r\n    },\r\n    byteMap: function () {\r\n        var byteMap = [];\r\n\r\n        for (var i = 0; i < 256; i++) {\r\n            byteMap[i] = String.fromCharCode(i);\r\n        }\r\n\r\n        return byteMap;\r\n    }(),\r\n    bufferToString: function bufferToString(buffer) {\r\n        var numberValues = buffer.length;\r\n        var str = '';\r\n        var x = -1;\r\n\r\n        while (++x < numberValues) {\r\n            str += this.byteMap[buffer[x]];\r\n        }\r\n\r\n        return str;\r\n    },\r\n    onFrameFinished: function onFrameFinished(progressCallback) {\r\n        // The GIF is not written until we're done with all the frames\r\n        // because they might not be processed in the same order\r\n        var self = this;\r\n        var frames = self.frames;\r\n        var options = self.options;\r\n        var hasExistingImages = !!(options.images || []).length;\r\n        var allDone = frames.every(function (frame) {\r\n            return !frame.beingProcessed && frame.done;\r\n        });\r\n\r\n        self.numRenderedFrames++;\r\n\r\n        if (hasExistingImages) {\r\n            progressCallback(self.numRenderedFrames / frames.length);\r\n        }\r\n\r\n        self.onRenderProgressCallback(self.numRenderedFrames * 0.75 / frames.length);\r\n\r\n        if (allDone) {\r\n            if (!self.generatingGIF) {\r\n                self.generateGIF(frames, self.onRenderCompleteCallback);\r\n            }\r\n        } else {\r\n            utils.requestTimeout(function () {\r\n                self.processNextFrame();\r\n            }, 1);\r\n        }\r\n    },\r\n    processFrame: function processFrame(position) {\r\n        var AnimatedGifContext = this;\r\n        var options = this.options;\r\n        var _options = this.options,\r\n            progressCallback = _options.progressCallback,\r\n            sampleInterval = _options.sampleInterval;\r\n\r\n        var frames = this.frames;\r\n        var frame = void 0;\r\n        var worker = void 0;\r\n        var done = function done() {\r\n            var ev = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n\r\n            var data = ev.data;\r\n\r\n            // Delete original data, and free memory\r\n            delete frame.data;\r\n\r\n            frame.pixels = Array.prototype.slice.call(data.pixels);\r\n            frame.palette = Array.prototype.slice.call(data.palette);\r\n            frame.done = true;\r\n            frame.beingProcessed = false;\r\n\r\n            AnimatedGifContext.freeWorker(worker);\r\n\r\n            AnimatedGifContext.onFrameFinished(progressCallback);\r\n        };\r\n\r\n        frame = frames[position];\r\n\r\n        if (frame.beingProcessed || frame.done) {\r\n            this.onFrameFinished();\r\n\r\n            return;\r\n        }\r\n\r\n        frame.sampleInterval = sampleInterval;\r\n        frame.beingProcessed = true;\r\n        frame.gifshot = true;\r\n\r\n        worker = this.getWorker();\r\n\r\n        if (worker) {\r\n            // Process the frame in a web worker\r\n            worker.onmessage = done;\r\n            worker.postMessage(frame);\r\n        } else {\r\n            // Process the frame in the current thread\r\n            done({\r\n                'data': AnimatedGifContext.workerMethods.run(frame)\r\n            });\r\n        }\r\n    },\r\n    startRendering: function startRendering(completeCallback) {\r\n        this.onRenderCompleteCallback = completeCallback;\r\n\r\n        for (var i = 0; i < this.options.numWorkers && i < this.frames.length; i++) {\r\n            this.processFrame(i);\r\n        }\r\n    },\r\n    processNextFrame: function processNextFrame() {\r\n        var position = -1;\r\n\r\n        for (var i = 0; i < this.frames.length; i++) {\r\n            var frame = this.frames[i];\r\n\r\n            if (!frame.done && !frame.beingProcessed) {\r\n                position = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (position >= 0) {\r\n            this.processFrame(position);\r\n        }\r\n    },\r\n    // Takes the already processed data in frames and feeds it to a new\r\n    // GifWriter instance in order to get the binary GIF file\r\n    generateGIF: function generateGIF(frames, callback) {\r\n        // TODO: Weird: using a simple JS array instead of a typed array,\r\n        // the files are WAY smaller o_o. Patches/explanations welcome!\r\n        var buffer = []; // new Uint8Array(width * height * frames.length * 5);\r\n        var gifOptions = {\r\n            loop: this.repeat\r\n        };\r\n        var options = this.options;\r\n        var interval = options.interval;\r\n\r\n        var frameDuration = options.frameDuration;\r\n        var existingImages = options.images;\r\n        var hasExistingImages = !!existingImages.length;\r\n        var height = options.gifHeight;\r\n        var width = options.gifWidth;\r\n        var gifWriter$$1 = new gifWriter(buffer, width, height, gifOptions);\r\n        var onRenderProgressCallback = this.onRenderProgressCallback;\r\n        var delay = hasExistingImages ? interval * 100 : 0;\r\n        var bufferToString = void 0;\r\n        var gif = void 0;\r\n\r\n        this.generatingGIF = true;\r\n\r\n        utils.each(frames, function (iterator, frame) {\r\n            var framePalette = frame.palette;\r\n\r\n            onRenderProgressCallback(0.75 + 0.25 * frame.position * 1.0 / frames.length);\r\n\r\n            for (var i = 0; i < frameDuration; i++) {\r\n                gifWriter$$1.addFrame(0, 0, width, height, frame.pixels, {\r\n                    palette: framePalette,\r\n                    delay: delay\r\n                });\r\n            }\r\n        });\r\n\r\n        gifWriter$$1.end();\r\n\r\n        onRenderProgressCallback(1.0);\r\n\r\n        this.frames = [];\r\n\r\n        this.generatingGIF = false;\r\n\r\n        if (utils.isFunction(callback)) {\r\n            bufferToString = this.bufferToString(buffer);\r\n            gif = 'data:image/gif;base64,' + utils.btoa(bufferToString);\r\n\r\n            callback(gif);\r\n        }\r\n    },\r\n    // From GIF: 0 = loop forever, null = not looping, n > 0 = loop n times and stop\r\n    setRepeat: function setRepeat(r) {\r\n        this.repeat = r;\r\n    },\r\n    addFrame: function addFrame(element, gifshotOptions, frameText) {\r\n        gifshotOptions = utils.isObject(gifshotOptions) ? gifshotOptions : {};\r\n\r\n        var self = this;\r\n        var ctx = self.ctx;\r\n        var options = self.options;\r\n        var width = options.gifWidth;\r\n        var height = options.gifHeight;\r\n        var fontSize = utils.getFontSize(gifshotOptions);\r\n        var _gifshotOptions = gifshotOptions,\r\n            filter = _gifshotOptions.filter,\r\n            fontColor = _gifshotOptions.fontColor,\r\n            fontFamily = _gifshotOptions.fontFamily,\r\n            fontWeight = _gifshotOptions.fontWeight,\r\n            gifHeight = _gifshotOptions.gifHeight,\r\n            gifWidth = _gifshotOptions.gifWidth,\r\n            text = _gifshotOptions.text,\r\n            textAlign = _gifshotOptions.textAlign,\r\n            textBaseline = _gifshotOptions.textBaseline,\r\n            waterMark = _gifshotOptions.waterMark,\r\n            waterMarkHeight = _gifshotOptions.waterMarkHeight,\r\n            waterMarkWidth = _gifshotOptions.waterMarkWidth,\r\n            waterMarkXCoordinate = _gifshotOptions.waterMarkXCoordinate,\r\n            waterMarkYCoordinate = _gifshotOptions.waterMarkYCoordinate;\r\n\r\n        var textXCoordinate = gifshotOptions.textXCoordinate ? gifshotOptions.textXCoordinate : textAlign === 'left' ? 1 : textAlign === 'right' ? width : width / 2;\r\n        var textYCoordinate = gifshotOptions.textYCoordinate ? gifshotOptions.textYCoordinate : textBaseline === 'top' ? 1 : textBaseline === 'center' ? height / 2 : height;\r\n        var font = fontWeight + ' ' + fontSize + ' ' + fontFamily;\r\n        var textToUse = frameText && gifshotOptions.showFrameText ? frameText : text;\r\n        var imageData = void 0;\r\n\r\n        try {\r\n            ctx.filter = filter;\r\n\r\n            ctx.drawImage(element, 0, 0, width, height);\r\n\r\n            if (textToUse) {\r\n                ctx.font = font;\r\n                ctx.fillStyle = fontColor;\r\n                ctx.textAlign = textAlign;\r\n                ctx.textBaseline = textBaseline;\r\n                ctx.fillText(textToUse, textXCoordinate, textYCoordinate);\r\n            }\r\n            if (waterMark) {\r\n                ctx.drawImage(waterMark, waterMarkXCoordinate, waterMarkYCoordinate, waterMarkWidth, waterMarkHeight);\r\n            }\r\n            imageData = ctx.getImageData(0, 0, width, height);\r\n\r\n            self.addFrameImageData(imageData);\r\n        } catch (e) {\r\n            return '' + e;\r\n        }\r\n    },\r\n    addFrameImageData: function addFrameImageData() {\r\n        var imageData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n\r\n        var frames = this.frames;\r\n        var imageDataArray = imageData.data;\r\n\r\n        this.frames.push({\r\n            'data': imageDataArray,\r\n            'width': imageData.width,\r\n            'height': imageData.height,\r\n            'palette': null,\r\n            'dithering': null,\r\n            'done': false,\r\n            'beingProcessed': false,\r\n            'position': frames.length\r\n        });\r\n    },\r\n    onRenderProgress: function onRenderProgress(callback) {\r\n        this.onRenderProgressCallback = callback;\r\n    },\r\n    isRendering: function isRendering() {\r\n        return this.generatingGIF;\r\n    },\r\n    getBase64GIF: function getBase64GIF(completeCallback) {\r\n        var self = this;\r\n        var onRenderComplete = function onRenderComplete(gif) {\r\n            self.destroyWorkers();\r\n\r\n            utils.requestTimeout(function () {\r\n                completeCallback(gif);\r\n            }, 0);\r\n        };\r\n\r\n        self.startRendering(onRenderComplete);\r\n    },\r\n    destroyWorkers: function destroyWorkers() {\r\n        if (this.workerError) {\r\n            return;\r\n        }\r\n\r\n        var workers = this.workers;\r\n\r\n        // Explicitly ask web workers to die so they are explicitly GC'ed\r\n        utils.each(workers, function (iterator, workerObj) {\r\n            var worker = workerObj.worker;\r\n            var objectUrl = workerObj.objectUrl;\r\n\r\n            worker.terminate();\r\n            utils.URL.revokeObjectURL(objectUrl);\r\n        });\r\n    }\r\n};\r\n\r\n/*\r\n  getBase64GIF.js\r\n  ===============\r\n*/\r\n\r\n/* Copyright  2017 Yahoo Inc.\r\n * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.\r\n*/\r\n\r\nfunction getBase64GIF(animatedGifInstance, callback) {\r\n    // This is asynchronous, rendered with WebWorkers\r\n    animatedGifInstance.getBase64GIF(function (image) {\r\n        callback({\r\n            error: false,\r\n            errorCode: '',\r\n            errorMsg: '',\r\n            image: image\r\n        });\r\n    });\r\n}\r\n\r\n/*\r\n  existingImages.js\r\n  =================\r\n*/\r\n\r\n/* Copyright  2017 Yahoo Inc.\r\n * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.\r\n*/\r\n\r\nfunction existingImages() {\r\n    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n\r\n    var self = this;\r\n    var callback = obj.callback,\r\n        images = obj.images,\r\n        options = obj.options;\r\n\r\n    var imagesLength = obj.imagesLength;\r\n    var skipObj = {\r\n        'getUserMedia': true,\r\n        'window.URL': true\r\n    };\r\n    var errorObj = error.validate(skipObj);\r\n    var loadedImages = [];\r\n    var loadedImagesLength = 0;\r\n    var tempImage = void 0;\r\n    var ag = void 0;\r\n\r\n    if (errorObj.error) {\r\n        return callback(errorObj);\r\n    }\r\n\r\n    // change workerPath to point to where Animated_GIF.worker.js is\r\n    ag = new AnimatedGIF(options);\r\n\r\n    utils.each(images, function (index, image) {\r\n        var currentImage = image;\r\n\r\n        if (image.src) {\r\n            currentImage = currentImage.src;\r\n        }\r\n        if (utils.isElement(currentImage)) {\r\n            if (options.crossOrigin) {\r\n                currentImage.crossOrigin = options.crossOrigin;\r\n            }\r\n\r\n            loadedImages[index] = currentImage;\r\n            loadedImagesLength += 1;\r\n\r\n            if (loadedImagesLength === imagesLength) {\r\n                addLoadedImagesToGif();\r\n            }\r\n        } else if (utils.isString(currentImage)) {\r\n            tempImage = new Image();\r\n\r\n            if (options.crossOrigin) {\r\n                tempImage.crossOrigin = options.crossOrigin;\r\n            }\r\n\r\n            (function (tempImage) {\r\n                if (image.text) {\r\n                    tempImage.text = image.text;\r\n                }\r\n\r\n                tempImage.onerror = function (e) {\r\n                    var obj = void 0;\r\n\r\n                    --imagesLength; // skips over images that error out\r\n\r\n                    if (imagesLength === 0) {\r\n                        obj = {};\r\n                        obj.error = 'None of the requested images was capable of being retrieved';\r\n\r\n                        return callback(obj);\r\n                    }\r\n                };\r\n\r\n                tempImage.onload = function (e) {\r\n                    if (image.text) {\r\n                        loadedImages[index] = {\r\n                            img: tempImage,\r\n                            text: tempImage.text\r\n                        };\r\n                    } else {\r\n                        loadedImages[index] = tempImage;\r\n                    }\r\n\r\n                    loadedImagesLength += 1;\r\n\r\n                    if (loadedImagesLength === imagesLength) {\r\n                        addLoadedImagesToGif();\r\n                    }\r\n\r\n                    utils.removeElement(tempImage);\r\n                };\r\n\r\n                tempImage.src = currentImage;\r\n            })(tempImage);\r\n\r\n            utils.setCSSAttr(tempImage, {\r\n                position: 'fixed',\r\n                opacity: '0'\r\n            });\r\n\r\n            document.body.appendChild(tempImage);\r\n        }\r\n    });\r\n\r\n    function addLoadedImagesToGif() {\r\n        utils.each(loadedImages, function (index, loadedImage) {\r\n            if (loadedImage) {\r\n                if (loadedImage.text) {\r\n                    ag.addFrame(loadedImage.img, options, loadedImage.text);\r\n                } else {\r\n                    ag.addFrame(loadedImage, options);\r\n                }\r\n            }\r\n        });\r\n\r\n        getBase64GIF(ag, callback);\r\n    }\r\n}\r\n\r\n/*\r\n  screenShot.js\r\n  =============\r\n*/\r\n\r\n/* Copyright  2017 Yahoo Inc.\r\n * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.\r\n*/\r\n\r\n// Dependencies\r\n// Helpers\r\nvar noop$3 = function noop() {};\r\n\r\nvar screenShot = {\r\n    getGIF: function getGIF() {\r\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n        var callback = arguments[1];\r\n\r\n        callback = utils.isFunction(callback) ? callback : noop$3;\r\n\r\n        var canvas = document.createElement('canvas');\r\n        var context = void 0;\r\n        var existingImages = options.images;\r\n        var hasExistingImages = !!existingImages.length;\r\n        var cameraStream = options.cameraStream,\r\n            crop = options.crop,\r\n            filter = options.filter,\r\n            fontColor = options.fontColor,\r\n            fontFamily = options.fontFamily,\r\n            fontWeight = options.fontWeight,\r\n            keepCameraOn = options.keepCameraOn,\r\n            numWorkers = options.numWorkers,\r\n            progressCallback = options.progressCallback,\r\n            saveRenderingContexts = options.saveRenderingContexts,\r\n            savedRenderingContexts = options.savedRenderingContexts,\r\n            text = options.text,\r\n            textAlign = options.textAlign,\r\n            textBaseline = options.textBaseline,\r\n            videoElement = options.videoElement,\r\n            videoHeight = options.videoHeight,\r\n            videoWidth = options.videoWidth,\r\n            webcamVideoElement = options.webcamVideoElement,\r\n            waterMark = options.waterMark,\r\n            waterMarkHeight = options.waterMarkHeight,\r\n            waterMarkWidth = options.waterMarkWidth,\r\n            waterMarkXCoordinate = options.waterMarkXCoordinate,\r\n            waterMarkYCoordinate = options.waterMarkYCoordinate;\r\n\r\n        var gifWidth = Number(options.gifWidth);\r\n        var gifHeight = Number(options.gifHeight);\r\n        var interval = Number(options.interval);\r\n        var sampleInterval = Number(options.sampleInterval);\r\n        var waitBetweenFrames = hasExistingImages ? 0 : interval * 1000;\r\n        var renderingContextsToSave = [];\r\n        var numFrames = savedRenderingContexts.length ? savedRenderingContexts.length : options.numFrames;\r\n        var pendingFrames = numFrames;\r\n        var ag = new AnimatedGIF(options);\r\n        var fontSize = utils.getFontSize(options);\r\n        var textXCoordinate = options.textXCoordinate ? options.textXCoordinate : textAlign === 'left' ? 1 : textAlign === 'right' ? gifWidth : gifWidth / 2;\r\n        var textYCoordinate = options.textYCoordinate ? options.textYCoordinate : textBaseline === 'top' ? 1 : textBaseline === 'center' ? gifHeight / 2 : gifHeight;\r\n        var font = fontWeight + ' ' + fontSize + ' ' + fontFamily;\r\n        var sourceX = crop ? Math.floor(crop.scaledWidth / 2) : 0;\r\n        var sourceWidth = crop ? videoWidth - crop.scaledWidth : 0;\r\n        var sourceY = crop ? Math.floor(crop.scaledHeight / 2) : 0;\r\n        var sourceHeight = crop ? videoHeight - crop.scaledHeight : 0;\r\n        var captureFrames = function captureSingleFrame() {\r\n            var framesLeft = pendingFrames - 1;\r\n\r\n            if (savedRenderingContexts.length) {\r\n                context.putImageData(savedRenderingContexts[numFrames - pendingFrames], 0, 0);\r\n\r\n                finishCapture();\r\n            } else {\r\n                drawVideo();\r\n            }\r\n\r\n            function drawVideo() {\r\n                try {\r\n                    // Makes sure the canvas video heights/widths are in bounds\r\n                    if (sourceWidth > videoWidth) {\r\n                        sourceWidth = videoWidth;\r\n                    }\r\n\r\n                    if (sourceHeight > videoHeight) {\r\n                        sourceHeight = videoHeight;\r\n                    }\r\n\r\n                    if (sourceX < 0) {\r\n                        sourceX = 0;\r\n                    }\r\n\r\n                    if (sourceY < 0) {\r\n                        sourceY = 0;\r\n                    }\r\n\r\n                    context.filter = filter;\r\n\r\n                    context.drawImage(videoElement, sourceX, sourceY, sourceWidth, sourceHeight, 0, 0, gifWidth, gifHeight);\r\n\r\n                    finishCapture();\r\n                } catch (e) {\r\n                    // There is a Firefox bug that sometimes throws NS_ERROR_NOT_AVAILABLE and\r\n                    // and IndexSizeError errors when drawing a video element to the canvas\r\n                    if (e.name === 'NS_ERROR_NOT_AVAILABLE') {\r\n                        // Wait 100ms before trying again\r\n                        utils.requestTimeout(drawVideo, 100);\r\n                    } else {\r\n                        throw e;\r\n                    }\r\n                }\r\n            }\r\n\r\n            function finishCapture() {\r\n                var imageData = void 0;\r\n\r\n                if (saveRenderingContexts) {\r\n                    renderingContextsToSave.push(context.getImageData(0, 0, gifWidth, gifHeight));\r\n                }\r\n                if (waterMark) {\r\n                    context.drawImage(waterMark, waterMarkXCoordinate, waterMarkYCoordinate, waterMarkWidth, waterMarkHeight);\r\n                }\r\n                // If there is text to display, make sure to display it on the canvas after the image is drawn\r\n                if (text) {\r\n                    context.font = font;\r\n                    context.fillStyle = fontColor;\r\n                    context.textAlign = textAlign;\r\n                    context.textBaseline = textBaseline;\r\n                    context.fillText(text, textXCoordinate, textYCoordinate);\r\n                }\r\n\r\n                imageData = context.getImageData(0, 0, gifWidth, gifHeight);\r\n\r\n                ag.addFrameImageData(imageData);\r\n\r\n                pendingFrames = framesLeft;\r\n\r\n                // Call back with an r value indicating how far along we are in capture\r\n                progressCallback((numFrames - pendingFrames) / numFrames);\r\n\r\n                if (framesLeft > 0) {\r\n                    // test\r\n                    utils.requestTimeout(captureSingleFrame, waitBetweenFrames);\r\n                }\r\n\r\n                if (!pendingFrames) {\r\n                    ag.getBase64GIF(function (image) {\r\n                        callback({\r\n                            'error': false,\r\n                            'errorCode': '',\r\n                            'errorMsg': '',\r\n                            'image': image,\r\n                            'cameraStream': cameraStream,\r\n                            'videoElement': videoElement,\r\n                            'webcamVideoElement': webcamVideoElement,\r\n                            'savedRenderingContexts': renderingContextsToSave,\r\n                            'keepCameraOn': keepCameraOn\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        numFrames = numFrames !== undefined ? numFrames : 10;\r\n        interval = interval !== undefined ? interval : 0.1; // In seconds\r\n\r\n        canvas.width = gifWidth;\r\n        canvas.height = gifHeight;\r\n        context = canvas.getContext('2d');\r\n\r\n        (function capture() {\r\n            if (!savedRenderingContexts.length && videoElement.currentTime === 0) {\r\n                utils.requestTimeout(capture, 100);\r\n\r\n                return;\r\n            }\r\n\r\n            captureFrames();\r\n        })();\r\n    },\r\n    getCropDimensions: function getCropDimensions() {\r\n        var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n\r\n        var width = obj.videoWidth;\r\n        var height = obj.videoHeight;\r\n        var gifWidth = obj.gifWidth;\r\n        var gifHeight = obj.gifHeight;\r\n        var result = {\r\n            width: 0,\r\n            height: 0,\r\n            scaledWidth: 0,\r\n            scaledHeight: 0\r\n        };\r\n\r\n        if (width > height) {\r\n            result.width = Math.round(width * (gifHeight / height)) - gifWidth;\r\n            result.scaledWidth = Math.round(result.width * (height / gifHeight));\r\n        } else {\r\n            result.height = Math.round(height * (gifWidth / width)) - gifHeight;\r\n            result.scaledHeight = Math.round(result.height * (width / gifWidth));\r\n        }\r\n\r\n        return result;\r\n    }\r\n};\r\n\r\n/*\r\n  videoStream.js\r\n  ==============\r\n*/\r\n\r\n/* Copyright  2017 Yahoo Inc.\r\n * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.\r\n*/\r\n\r\n// Dependencies\r\nvar videoStream = {\r\n    loadedData: false,\r\n    defaultVideoDimensions: {\r\n        width: 640,\r\n        height: 480\r\n    },\r\n    findVideoSize: function findVideoSizeMethod(obj) {\r\n        findVideoSizeMethod.attempts = findVideoSizeMethod.attempts || 0;\r\n\r\n        var cameraStream = obj.cameraStream,\r\n            completedCallback = obj.completedCallback,\r\n            videoElement = obj.videoElement;\r\n\r\n\r\n        if (!videoElement) {\r\n            return;\r\n        }\r\n\r\n        if (videoElement.videoWidth > 0 && videoElement.videoHeight > 0) {\r\n            videoElement.removeEventListener('loadeddata', videoStream.findVideoSize);\r\n\r\n            completedCallback({\r\n                videoElement: videoElement,\r\n                cameraStream: cameraStream,\r\n                videoWidth: videoElement.videoWidth,\r\n                videoHeight: videoElement.videoHeight\r\n            });\r\n        } else {\r\n            if (findVideoSizeMethod.attempts < 10) {\r\n                findVideoSizeMethod.attempts += 1;\r\n\r\n                utils.requestTimeout(function () {\r\n                    videoStream.findVideoSize(obj);\r\n                }, 400);\r\n            } else {\r\n                completedCallback({\r\n                    videoElement: videoElement,\r\n                    cameraStream: cameraStream,\r\n                    videoWidth: videoStream.defaultVideoDimensions.width,\r\n                    videoHeight: videoStream.defaultVideoDimensions.height\r\n                });\r\n            }\r\n        }\r\n    },\r\n    onStreamingTimeout: function onStreamingTimeout(callback) {\r\n        if (utils.isFunction(callback)) {\r\n            callback({\r\n                error: true,\r\n                errorCode: 'getUserMedia',\r\n                errorMsg: 'There was an issue with the getUserMedia API - Timed out while trying to start streaming',\r\n                image: null,\r\n                cameraStream: {}\r\n            });\r\n        }\r\n    },\r\n    stream: function stream(obj) {\r\n        var existingVideo = utils.isArray(obj.existingVideo) ? obj.existingVideo[0] : obj.existingVideo;\r\n        var cameraStream = obj.cameraStream,\r\n            completedCallback = obj.completedCallback,\r\n            streamedCallback = obj.streamedCallback,\r\n            videoElement = obj.videoElement;\r\n\r\n\r\n        if (utils.isFunction(streamedCallback)) {\r\n            streamedCallback();\r\n        }\r\n\r\n        if (existingVideo) {\r\n            if (utils.isString(existingVideo)) {\r\n                videoElement.src = existingVideo;\r\n                videoElement.innerHTML = '<source src=\"' + existingVideo + '\" type=\"video/' + utils.getExtension(existingVideo) + '\" />';\r\n            } else if (existingVideo instanceof Blob) {\r\n                try {\r\n                    videoElement.src = utils.URL.createObjectURL(existingVideo);\r\n                } catch (e) {}\r\n\r\n                videoElement.innerHTML = '<source src=\"' + existingVideo + '\" type=\"' + existingVideo.type + '\" />';\r\n            }\r\n        } else if (videoElement.mozSrcObject) {\r\n            videoElement.mozSrcObject = cameraStream;\r\n        } else if (utils.URL) {\r\n            try {\r\n                videoElement.srcObject = cameraStream;\r\n                videoElement.src = utils.URL.createObjectURL(cameraStream);\r\n            } catch (e) {\r\n                videoElement.srcObject = cameraStream;\r\n            }\r\n        }\r\n\r\n        videoElement.play();\r\n\r\n        utils.requestTimeout(function checkLoadedData() {\r\n            checkLoadedData.count = checkLoadedData.count || 0;\r\n\r\n            if (videoStream.loadedData === true) {\r\n                videoStream.findVideoSize({\r\n                    videoElement: videoElement,\r\n                    cameraStream: cameraStream,\r\n                    completedCallback: completedCallback\r\n                });\r\n\r\n                videoStream.loadedData = false;\r\n            } else {\r\n                checkLoadedData.count += 1;\r\n\r\n                if (checkLoadedData.count > 10) {\r\n                    videoStream.findVideoSize({\r\n                        videoElement: videoElement,\r\n                        cameraStream: cameraStream,\r\n                        completedCallback: completedCallback\r\n                    });\r\n                } else {\r\n                    checkLoadedData();\r\n                }\r\n            }\r\n        }, 0);\r\n    },\r\n    startStreaming: function startStreaming(obj) {\r\n        var errorCallback = utils.isFunction(obj.error) ? obj.error : utils.noop;\r\n        var streamedCallback = utils.isFunction(obj.streamed) ? obj.streamed : utils.noop;\r\n        var completedCallback = utils.isFunction(obj.completed) ? obj.completed : utils.noop;\r\n        var crossOrigin = obj.crossOrigin,\r\n            existingVideo = obj.existingVideo,\r\n            lastCameraStream = obj.lastCameraStream,\r\n            options = obj.options,\r\n            webcamVideoElement = obj.webcamVideoElement;\r\n\r\n        var videoElement = utils.isElement(existingVideo) ? existingVideo : webcamVideoElement ? webcamVideoElement : document.createElement('video');\r\n        var cameraStream = void 0;\r\n\r\n        if (crossOrigin) {\r\n            videoElement.crossOrigin = options.crossOrigin;\r\n        }\r\n\r\n        videoElement.autoplay = true;\r\n        videoElement.loop = true;\r\n        videoElement.muted = true;\r\n        videoElement.addEventListener('loadeddata', function (event) {\r\n            videoStream.loadedData = true;\r\n            if (options.offset) {\r\n                videoElement.currentTime = options.offset;\r\n            }\r\n        });\r\n\r\n        if (existingVideo) {\r\n            videoStream.stream({\r\n                videoElement: videoElement,\r\n                existingVideo: existingVideo,\r\n                completedCallback: completedCallback\r\n            });\r\n        } else if (lastCameraStream) {\r\n            videoStream.stream({\r\n                videoElement: videoElement,\r\n                cameraStream: lastCameraStream,\r\n                streamedCallback: streamedCallback,\r\n                completedCallback: completedCallback\r\n            });\r\n        } else {\r\n            utils.getUserMedia({\r\n                video: true\r\n            }, function (stream) {\r\n                videoStream.stream({\r\n                    videoElement: videoElement,\r\n                    cameraStream: stream,\r\n                    streamedCallback: streamedCallback,\r\n                    completedCallback: completedCallback\r\n                });\r\n            }, errorCallback);\r\n        }\r\n    },\r\n    startVideoStreaming: function startVideoStreaming(callback) {\r\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\r\n        var timeoutLength = options.timeout !== undefined ? options.timeout : 0;\r\n        var originalCallback = options.callback;\r\n        var webcamVideoElement = options.webcamVideoElement;\r\n        var noGetUserMediaSupportTimeout = void 0;\r\n\r\n        // Some browsers apparently have support for video streaming because of the\r\n        // presence of the getUserMedia function, but then do not answer our\r\n        // calls for streaming.\r\n        // So we'll set up this timeout and if nothing happens after a while, we'll\r\n        // conclude that there's no actual getUserMedia support.\r\n        if (timeoutLength > 0) {\r\n            noGetUserMediaSupportTimeout = utils.requestTimeout(function () {\r\n                videoStream.onStreamingTimeout(originalCallback);\r\n            }, 10000);\r\n        }\r\n\r\n        videoStream.startStreaming({\r\n            error: function error() {\r\n                originalCallback({\r\n                    error: true,\r\n                    errorCode: 'getUserMedia',\r\n                    errorMsg: 'There was an issue with the getUserMedia API - the user probably denied permission',\r\n                    image: null,\r\n                    cameraStream: {}\r\n                });\r\n            },\r\n            streamed: function streamed() {\r\n                // The streaming started somehow, so we can assume there is getUserMedia support\r\n                clearTimeout(noGetUserMediaSupportTimeout);\r\n            },\r\n            completed: function completed() {\r\n                var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n                var cameraStream = obj.cameraStream,\r\n                    videoElement = obj.videoElement,\r\n                    videoHeight = obj.videoHeight,\r\n                    videoWidth = obj.videoWidth;\r\n\r\n\r\n                callback({\r\n                    cameraStream: cameraStream,\r\n                    videoElement: videoElement,\r\n                    videoHeight: videoHeight,\r\n                    videoWidth: videoWidth\r\n                });\r\n            },\r\n            lastCameraStream: options.lastCameraStream,\r\n            webcamVideoElement: webcamVideoElement,\r\n            crossOrigin: options.crossOrigin,\r\n            options: options\r\n        });\r\n    },\r\n    stopVideoStreaming: function stopVideoStreaming(obj) {\r\n        obj = utils.isObject(obj) ? obj : {};\r\n\r\n        var _obj = obj,\r\n            keepCameraOn = _obj.keepCameraOn,\r\n            videoElement = _obj.videoElement,\r\n            webcamVideoElement = _obj.webcamVideoElement;\r\n\r\n        var cameraStream = obj.cameraStream || {};\r\n        var cameraStreamTracks = cameraStream.getTracks ? cameraStream.getTracks() || [] : [];\r\n        var hasCameraStreamTracks = !!cameraStreamTracks.length;\r\n        var firstCameraStreamTrack = cameraStreamTracks[0];\r\n\r\n        if (!keepCameraOn && hasCameraStreamTracks) {\r\n            if (utils.isFunction(firstCameraStreamTrack.stop)) {\r\n                // Stops the camera stream\r\n                firstCameraStreamTrack.stop();\r\n            }\r\n        }\r\n\r\n        if (utils.isElement(videoElement) && !webcamVideoElement) {\r\n            // Pauses the video, revokes the object URL (freeing up memory), and remove the video element\r\n            videoElement.pause();\r\n\r\n            // Destroys the object url\r\n            if (utils.isFunction(utils.URL.revokeObjectURL) && !utils.webWorkerError) {\r\n                if (videoElement.src) {\r\n                    utils.URL.revokeObjectURL(videoElement.src);\r\n                }\r\n            }\r\n\r\n            // Removes the video element from the DOM\r\n            utils.removeElement(videoElement);\r\n        }\r\n    }\r\n};\r\n\r\n/*\r\n  stopVideoStreaming.js\r\n  =====================\r\n*/\r\n\r\n/* Copyright  2017 Yahoo Inc.\r\n * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.\r\n*/\r\n\r\nfunction stopVideoStreaming(options) {\r\n  options = utils.isObject(options) ? options : {};\r\n\r\n  videoStream.stopVideoStreaming(options);\r\n}\r\n\r\n/*\r\n  createAndGetGIF.js\r\n  ==================\r\n*/\r\n\r\n/* Copyright  2017 Yahoo Inc.\r\n * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.\r\n*/\r\n\r\n// Dependencies\r\nfunction createAndGetGIF(obj, callback) {\r\n    var options = obj.options || {};\r\n\r\n    var images = options.images,\r\n        video = options.video;\r\n\r\n    var gifWidth = Number(options.gifWidth);\r\n    var gifHeight = Number(options.gifHeight);\r\n    var numFrames = Number(options.numFrames);\r\n    var cameraStream = obj.cameraStream,\r\n        videoElement = obj.videoElement,\r\n        videoWidth = obj.videoWidth,\r\n        videoHeight = obj.videoHeight;\r\n\r\n    var cropDimensions = screenShot.getCropDimensions({\r\n        videoWidth: videoWidth,\r\n        videoHeight: videoHeight,\r\n        gifHeight: gifHeight,\r\n        gifWidth: gifWidth\r\n    });\r\n    var completeCallback = callback;\r\n\r\n    options.crop = cropDimensions;\r\n    options.videoElement = videoElement;\r\n    options.videoWidth = videoWidth;\r\n    options.videoHeight = videoHeight;\r\n    options.cameraStream = cameraStream;\r\n\r\n    if (!utils.isElement(videoElement)) {\r\n        return;\r\n    }\r\n\r\n    videoElement.width = gifWidth + cropDimensions.width;\r\n    videoElement.height = gifHeight + cropDimensions.height;\r\n\r\n    if (!options.webcamVideoElement) {\r\n        utils.setCSSAttr(videoElement, {\r\n            position: 'fixed',\r\n            opacity: '0'\r\n        });\r\n\r\n        document.body.appendChild(videoElement);\r\n    }\r\n\r\n    // Firefox doesn't seem to obey autoplay if the element is not in the DOM when the content\r\n    // is loaded, so we must manually trigger play after adding it, or the video will be frozen\r\n    videoElement.play();\r\n\r\n    screenShot.getGIF(options, function (obj) {\r\n        if ((!images || !images.length) && (!video || !video.length)) {\r\n            stopVideoStreaming(obj);\r\n        }\r\n\r\n        completeCallback(obj);\r\n    });\r\n}\r\n\r\n/*\r\n  existingVideo.js\r\n  ================\r\n*/\r\n\r\n/* Copyright  2017 Yahoo Inc.\r\n * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.\r\n*/\r\n\r\n// Dependencies\r\nfunction existingVideo() {\r\n    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n    var callback = obj.callback,\r\n        existingVideo = obj.existingVideo,\r\n        options = obj.options;\r\n\r\n    var skipObj = {\r\n        getUserMedia: true,\r\n        'window.URL': true\r\n    };\r\n    var errorObj = error.validate(skipObj);\r\n    var loadedImages = 0;\r\n    var videoType = void 0;\r\n    var videoSrc = void 0;\r\n    var tempImage = void 0;\r\n    var ag = void 0;\r\n\r\n    if (errorObj.error) {\r\n        return callback(errorObj);\r\n    }\r\n\r\n    if (utils.isElement(existingVideo) && existingVideo.src) {\r\n        videoSrc = existingVideo.src;\r\n        videoType = utils.getExtension(videoSrc);\r\n\r\n        if (!utils.isSupported.videoCodecs[videoType]) {\r\n            return callback(error.messages.videoCodecs);\r\n        }\r\n    } else if (utils.isArray(existingVideo)) {\r\n        utils.each(existingVideo, function (iterator, videoSrc) {\r\n            if (videoSrc instanceof Blob) {\r\n                videoType = videoSrc.type.substr(videoSrc.type.lastIndexOf('/') + 1, videoSrc.length);\r\n            } else {\r\n                videoType = videoSrc.substr(videoSrc.lastIndexOf('.') + 1, videoSrc.length);\r\n            }\r\n\r\n            if (utils.isSupported.videoCodecs[videoType]) {\r\n                existingVideo = videoSrc;\r\n\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n\r\n    videoStream.startStreaming({\r\n        completed: function completed(obj) {\r\n            obj.options = options || {};\r\n\r\n            createAndGetGIF(obj, callback);\r\n        },\r\n        existingVideo: existingVideo,\r\n        crossOrigin: options.crossOrigin,\r\n        options: options\r\n    });\r\n}\r\n\r\n/*\r\n  existingWebcam.js\r\n  =================\r\n*/\r\n\r\n/* Copyright  2017 Yahoo Inc.\r\n * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.\r\n*/\r\n\r\n// Dependencies\r\nfunction existingWebcam() {\r\n    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n    var callback = obj.callback,\r\n        lastCameraStream = obj.lastCameraStream,\r\n        options = obj.options,\r\n        webcamVideoElement = obj.webcamVideoElement;\r\n\r\n\r\n    if (!isWebCamGIFSupported()) {\r\n        return callback(error.validate());\r\n    }\r\n\r\n    if (options.savedRenderingContexts.length) {\r\n        screenShot.getGIF(options, function (obj) {\r\n            callback(obj);\r\n        });\r\n\r\n        return;\r\n    }\r\n\r\n    videoStream.startVideoStreaming(function () {\r\n        var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n\r\n        obj.options = options || {};\r\n\r\n        createAndGetGIF(obj, callback);\r\n    }, {\r\n        lastCameraStream: lastCameraStream,\r\n        callback: callback,\r\n        webcamVideoElement: webcamVideoElement,\r\n        crossOrigin: options.crossOrigin\r\n    });\r\n}\r\n\r\n/*\r\n  createGIF.js\r\n  ============\r\n*/\r\n\r\n/* Copyright  2017 Yahoo Inc.\r\n * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.\r\n*/\r\n\r\n// Dependencies\r\nfunction createGIF(userOptions, callback) {\r\n  callback = utils.isFunction(userOptions) ? userOptions : callback;\r\n  userOptions = utils.isObject(userOptions) ? userOptions : {};\r\n\r\n  if (!utils.isFunction(callback)) {\r\n    return;\r\n  }\r\n\r\n  var options = utils.mergeOptions(defaultOptions, userOptions) || {};\r\n  var lastCameraStream = userOptions.cameraStream;\r\n  var images = options.images;\r\n  var imagesLength = images ? images.length : 0;\r\n  var video = options.video;\r\n  var webcamVideoElement = options.webcamVideoElement;\r\n\r\n  options = utils.mergeOptions(options, {\r\n    'gifWidth': Math.floor(options.gifWidth),\r\n    'gifHeight': Math.floor(options.gifHeight)\r\n  });\r\n\r\n  // If the user would like to create a GIF from an existing image(s)\r\n  if (imagesLength) {\r\n    existingImages({\r\n      'images': images,\r\n      'imagesLength': imagesLength,\r\n      'callback': callback,\r\n      'options': options\r\n    });\r\n  } else if (video) {\r\n    // If the user would like to create a GIF from an existing HTML5 video\r\n    existingVideo({\r\n      'existingVideo': video,\r\n      callback: callback,\r\n      options: options\r\n    });\r\n  } else {\r\n    // If the user would like to create a GIF from a webcam stream\r\n    existingWebcam({\r\n      lastCameraStream: lastCameraStream,\r\n      callback: callback,\r\n      webcamVideoElement: webcamVideoElement,\r\n      options: options\r\n    });\r\n  }\r\n}\r\n\r\n/*\r\n  takeSnapShot.js\r\n  ===============\r\n*/\r\n\r\n/* Copyright  2017 Yahoo Inc.\r\n * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.\r\n*/\r\n\r\nfunction takeSnapShot(userOptions, callback) {\r\n    callback = utils.isFunction(userOptions) ? userOptions : callback;\r\n    userOptions = utils.isObject(userOptions) ? userOptions : {};\r\n\r\n    if (!utils.isFunction(callback)) {\r\n        return;\r\n    }\r\n\r\n    var mergedOptions = utils.mergeOptions(defaultOptions, userOptions);\r\n    var options = utils.mergeOptions(mergedOptions, {\r\n        'interval': .1,\r\n        'numFrames': 1,\r\n        'gifWidth': Math.floor(mergedOptions.gifWidth),\r\n        'gifHeight': Math.floor(mergedOptions.gifHeight)\r\n    });\r\n\r\n    createGIF(options, callback);\r\n}\r\n\r\n/*\r\n  API.js\r\n  ======\r\n*/\r\n\r\n/* Copyright  2017 Yahoo Inc.\r\n * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.\r\n*/\r\n\r\n// Dependencies\r\nvar API = {\r\n  'utils': utils$2,\r\n  'error': error$2,\r\n  'defaultOptions': defaultOptions$2,\r\n  'createGIF': createGIF,\r\n  'takeSnapShot': takeSnapShot,\r\n  'stopVideoStreaming': stopVideoStreaming,\r\n  'isSupported': isSupported,\r\n  'isWebCamGIFSupported': isWebCamGIFSupported,\r\n  'isExistingVideoGIFSupported': isExistingVideoGIFSupported,\r\n  'isExistingImagesGIFSupported': isSupported$1,\r\n  'VERSION': '0.4.5'\r\n};\r\n\r\n/*\r\n  index.js\r\n  ========\r\n*/\r\n\r\n/* Copyright  2017 Yahoo Inc.\r\n * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.\r\n */\r\n\r\n// Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, and plain browser loading\r\nif (typeof define === 'function' && define.amd) {\r\n    define([], function () {\r\n        return API;\r\n    });\r\n} else if (typeof exports !== 'undefined') {\r\n    module.exports = API;\r\n} else {\r\n    window.gifshot = API;\r\n}\r\n}(typeof window !== \"undefined\" ? window : {}, typeof document !== \"undefined\" ? document : { createElement: function() {} }, typeof window !== \"undefined\" ? window.navigator : {}));\r\n"],"file":"index.js"}